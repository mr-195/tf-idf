are given the head of a linked list. delete the middle node, and return the head of the modified linked list.
middle node of a linked list of size n is the ân / 2âth node from the start using 0-based indexing, where âxâ denotes the largest integer less than or equal to x.
n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively.
are given an integer array nums.
one move, you can choose one element of nums and change it to any value.
the minimum difference between the largest and smallest value of nums after performing at most three moves.
are given the string croakoffrogs, which represents a combination of the string "croak" from different frogs, that is, multiple frogs can croak at the same time, so multiple "croak" are mixed.
the minimum number of different frogs to finish all the croaks in the given string.
valid "croak" means a frog is printing five letters 'c', 'r', 'o', 'a', and 'k' sequentially. the frogs have to print all five letters to finish a croak. if the given string is not a combination of a valid "croak" return -1.
english, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. for example, when the root "an" is followed by the successor word "other", we can form a new word "another".
a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. if a successor can be replaced by more than one root, replace it with the root that has the shortest length.
the sentence after the replacement.
are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.
repeatedly make k duplicate removals on s until we no longer can.
the final string after all such duplicate removals have been made. it is guaranteed that the answer is unique.
are given a tree (i.e. a connected, undirected graph that has no cycles) rooted at node 0 consisting of n nodes numbered from 0 to n - 1. the tree is represented by a 0-indexed array parent of size n, where parent[i] is the parent of node i. since node 0 is the root, parent[0] == -1.
are also given a string s of length n, where s[i] is the character assigned to node i.
the length of the longest path in the tree such that no pair of adjacent nodes on the path have the same character assigned to them.
numerals are represented by seven different symbols: i, v, x, l, c, d and m.
value
1
5
10
50
100
500
1000
example, 2 is written as ii in roman numeral, just two ones added together. 12 is written as xii, which is simply x + ii. the number 27 is written as xxvii, which is xx + v + ii.
numerals are usually written largest to smallest from left to right. however, the numeral for four is not iiii. instead, the number four is written as iv. because the one is before the five we subtract it making four. the same principle applies to the number nine, which is written as ix. there are six instances where subtraction is used:
can be placed before v (5) and x (10) to make 4 and 9.
can be placed before l (50) and c (100) to make 40 and 90.
can be placed before d (500) and m (1000) to make 400 and 900.
a roman numeral, convert it to an integer.
are given an integer num. rearrange the digits of num such that its value is minimized and it does not contain any leading zeros.
the rearranged number with minimal value.
that the sign of the number does not change after rearranging the digits.
an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
are given two strings s1 and s2 of equal length consisting of letters "x" and "y" only. your task is to make these two strings equal to each other. you can swap any two characters that belong to different strings, which means: swap s1[i] and s2[j].
the minimum number of swaps required to make s1 and s2 equal, or return -1 if it is impossible to do so.
two strings text1 and text2, return the length of their longest common subsequence. if there is no common subsequence, return 0.
subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
example, "ace" is a subsequence of "abcde".
common subsequence of two strings is a subsequence that is common to both strings.
is a strange printer with the following two special requirements:
each turn, the printer will print a solid rectangular pattern of a single color on the grid. this will cover up the existing colors in the rectangle.
the printer has used a color for the above operation, the same color cannot be used again.
are given a m x n matrix targetgrid, where targetgrid[row][col] is the color in the position (row, col) of the grid.
true if it is possible to print the matrix targetgrid, otherwise, return false.
is a sweltering summer day, and a boy wants to buy some ice cream bars.
the store, there are n ice cream bars. you are given an array costs of length n, where costs[i] is the price of the ith ice cream bar in coins. the boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible.
the boy can buy the ice cream bars in any order.
the maximum number of ice cream bars the boy can buy with coins coins.
must solve the problem by counting sort.
a binary tree root and a linked list with head as the first node.
true if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree otherwise return false.
this context downward path means a path that starts at some node and goes downwards.
are n students in a class numbered from 0 to n - 1. the teacher will give each student a problem starting with the student number 0, then the student number 1, and so on until the teacher reaches the student number n - 1. after that, the teacher will restart the process, starting with the student number 0 again.
are given a 0-indexed integer array chalk and an integer k. there are initially k pieces of chalk. when the student number i is given a problem to solve, they will use chalk[i] pieces of chalk to solve that problem. however, if the current number of chalk pieces is strictly less than chalk[i], then the student number i will be asked to replace the chalk.
the index of the student that will replace the chalk pieces.
two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
overall run time complexity should be o(log (m+n)).
message containing letters from a-z can be encoded into numbers using the following mapping:
-> "1"
-> "2"

-> "26"
decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). for example, "11106" can be mapped into:
with the grouping (1 1 10 6)
with the grouping (11 10 6)
that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'f' since "6" is different from "06".
a string s containing only digits, return the number of ways to decode it.
test cases are generated so that the answer fits in a 32-bit integer.
are given an n x n 2d matrix representing an image, rotate the image by 90 degrees (clockwise).
have to rotate the image in-place, which means you have to modify the input 2d matrix directly. do not allocate another 2d matrix and do the rotation.
a list of strings words and a string pattern, return a list of words[i] that match pattern. you may return the answer in any order.
word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.
that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.
are n people in a line queuing to buy tickets, where the 0th person is at the front of the line and the (n - 1)th person is at the back of the line.
are given a 0-indexed integer array tickets of length n where the number of tickets that the ith person would like to buy is tickets[i].
person takes exactly 1 second to buy a ticket. a person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously) in order to buy more tickets. if a person does not have any tickets left to buy, the person will leave the line.
the time taken for the person at position k (0-indexed) to finish buying tickets.
are given a list of songs where the ith song has a duration of time[i] seconds.
the number of pairs of songs for which their total duration in seconds is divisible by 60. formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.
are given a string s and an integer k. you can choose any character of the string and change it to any other uppercase english character. you can perform this operation at most k times.
the length of the longest substring containing the same letter you can get after performing the above operations.
original string, consisting of lowercase english letters, can be encoded by the following steps:
split it into a sequence of some number of non-empty substrings.
choose some elements (possibly none) of the sequence, and replace each with its length (as a numeric string).
the sequence as the encoded string.
example, one way to encode an original string "abcdefghijklmnop" might be:
it as a sequence: ["ab", "cdefghijklmn", "o", "p"].
the second and third elements to be replaced by their lengths, respectively. the sequence becomes ["ab", "12", "1", "p"].
the elements of the sequence to get the encoded string: "ab121p".
two encoded strings s1 and s2, consisting of lowercase english letters and digits 1-9 (inclusive), return true if there exists an original string that could be encoded as both s1 and s2. otherwise, return false.
the test cases are generated such that the number of consecutive digits in s1 and s2 does not exceed 3.
are given two non-empty linked lists representing two non-negative integers. the most significant digit comes first and each of their nodes contains a single digit. add the two numbers and return the sum as a linked list.
may assume the two numbers do not contain any leading zero, except the number 0 itself.
a n * n matrix grid of 0's and 1's only. we want to represent grid with a quad-tree.
the root of the quad-tree representing grid.
quad-tree is a tree data structure in which each internal node has exactly four children. besides, each node has two attributes:
true if the node represents a grid of 1's or false if the node represents a grid of 0's. notice that you can assign the val to true or false when isleaf is false, and both are accepted in the answer.
true if the node is a leaf node on the tree or false if the node has four children.
node {
boolean val;
boolean isleaf;
node topleft;
node topright;
node bottomleft;
node bottomright;

can construct a quad-tree from a two-dimensional area using the following steps:
the current grid has the same value (i.e all 1's or all 0's) set isleaf true and set val to the value of the grid and set the four children to null and stop.
the current grid has different values, set isleaf to false and set val to any value and divide the current grid into four sub-grids as shown in the photo.
for each of the children with the proper sub-grid.
you want to know more about the quad-tree, you can refer to the wiki.
format:
don't need to read this section for solving the problem. this is only if you want to understand the output format here. the output represents the serialized format of a quad-tree using level order traversal, where null signifies a path terminator where no node exists below.
is very similar to the serialization of the binary tree. the only difference is that the node is represented as a list [isleaf, val].
the value of isleaf or val is true we represent it as 1 in the list [isleaf, val] and if the value of isleaf or val is false we represent it as 0.
two strings s and t of lengths m and n respectively, return the minimum window

s such that every character in t (including duplicates) is included in the window. if there is no such substring, return the empty string "".
testcases will be generated such that the answer is unique.
n cuboids where the dimensions of the ith cuboid is cuboids[i] = [widthi, lengthi, heighti] (0-indexed). choose a subset of cuboids and place them on each other.
can place cuboid i on cuboid j if widthi <= widthj and lengthi <= lengthj and heighti <= heightj. you can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.
the maximum height of the stacked cuboids.
a string s, partition s such that every

the partition is a

return all possible palindrome partitioning of s.
are given a string s consisting of lowercase english letters, and an integer k.
convert s into an integer by replacing each letter with its position in the alphabet (i.e., replace 'a' with 1, 'b' with 2, ..., 'z' with 26). then, transform the integer by replacing it with the sum of its digits. repeat the transform operation k times in total.
example, if s = "zbax" and k = 2, then the resulting integer would be 8 by the following operations:
"zbax" â "(26)(2)(1)(24)" â "262124" â 262124
#1: 262124 â 2 + 6 + 2 + 1 + 2 + 4 â 17
#2: 17 â 1 + 7 â 8
the resulting integer after performing the operations described above.
is an m x n matrix that is initialized to all 0's. there is also a 2d array indices where each indices[i] = [ri, ci] represents a 0-indexed location to perform some increment operations on the matrix.
each location indices[i], do both of the following:
all the cells on row ri.
all the cells on column ci.
m, n, and indices, return the number of odd-valued cells in the matrix after applying the increment to all locations in indices.
gene string can be represented by an 8-character long string, with choices from 'a', 'c', 'g', and 't'.
we need to investigate a mutation from a gene string startgene to a gene string endgene where one mutation is defined as one single character changed in the gene string.
example, "aaccggtt" --> "aaccggta" is one mutation.
is also a gene bank bank that records all the valid gene mutations. a gene must be in bank to make it a valid gene string.
the two gene strings startgene and endgene and the gene bank bank, return the minimum number of mutations needed to mutate from startgene to endgene. if there is no such a mutation, return -1.
that the starting point is assumed to be valid, so it might not be included in the bank.
is a hotel with n rooms. the rooms are represented by a 2d integer array rooms where rooms[i] = [roomidi, sizei] denotes that there is a room with room number roomidi and size equal to sizei. each roomidi is guaranteed to be unique.
are also given k queries in a 2d array queries where queries[j] = [preferredj, minsizej]. the answer to the jth query is the room number id of a room such that:
room has a size of at least minsizej, and
- preferredj) is minimized, where abs(x) is the absolute value of x.
there is a tie in the absolute difference, then use the room with the smallest such id. if there is no such room, the answer is -1.
an array answer of length k where answer[j] contains the answer to the jth query.
schema
person

column name | type |

personid | int |
lastname | varchar |
firstname | varchar |

is the primary key column for this table.
table contains information about the id of some persons and their first and last names.
address

column name | type |

addressid | int |
personid | int |
city | varchar |
state | varchar |

is the primary key column for this table.
row of this table contains information about the city and state of one person with id = personid.
an sql query to report the first name, last name, city, and state of each person in the person table. if the address of a personid is not present in the address table, report null instead.
the result table in any order.
query result format is in the following example.
are given an integer array nums where the largest integer is unique.
whether the largest element in the array is at least twice as much as every other number in the array. if it is, return the index of the largest element, or return -1 otherwise.
two sorted 0-indexed integer arrays nums1 and nums2 as well as an integer k, return the kth (1-based) smallest product of nums1[i] * nums2[j] where 0 <= i < nums1.length and 0 <= j < nums2.length.
the root of a binary tree, calculate the vertical order traversal of the binary tree.
each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. the root of the tree is at (0, 0).
vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. there may be multiple nodes in the same row and same column. in such a case, sort these nodes by their values.
the vertical order traversal of the binary tree.
is a 1-based binary matrix where 0 represents land and 1 represents water. you are given integers row and col representing the number of rows and columns in the matrix, respectively.
on day 0, the entire matrix is land. however, each day a new cell becomes flooded with water. you are given a 1-based 2d array cells, where cells[i] = [ri, ci] represents that on the ith day, the cell on the rith row and cith column (1-based coordinates) will be covered with water (i.e., changed to 1).
want to find the last day that it is possible to walk from the top to the bottom by only walking on land cells. you can start from any cell in the top row and end at any cell in the bottom row. you can only travel in the four cardinal directions (left, right, up, and down).
the last day where it is possible to walk from the top to the bottom by only walking on land cells.
schema
courses

column name | type |

student | varchar |
class | varchar |

class) is the primary key column for this table.
row of this table indicates the name of a student and the class in which they are enrolled.
an sql query to report all the classes that have at least five students.
the result table in any order.
query result format is in the following example.
are given an m x n integer matrix grid, and three integers row, col, and color. each value in the grid represents the color of the grid square at that location.
squares belong to the same connected component if they have the same color and are next to each other in any of the 4 directions.
border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).
should color the border of the connected component that contains the square grid[row][col] with color.
the final grid.
a string s, return the number of homogenous substrings of s. since the answer may be too large, return it modulo 109 + 7.
string is homogenous if all the characters of the string are the same.
substring is a contiguous sequence of characters within a string.
are a product manager and currently leading a team to develop a new product. unfortunately, the latest version of your product fails the quality check. since each version is developed based on the previous version, all the versions after a bad version are also bad.
you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.
are given an api bool isbadversion(version) which returns whether version is bad. implement a function to find the first bad version. you should minimize the number of calls to the api.
a positive integer num, return true if num is a perfect square or false otherwise.
perfect square is an integer that is the square of an integer. in other words, it is the product of some integer with itself.
must not use any built-in library function, such as sqrt.
an m x n binary matrix mat, return the number of special positions in mat.
position (i, j) is called special if mat[i][j] == 1 and all other elements in row i and column j are 0 (rows and columns are 0-indexed).
is a bag that consists of items, each item has a number 1, 0, or -1 written on it.
are given four non-negative integers numones, numzeros, numnegones, and k.
bag initially contains:
items with 1s written on them.
items with 0s written on them.
items with -1s written on them.
want to pick exactly k items among the available items. return the maximum possible sum of numbers written on the items.
are given two integer arrays of equal length target and arr. in one step, you can select any non-empty subarray of arr and reverse it. you are allowed to make any number of steps.
true if you can make arr equal to target or false otherwise.
shop is selling candies at a discount. for every two candies sold, the shop gives a third candy for free.
customer can choose any candy to take away for free as long as the cost of the chosen candy is less than or equal to the minimum cost of the two candies bought.
example, if there are 4 candies with costs 1, 2, 3, and 4, and the customer buys candies with costs 2 and 3, they can take the candy with cost 1 for free, but not the candy with cost 4.
a 0-indexed integer array cost, where cost[i] denotes the cost of the ith candy, return the minimum cost of buying all the candies.
web developer needs to know how to design a web page's size. so, given a specific rectangular web pageâs area, your job by now is to design a rectangular web page, whose length l and width w satisfy the following requirements:
area of the rectangular web page you designed must equal to the given target area.
width w should not be larger than the length l, which means l >= w.
difference between length l and width w should be as small as possible.
an array [l, w] where l and w are the length and width of the web page you designed in sequence.
n points on a 1-d plane, where the ith point (from 0 to n-1) is at x = i, find the number of ways we can draw exactly k non-overlapping line segments such that each segment covers two or more points. the endpoints of each segment must have integral coordinates. the k line segments do not have to cover all n points, and they are allowed to share endpoints.
the number of ways we can draw k non-overlapping line segments. since this number can be huge, return it modulo 109 + 7.
are playing a game involving a circular array of non-zero integers nums. each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:
nums[i] is positive, move nums[i] steps forward, and
nums[i] is negative, move nums[i] steps backward.
the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.
cycle in the array consists of a sequence of indices seq of length k where:
the movement rules above results in the repeating index sequence seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...
nums[seq[j]] is either all positive or all negative.
> 1
true if there is a cycle in nums, or false otherwise.
are given a 0-indexed string blocks of length n, where blocks[i] is either 'w' or 'b', representing the color of the ith block. the characters 'w' and 'b' denote the colors white and black, respectively.
are also given an integer k, which is the desired number of consecutive black blocks.
one operation, you can recolor a white block such that it becomes a black block.
the minimum number of operations needed such that there is at least one occurrence of k consecutive black blocks.
are given an array prices where prices[i] is the price of a given stock on the ith day.
want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
the maximum profit you can achieve from this transaction. if you cannot achieve any profit, return 0.
an integer array nums, return the maximum possible sum of elements of the array such that it is divisible by three.
are given a string number representing a positive integer and a character digit.
the resulting string after removing exactly one occurrence of digit from number such that the value of the resulting string in decimal form is maximized. the test cases are generated such that digit occurs at least once in number.
an integer n, return true if it is possible to represent n as the sum of distinct powers of three. otherwise, return false.
integer y is a power of three if there exists an integer x such that y == 3x.
are given two integer arrays nums1 and nums2. we write the integers of nums1 and nums2 (in the order they are given) on two separate horizontal lines.
may draw connecting lines: a straight line connecting two numbers nums1[i] and nums2[j] such that:
== nums2[j], and
line we draw does not intersect any other connecting (non-horizontal) line.
that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).
the maximum number of connecting lines we can draw in this way.
the root of a binary tree and an integer targetsum, return all root-to-leaf paths where the sum of the node values in the path equals targetsum. each path should be returned as a list of the node values, not node references.
root-to-leaf path is a path starting from the root and ending at any leaf node. a leaf is a node with no children.
are given an m x n integer matrix matrix with the following two properties:
row is sorted in non-decreasing order.
first integer of each row is greater than the last integer of the previous row.
an integer target, return true if target is in matrix or false otherwise.
must write a solution in o(log(m * n)) time complexity.
are given a 0-indexed two-dimensional integer array nums.
the largest prime number that lies on at least one of the diagonals of nums. in case, no prime is present on any of the diagonals, return 0.
that:
integer is prime if it is greater than 1 and has no positive integer divisors other than 1 and itself.
integer val is on one of the diagonals of nums if there exists an integer i for which nums[i][i] = val or an i for which nums[i][nums.length - i - 1] = val.
the above diagram, one diagonal is [1,5,9] and another diagonal is [3,5,7].
a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. if the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. more formally, the property root.val = min(root.left.val, root.right.val) always holds.
such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.
no such second minimum value exists, output -1 instead.
1:
root = [2,2,5,null,null,5,7]
5
the smallest value is 2, the second smallest value is 5.
2:
root = [2,2,2]
-1
the smallest value is 2, but there isn't any second smallest value.

number of nodes in the tree is in the range [1, 25].
<= node.val <= 231 - 1
== min(root.left.val, root.right.val) for each internal node of the tree.
an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.
the video game fallout 4, the quest "road to freedom" requires players to reach a metal dial called the "freedom trail ring" and use the dial to spell a specific keyword to open the door.
a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword.
the first character of the ring is aligned at the "12:00" direction. you should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the "12:00" direction and then by pressing the center button.
the stage of rotating the ring to spell the key character key[i]:
can rotate the ring clockwise or anticlockwise by one place, which counts as one step. the final purpose of the rotation is to align one of ring's characters at the "12:00" direction, where this character must equal key[i].
the character key[i] has been aligned at the "12:00" direction, press the center button to spell, which also counts as one step. after the pressing, you could begin to spell the next character in the key (next stage). otherwise, you have finished all the spelling.
say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.
two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].
are n different online courses numbered from 1 to n. you are given an array courses where courses[i] = [durationi, lastdayi] indicate that the ith course should be taken continuously for durationi days and must be finished before or on lastdayi.
will start on the 1st day and you cannot take two or more courses simultaneously.
the maximum number of courses that you can take.
hero teemo is attacking an enemy ashe with poison attacks! when teemo attacks ashe, ashe gets poisoned for a exactly duration seconds. more formally, an attack at second t will mean ashe is poisoned during the inclusive time interval [t, t + duration - 1]. if teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.
are given a non-decreasing integer array timeseries, where timeseries[i] denotes that teemo attacks ashe at second timeseries[i], and an integer duration.
the total number of seconds that ashe is poisoned.
are given two arrays of strings that represent two inclusive events that happened on the same day, event1 and event2, where:
= [starttime1, endtime1] and
= [starttime2, endtime2].
times are valid 24 hours format in the form of hh:mm.
conflict happens when two events have some non-empty intersection (i.e., some moment is common to both events).
true if there is a conflict between two events. otherwise, return false.
are given a string s consisting of digits and an integer k.
round can be completed if the length of s is greater than k. in one round, do the following:
s into consecutive groups of size k such that the first k characters are in the first group, the next k characters are in the second group, and so on. note that the size of the last group can be smaller than k.
each group of s with a string representing the sum of all its digits. for example, "346" is replaced with "13" because 3 + 4 + 6 = 13.
consecutive groups together to form a new string. if the length of the string is greater than k, repeat from step 1.
s after all rounds have been completed.
an integer n, return the number of ways you can write n as the sum of consecutive positive integers.
are given an array of logs. each log is a space-delimited string of words, where the first word is the identifier.
are two types of logs:
all words (except the identifier) consist of lowercase english letters.
all words (except the identifier) consist of digits.
these logs so that:
letter-logs come before all digit-logs.
letter-logs are sorted lexicographically by their contents. if their contents are the same, then sort them lexicographically by their identifiers.
digit-logs maintain their relative ordering.
the final order of the logs.
schema
insurance

column name | type |

pid | int |
tiv_2015 | float |
tiv_2016 | float |
lat | float |
lon | float |

is the primary key column for this table.
row of this table contains information about one policy where:
is the policyholder's policy id.
is the total investment value in 2015 and tiv_2016 is the total investment value in 2016.
is the latitude of the policy holder's city. it's guaranteed that lat is not null.
is the longitude of the policy holder's city. it's guaranteed that lon is not null.
an sql query to report the sum of all total investment values in 2016 tiv_2016, for all policyholders who:
the same tiv_2015 value as one or more other policyholders, and
not located in the same city like any other policyholder (i.e., the (lat, lon) attribute pairs must be unique).
tiv_2016 to two decimal places.
query result format is in the following example.
the array orders, which represents the orders that customers have done in a restaurant. more specifically orders[i]=[customernamei,tablenumberi,fooditemi] where customernamei is the name of the customer, tablenumberi is the table customer sit at, and fooditemi is the item customer orders.
the restaurant's âdisplay tableâ. the âdisplay tableâ is a table whose row entries denote how many of each food item each table ordered. the first column is the table number and the remaining columns correspond to each food item in alphabetical order. the first row should be a header whose first column is âtableâ, followed by the names of the food items. note that the customer names are not part of the table. additionally, the rows should be sorted in numerically increasing order.
are given n balloons, indexed from 0 to n - 1. each balloon is painted with a number on it represented by an array nums. you are asked to burst all the balloons.
you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. if i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.
the maximum coins you can collect by bursting the balloons wisely.
underground railway system is keeping track of customer travel times between different stations. they are using this data to calculate the average time it takes to travel from one station to another.
the undergroundsystem class:
checkin(int id, string stationname, int t)
customer with a card id equal to id, checks in at the station stationname at time t.
customer can only be checked into one place at a time.
checkout(int id, string stationname, int t)
customer with a card id equal to id, checks out from the station stationname at time t.
getaveragetime(string startstation, string endstation)
the average time it takes to travel from startstation to endstation.
average time is computed from all the previous traveling times from startstation to endstation that happened directly, meaning a check in at startstation followed by a check out from endstation.
time it takes to travel from startstation to endstation may be different from the time it takes to travel from endstation to startstation.
will be at least one customer that has traveled from startstation to endstation before getaveragetime is called.
may assume all calls to the checkin and checkout methods are consistent. if a customer checks in at time t1 then checks out at time t2, then t1 < t2. all events happen in chronological order.
an integer n represented as a string, return the smallest good base of n.
call k >= 2 a good base of n, if all digits of n base k are 1's.
are n soldiers standing in a line. each soldier is assigned a unique rating value.
have to form a team of 3 soldiers amongst them under the following rules:
3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).
the number of teams you can form given the conditions. (soldiers can be part of multiple teams).
have a data structure of employee information, including the employee's unique id, importance value, and direct subordinates' ids.
are given an array of employees employees where:
is the id of the ith employee.
is the importance value of the ith employee.
is a list of the ids of the direct subordinates of the ith employee.
an integer id that represents an employee's id, return the total importance value of this employee and all their direct and indirect subordinates.
are given a 0-indexed 2d integer array brackets where brackets[i] = [upperi, percenti] means that the ith tax bracket has an upper bound of upperi and is taxed at a rate of percenti. the brackets are sorted by upper bound (i.e. upperi-1 < upperi for 0 < i < brackets.length).
is calculated as follows:
first upper0 dollars earned are taxed at a rate of percent0.
next upper1 - upper0 dollars earned are taxed at a rate of percent1.
next upper2 - upper1 dollars earned are taxed at a rate of percent2.
so on.
are given an integer income representing the amount of money you earned. return the amount of money that you have to pay in taxes. answers within 10-5 of the actual answer will be accepted.
passengers board an airplane with exactly n seats. the first passenger has lost the ticket and picks a seat randomly. but after that, the rest of the passengers will:
their own seat if it is still available, and
other seats randomly when they find their seat occupied
the probability that the nth person gets his own seat.
are given the root of a binary search tree and an array queries of size n consisting of positive integers.
a 2d array answer of size n where answer[i] = [mini, maxi]:
is the largest value in the tree that is smaller than or equal to queries[i]. if a such value does not exist, add -1 instead.
is the smallest value in the tree that is greater than or equal to queries[i]. if a such value does not exist, add -1 instead.
the array answer.
are given an integer money denoting the amount of money (in dollars) that you have and another integer children denoting the number of children that you must distribute the money to.
have to distribute the money according to the following rules:
money must be distributed.
must receive at least 1 dollar.
receives 4 dollars.
the maximum number of children who may receive exactly 8 dollars if you distribute the money according to the aforementioned rules. if there is no way to distribute the money, return -1.
the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.
steps of the insertion sort algorithm:
sort iterates, consuming one input element each repetition and growing a sorted output list.
each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.
repeats until no input elements remain.
following is a graphical example of the insertion sort algorithm. the partially sorted list (black) initially contains only the first element in the list. one element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.
an integer array nums, return the number of longest increasing subsequences.
that the sequence has to be strictly increasing.
are given a 0-indexed array of strings nums, where each string is of equal length and consists of only digits.
are also given a 0-indexed 2d integer array queries where queries[i] = [ki, trimi]. for each queries[i], you need to:
each number in nums to its rightmost trimi digits.
the index of the kith smallest trimmed number in nums. if two trimmed numbers are equal, the number with the lower index is considered to be smaller.
each number in nums to its original length.
an array answer of the same length as queries, where answer[i] is the answer to the ith query.

trim to the rightmost x digits means to keep removing the leftmost digit, until only x digits remain.
in nums may contain leading zeros.
is a long table with a line of plates and candles arranged on top of it. you are given a 0-indexed string s consisting of characters '*' and '|' only, where a '*' represents a plate and a '|' represents a candle.
are also given a 0-indexed 2d integer array queries where queries[i] = [lefti, righti] denotes the substring s[lefti...righti] (inclusive). for each query, you need to find the number of plates between candles that are in the substring. a plate is considered between candles if there is at least one candle to its left and at least one candle to its right in the substring.
example, s = "||**||**|*", and a query [3, 8] denotes the substring "*||**|". the number of plates between candles in this substring is 2, as each of the two plates has at least one candle in the substring to its left and right.
an integer array answer where answer[i] is the answer to the ith query.
peak element in a 2d grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.
a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].
may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.
must write an algorithm that runs in o(m log(n)) or o(n log(m)) time.
an array nums that represents a permutation of integers from 1 to n. we are going to construct a binary search tree (bst) by inserting the elements of nums in order into an initially empty bst. find the number of different ways to reorder nums so that the constructed bst is identical to that formed from the original array nums.
example, given nums = [2,1,3], we will have 2 as the root, 1 as a left child, and 3 as a right child. the array [2,3,1] also yields the same bst but [3,2,1] yields a different bst.
the number of ways to reorder nums such that the bst formed is identical to the original bst formed from nums.
the answer may be very large, return it modulo 109 + 7.
the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts.
length of each part should be as equal as possible: no two parts should have a size differing by more than one. this may lead to some parts being null.
parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.
an array of the k parts.
an array nums of distinct integers, return all the possible permutations. you can return the answer in any order.
a 2d integer array nums where nums[i] is a non-empty array of distinct positive integers, return the list of integers that are present in each array of nums sorted in ascending order.
are given a string num representing the digits of a very large integer and an integer k. you are allowed to swap any two adjacent digits of the integer at most k times.
the minimum integer you can obtain also as a string.
a binary search tree (bst), find the lowest common ancestor (lca) node of two given nodes in the bst.
to the definition of lca on wikipedia: âthe lowest common ancestor is defined between two nodes p and q as the lowest node in t that has both p and q as descendants (where we allow a node to be a descendant of itself).â
are given a 0-indexed integer array nums. in one operation, you can:
two different indices i and j such that 0 <= i, j < nums.length.
a non-negative integer k such that the kth bit (0-indexed) in the binary representation of nums[i] and nums[j] is 1.
2k from nums[i] and nums[j].
subarray is beautiful if it is possible to make all of its elements equal to 0 after applying the above operation any number of times.
the number of beautiful subarrays in the array nums.
subarray is a contiguous non-empty sequence of elements within an array.
an integer array of even length arr, return true if it is possible to reorder arr such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2, or false otherwise.
are given a character array keys containing unique characters and a string array values containing strings of length 2. you are also given another string array dictionary that contains all permitted original strings after decryption. you should implement a data structure that can encrypt or decrypt a 0-indexed string.
string is encrypted with the following process:
each character c in the string, we find the index i satisfying keys[i] == c in keys.
c with values[i] in the string.
that in case a character of the string is not present in keys, the encryption process cannot be carried out, and an empty string "" is returned.
string is decrypted with the following process:
each substring s of length 2 occurring at an even index in the string, we find an i such that values[i] == s. if there are multiple valid i, we choose any one of them. this means a string could have multiple possible strings it can decrypt to.
s with keys[i] in the string.
the encrypter class:
keys, string[] values, string[] dictionary) initializes the encrypter class with keys, values, and dictionary.
encrypt(string word1) encrypts word1 with the encryption process described above and returns the encrypted string.
decrypt(string word2) returns the number of possible strings word2 could decrypt to that also appear in dictionary.
are k workers who want to move n boxes from an old warehouse to a new one. you are given the two integers n and k, and a 2d integer array time of size k x 4 where time[i] = [lefttorighti, pickoldi, righttolefti, putnewi].
warehouses are separated by a river and connected by a bridge. the old warehouse is on the right bank of the river, and the new warehouse is on the left bank of the river. initially, all k workers are waiting on the left side of the bridge. to move the boxes, the ith worker (0-indexed) can :
the bridge from the left bank (new warehouse) to the right bank (old warehouse) in lefttorighti minutes.
a box from the old warehouse and return to the bridge in pickoldi minutes. different workers can pick up their boxes simultaneously.
the bridge from the right bank (old warehouse) to the left bank (new warehouse) in righttolefti minutes.
the box in the new warehouse and return to the bridge in putnewi minutes. different workers can put their boxes simultaneously.
worker i is less efficient than a worker j if either condition is met:
+ righttolefti > lefttorightj + righttoleftj
+ righttolefti == lefttorightj + righttoleftj and i > j
following rules regulate the movement of the workers through the bridge :
a worker x reaches the bridge while another worker y is crossing the bridge, x waits at their side of the bridge.
the bridge is free, the worker waiting on the right side of the bridge gets to cross the bridge. if more than one worker is waiting on the right side, the one with the lowest efficiency crosses first.
the bridge is free and no worker is waiting on the right side, and at least one box remains at the old warehouse, the worker on the left side of the river gets to cross the bridge. if more than one worker is waiting on the left side, the one with the lowest efficiency crosses first.
the instance of time at which the last worker reaches the left bank of the river after all n boxes have been put in the new warehouse.
are standing at position 0 on an infinite number line. there is a destination at position target.
can make some number of moves nummoves so that:
each move, you can either go left or right.
the ith move (starting from i == 1 to i == nummoves), you take i steps in the chosen direction.
the integer target, return the minimum number of moves required (i.e., the minimum nummoves) to reach the destination.
are given a 0-indexed integer array buses of length n, where buses[i] represents the departure time of the ith bus. you are also given a 0-indexed integer array passengers of length m, where passengers[j] represents the arrival time of the jth passenger. all bus departure times are unique. all passenger arrival times are unique.
are given an integer capacity, which represents the maximum number of passengers that can get on each bus.
a passenger arrives, they will wait in line for the next available bus. you can get on a bus that departs at x minutes if you arrive at y minutes where y <= x, and the bus is not full. passengers with the earliest arrival times get on the bus first.
formally when a bus arrives, either:
capacity or fewer passengers are waiting for a bus, they will all get on the bus, or
capacity passengers with the earliest arrival times will get on the bus.
the latest time you may arrive at the bus station to catch a bus. you cannot arrive at the same time as another passenger.
the arrays buses and passengers are not necessarily sorted.
are given a 0-indexed integer array nums and an integer k. your task is to perform the following operation exactly k times in order to maximize your score:
an element m from nums.
the selected element m from the array.
a new element with a value of m + 1 to the array.
your score by m.
the maximum score you can achieve after performing the operation exactly k times.
power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps:
x is even then x = x / 2
x is odd then x = 3 * x + 1
example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).
three integers lo, hi and k. the task is to sort all integers in the interval [lo, hi] by the power value in ascending order, if two or more integers have the same power value sort them by ascending order.
the kth integer in the range [lo, hi] sorted by the power value.
that for any integer x (lo <= x <= hi) it is guaranteed that x will transform into 1 using these steps and that the power of x is will fit in a 32-bit signed integer.
are given an array of positive integers price where price[i] denotes the price of the ith candy and a positive integer k.
store sells baskets of k distinct candies. the tastiness of a candy basket is the smallest absolute difference of the prices of any two candies in the basket.
the maximum tastiness of a candy basket.
axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. its top and bottom edges are parallel to the x-axis, and its left and right edges are parallel to the y-axis.
rectangles overlap if the area of their intersection is positive. to be clear, two rectangles that only touch at the corner or edges do not overlap.
two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.
are given an array of integers distance.
start at the point (0, 0) on an x-y plane, and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. in other words, after each move, your direction changes counter-clockwise.
true if your path crosses itself or false if it does not.
the array houses where houses[i] is the location of the ith house along a street and an integer k, allocate k mailboxes in the street.
the minimum total distance between each house and its nearest mailbox.
test cases are generated so that the answer fits in a 32-bit integer.
and bob take turns playing a game, with alice starting first.
are n stones arranged in a row. on each player's turn, while the number of stones is more than one, they will do the following:
an integer x > 1, and remove the leftmost x stones from the row.
the sum of the removed stones' values to the player's score.
a new stone, whose value is equal to that sum, on the left side of the row.
game stops when only one stone is left in the row.
score difference between alice and bob is (alice's score - bob's score). alice's goal is to maximize the score difference, and bob's goal is the minimize the score difference.
an integer array stones of length n where stones[i] represents the value of the ith stone from the left, return the score difference between alice and bob if they both play optimally.
schema
employee

column name | type |

id | int |
name | varchar |
salary | int |
managerid | int |

is the primary key column for this table.
row of this table indicates the id of an employee, their name, salary, and the id of their manager.
an sql query to find the employees who earn more than their managers.
the result table in any order.
query result format is in the following example.
teacher is writing a test with n true/false questions, with 't' denoting true and 'f' denoting false. he wants to confuse the students by maximizing the number of consecutive questions with the same answer (multiple trues or multiple falses in a row).
are given a string answerkey, where answerkey[i] is the original answer to the ith question. in addition, you are given an integer k, the maximum number of times you may perform the following operation:
the answer key for any question to 't' or 'f' (i.e., set answerkey[i] to 't' or 'f').
the maximum number of consecutive 't's or 'f's in the answer key after performing the operation at most k times.
a string s and a character letter, return the percentage of characters in s that equal letter rounded down to the nearest whole percent.
have a lock in front of you with 4 circular wheels. each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. the wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. each move consists of turning one wheel one slot.
lock initially starts at '0000', a string representing the state of the 4 wheels.
are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.
a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.
are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the ith pile, and an integer k. you should apply the following operation exactly k times:
any piles[i] and remove floor(piles[i] / 2) stones from it.
that you can apply the operation on the same pile more than once.
the minimum possible total number of stones remaining after applying the k operations.
is the greatest integer that is smaller than or equal to x (i.e., rounds x down).
a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.
the freqstack class:
constructs an empty frequency stack.
push(int val) pushes an integer val onto the top of the stack.
pop() removes and returns the most frequent element in the stack.
there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.
are given an integer array digits, where each element is a digit. the array may contain duplicates.
need to find all the unique integers that follow the given requirements:
integer consists of the concatenation of three elements from digits in any arbitrary order.
integer does not have leading zeros.
integer is even.
example, if the given digits were [1, 2, 3], integers 132 and 312 follow the requirements.
a sorted array of the unique integers.
are given an integer n. a 0-indexed integer array nums of length n + 1 is generated in the following way:
= 0
= 1
* i] = nums[i] when 2 <= 2 * i <= n
* i + 1] = nums[i] + nums[i + 1] when 2 <= 2 * i + 1 <= n
the maximum integer in the array nums.
the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
should preserve the original relative order of the nodes in each of the two partitions.
an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. return the maximized sum.
a triangle array, return the minimum path sum from top to bottom.
each step, you may move to an adjacent number of the row below. more formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.
are given two strings s and t of the same length and an integer maxcost.
want to change s to t. changing the ith character of s to ith character of t costs |s[i] - t[i]| (i.e., the absolute difference between the ascii values of the characters).
the maximum length of a substring of s that can be changed to be the same as the corresponding substring of t with a cost less than or equal to maxcost. if there is no substring from s that can be changed to its corresponding substring from t, return 0.
the roots of two binary trees p and q, write a function to check if they are the same or not.
binary trees are considered the same if they are structurally identical, and the nodes have the same value.
are given an integer n indicating there are n specialty retail stores. there are m product types of varying amounts, which are given as a 0-indexed integer array quantities, where quantities[i] represents the number of products of the ith product type.
need to distribute all products to the retail stores following these rules:
store can only be given at most one product type but can be given any amount of it.
distribution, each store will have been given some number of products (possibly 0). let x represent the maximum number of products given to any store. you want x to be as small as possible, i.e., you want to minimize the maximum number of products that are given to any store.
the minimum possible x.
are given a 0-indexed binary array nums of length n. nums can be divided at index i (where 0 <= i <= n) into two arrays (possibly empty) numsleft and numsright:
has all the elements of nums between index 0 and i - 1 (inclusive), while numsright has all the elements of nums between index i and n - 1 (inclusive).
i == 0, numsleft is empty, while numsright has all the elements of nums.
i == n, numsleft has all the elements of nums, while numsright is empty.
division score of an index i is the sum of the number of 0's in numsleft and the number of 1's in numsright.
all distinct indices that have the highest possible division score. you may return the answer in any order.
are given an integer n. you roll a fair 6-sided dice n times. determine the total number of distinct sequences of rolls possible such that the following conditions are satisfied:
greatest common divisor of any adjacent values in the sequence is equal to 1.
is at least a gap of 2 rolls between equal valued rolls. more formally, if the value of the ith roll is equal to the value of the jth roll, then abs(i - j) > 2.
the total number of distinct sequences possible. since the answer may be very large, return it modulo 109 + 7.
sequences are considered distinct if at least one element is different.
are given a 0-indexed integer array nums of size n and a positive integer k.
call an index i in the range k <= i < n - k good if the following conditions are satisfied:
k elements that are just before the index i are in non-increasing order.
k elements that are just after the index i are in non-decreasing order.
an array of all good indices sorted in increasing order.
are given a stream of records about a particular stock. each record contains a timestamp and the corresponding price of the stock at that timestamp.
due to the volatile nature of the stock market, the records do not come in order. even worse, some records may be incorrect. another record with the same timestamp may appear later in the stream correcting the price of the previous wrong record.
an algorithm that:
the price of the stock at a particular timestamp, correcting the price from any previous records at the timestamp.
the latest price of the stock based on the current records. the latest price is the price at the latest timestamp recorded.
the maximum price the stock has been based on the current records.
the minimum price the stock has been based on the current records.
the stockprice class:
initializes the object with no price records.
update(int timestamp, int price) updates the price of the stock at the given timestamp.
current() returns the latest price of the stock.
maximum() returns the maximum price of the stock.
minimum() returns the minimum price of the stock.
an integer array nums containing n integers, find the beauty of each subarray of size k.
beauty of a subarray is the xth smallest integer in the subarray if it is negative, or 0 if there are fewer than x negative integers.
an integer array containing n - k + 1 integers, which denote the beauty of the subarrays in order from the first index in the array.
subarray is a contiguous non-empty sequence of elements within an array.
two strings: s1 and s2 with the same size, check if some permutation of string s1 can break some permutation of string s2 or vice-versa. in other words s2 can break s1 or vice-versa.
string x can break string y (both of size n) if x[i] >= y[i] (in alphabetical order) for all i between 0 and n-1.
schema
activity

column name | type |

machine_id | int |
process_id | int |
activity_type | enum |
timestamp | float |

table shows the user activities for a factory website.
process_id, activity_type) is the primary key of this table.
is the id of a machine.
is the id of a process running on the machine with id machine_id.
is an enum of type ('start', 'end').
is a float representing the current time in seconds.
means the machine starts the process at the given timestamp and 'end' means the machine ends the process at the given timestamp.
'start' timestamp will always be before the 'end' timestamp for every (machine_id, process_id) pair.
is a factory website that has several machines each running the same number of processes. write an sql query to find the average time each machine takes to complete a process.
time to complete a process is the 'end' timestamp minus the 'start' timestamp. the average time is calculated by the total time to complete every process on the machine divided by the number of processes that were run.
resulting table should have the machine_id along with the average time as processing_time, which should be rounded to 3 decimal places.
the result table in any order.
query result format is in the following example.
a non-negative integer num to its english words representation.
an integer array nums and an integer k, return the number of good subarrays of nums.
subarray arr is good if it there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j].
subarray is a contiguous non-empty sequence of elements within an array.
are given an integer array nums. a number x is lonely when it appears only once, and no adjacent numbers (i.e. x + 1 and x - 1) appear in the array.
all lonely numbers in nums. you may return the answer in any order.
start at the cell (rstart, cstart) of an rows x cols grid facing east. the northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.
will walk in a clockwise spiral shape to visit every position in this grid. whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). eventually, we reach all rows * cols spaces of the grid.
an array of coordinates representing the positions of the grid in the order you visited them.
are given a 0-indexed integer array nums and an integer k.
are initially standing at index 0. in one move, you can jump at most k steps forward without going outside the boundaries of the array. that is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive.
want to reach the last index of the array (index n - 1). your score is the sum of all nums[j] for each index j you visited in the array.
the maximum score you can get.
are given an integer array, nums, and an integer k. nums comprises of only 0's and 1's. in one move, you can choose two adjacent indices and swap their values.
the minimum number of moves required so that nums has k consecutive 1's.
an m x n matrix, return a new matrix answer where answer[row][col] is the rank of matrix[row][col].
rank is an integer that represents how large an element is compared to other elements. it is calculated using the following rules:
rank is an integer starting from 1.
two elements p and q are in the same row or column, then:
p < q then rank(p) < rank(q)
p == q then rank(p) == rank(q)
p > q then rank(p) > rank(q)
rank should be as small as possible.
test cases are generated so that answer is unique under the given rules.
schema
patients

column name | type |

patient_id | int |
patient_name | varchar |
conditions | varchar |

is the primary key for this table.
contains 0 or more code separated by spaces.
table contains information of the patients in the hospital.
an sql query to report the patient_id, patient_name and conditions of the patients who have type i diabetes. type i diabetes always starts with diab1 prefix.
the result table in any order.
query result format is in the following example.
binary strings are binary strings with the following two properties:
number of 0's is equal to the number of 1's.
prefix of the binary string has at least as many 1's as 0's.
are given a special binary string s.
move consists of choosing two consecutive, non-empty, special substrings of s, and swapping them. two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.
the lexicographically largest resulting string possible after applying the mentioned operations on the string.
a 2d plane, there are n points with integer coordinates points[i] = [xi, yi]. return the minimum time in seconds to visit all the points in the order given by points.
can move according to these rules:
1 second, you can either:
vertically by one unit,
horizontally by one unit, or
diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second).
have to visit the points in the same order as they appear in the array.
are allowed to pass through points that appear later in the order, but these do not count as visits.
schema
employee

column name | type |

id | int |
name | varchar |
department | varchar |
managerid | int |

is the primary key column for this table.
row of this table indicates the name of an employee, their department, and the id of their manager.
managerid is null, then the employee does not have a manager.
employee will be the manager of themself.
an sql query to report the managers with at least five direct reports.
the result table in any order.
query result format is in the following example.
are given a 0-indexed integer array nums of length n.
average difference of the index i is the absolute difference between the average of the first i + 1 elements of nums and the average of the last n - i - 1 elements. both averages should be rounded down to the nearest integer.
the index with the minimum average difference. if there are multiple such indices, return the smallest one.

absolute difference of two numbers is the absolute value of their difference.
average of n elements is the sum of the n elements divided (integer division) by n.
average of 0 elements is considered to be 0.
have a set of integers s, which originally contains all the numbers from 1 to n. unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.
are given an integer array nums representing the data status of this set after the error.
the number that occurs twice and the number that is missing and return them in the form of an array.
are given the head of a linked list, and an integer k.
the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end (the list is 1-indexed).
is a directed weighted graph that consists of n nodes numbered from 0 to n - 1. the edges of the graph are initially represented by the given array edges where edges[i] = [fromi, toi, edgecosti] meaning that there is an edge from fromi to toi with the cost edgecosti.
the graph class:
n, int[][] edges) initializes the object with n nodes and the given edges.
edge) adds an edge to the list of edges where edge = [from, to, edgecost]. it is guaranteed that there is no edge between the two nodes before adding this one.
shortestpath(int node1, int node2) returns the minimum cost of a path from node1 to node2. if no path exists, return -1. the cost of a path is the sum of the costs of the edges in the path.
are given the strings key and message, which represent a cipher key and a secret message, respectively. the steps to decode message are as follows:
the first appearance of all 26 lowercase english letters in key as the order of the substitution table.
the substitution table with the regular english alphabet.
letter in message is then substituted using the table.
' ' are transformed to themselves.
example, given key = "happy boy" (actual key would have at least one instance of each letter in the alphabet), we have the partial substitution table of ('h' -> 'a', 'a' -> 'b', 'p' -> 'c', 'y' -> 'd', 'b' -> 'e', 'o' -> 'f').
the decoded message.
is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1. the edges in the graph are represented by a given 2d integer array edges, where edges[i] = [ui, vi] denotes an edge between vertex ui and vertex vi. every vertex pair is connected by at most one edge, and no vertex has an edge to itself.
the length of the shortest cycle in the graph. if no cycle exists, return -1.
cycle is a path that starts and ends at the same node, and each edge in the path is used only once.
players play a turn based game on a binary tree. we are given the root of this binary tree, and the number of nodes n in the tree. n is odd, and each node has a distinct value from 1 to n.
the first player names a value x with 1 <= x <= n, and the second player names a value y with 1 <= y <= n and y != x. the first player colors the node with value x red, and the second player colors the node with value y blue.
the players take turns starting with the first player. in each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)
(and only if) a player cannot choose such a node in this way, they must pass their turn. if both players pass their turn, the game ends, and the winner is the player that colored more nodes.
are the second player. if it is possible to choose such a y to ensure you win the game, return true. if it is not possible, return false.
distribute some number of candies, to a row of n = num_people people in the following way:
then give 1 candy to the first person, 2 candies to the second person, and so on until we give n candies to the last person.
we go back to the start of the row, giving n + 1 candies to the first person, n + 2 candies to the second person, and so on until we give 2 * n candies to the last person.
process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies. the last person will receive all of our remaining candies (not necessarily one more than the previous gift).
an array (of length num_people and sum candies) that represents the final distribution of candies.
can scramble a string s to get a string t using the following algorithm:
the length of the string is 1, stop.
the length of the string is > 1, do the following:
the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.
decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.
step 1 recursively on each of the two substrings x and y.
two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.
are given a 0-indexed integer array mapping which represents the mapping rule of a shuffled decimal system. mapping[i] = j means digit i should be mapped to digit j in this system.
mapped value of an integer is the new integer obtained by replacing each occurrence of digit i in the integer with mapping[i] for all 0 <= i <= 9.
are also given another integer array nums. return the array nums sorted in non-decreasing order based on the mapped values of its elements.

with the same mapped values should appear in the same relative order as in the input.
elements of nums should only be sorted based on their mapped values and not be replaced by them.
an array of length n sorted in ascending order is rotated between 1 and n times. for example, the array nums = [0,1,4,4,5,6,7] might become:
if it was rotated 4 times.
if it was rotated 7 times.
that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].
the sorted rotated array nums that may contain duplicates, return the minimum element of this array.
must decrease the overall operation steps as much as possible.
strings are those that have an equal quantity of 'l' and 'r' characters.
a balanced string s, split it into some number of substrings such that:
substring is balanced.
the maximum number of balanced strings you can obtain.
an integer array nums, handle multiple queries of the following types:
the value of an element in nums.
the sum of the elements of nums between indices left and right inclusive where left <= right.
the numarray class:
nums) initializes the object with the integer array nums.
update(int index, int val) updates the value of nums[index] to be val.
sumrange(int left, int right) returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
schema
products

column name | type |

product_id | int |
low_fats | enum |
recyclable | enum |

is the primary key for this table.
is an enum of type ('y', 'n') where 'y' means this product is low fat and 'n' means it is not.
is an enum of types ('y', 'n') where 'y' means this product is recyclable and 'n' means it is not.
an sql query to find the ids of products that are both low fat and recyclable.
the result table in any order.
query result format is in the following example.
an array nums. we define a running sum of an array as runningsum[i] = sum(nums[0]â¦nums[i]).
the running sum of nums.
schema
customers

column name | type |

id | int |
name | varchar |

is the primary key column for this table.
row of this table indicates the id and name of a customer.
orders

column name | type |

id | int |
customerid | int |

is the primary key column for this table.
is a foreign key of the id from the customers table.
row of this table indicates the id of an order and the id of the customer who ordered it.
an sql query to report all customers who never order anything.
the result table in any order.
query result format is in the following example.
a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.
the minimum number of patches required.
an integer n, return any array containing n unique integers such that they add up to 0.
the api rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. you can only call the api rand7(), and you shouldn't call any other api. please do not use a language's built-in random api.
test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. note that this is not an argument passed to rand10().
a text editor with a cursor that can do the following:
text to where the cursor is.
text from where the cursor is (simulating the backspace key).
the cursor either left or right.
deleting text, only characters to the left of the cursor will be deleted. the cursor will also remain within the actual text and cannot be moved beyond it. more formally, we have that 0 <= cursor.position <= currenttext.length always holds.
the texteditor class:
initializes the object with empty text.
addtext(string text) appends text to where the cursor is. the cursor ends to the right of text.
deletetext(int k) deletes k characters to the left of the cursor. returns the number of characters actually deleted.
cursorleft(int k) moves the cursor to the left k times. returns the last min(10, len) characters to the left of the cursor, where len is the number of characters to the left of the cursor.
cursorright(int k) moves the cursor to the right k times. returns the last min(10, len) characters to the left of the cursor, where len is the number of characters to the left of the cursor.
a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.
the smallest set of vertices from which all nodes in the graph are reachable. it's guaranteed that a unique solution exists.
that you can return the vertices in any order.
are playing the guessing game. the game will work as follows:
pick a number between 1 and n.
guess a number.
you guess the right number, you win the game.
you guess the wrong number, then i will tell you whether the number i picked is higher or lower, and you will continue guessing.
time you guess a wrong number x, you will pay x dollars. if you run out of money, you lose the game.
a particular n, return the minimum amount of money you need to guarantee a win regardless of what number i pick.
a stack that supports push, pop, top, and retrieving the minimum element in constant time.
the minstack class:
initializes the stack object.
push(int val) pushes the element val onto the stack.
pop() removes the element on the top of the stack.
top() gets the top element of the stack.
getmin() retrieves the minimum element in the stack.
must implement a solution with o(1) time complexity for each function.
are given a string word that consists of digits and lowercase english letters.
will replace every non-digit character with a space. for example, "a123bc34d8ef34" will become " 123 34 8 34". notice that you are left with some integers that are separated by at least one space: "123", "34", "8", and "34".
the number of different integers after performing the replacement operations on word.
integers are considered different if their decimal representations without any leading zeros are different.
are given a sorted array nums of n non-negative integers and an integer maximumbit. you want to perform the following query n times:
a non-negative integer k < 2maximumbit such that nums[0] xor nums[1] xor ... xor nums[nums.length-1] xor k is maximized. k is the answer to the ith query.
the last element from the current array nums.
an array answer, where answer[i] is the answer to the ith query.
a string s, return the number of distinct non-empty subsequences of s. since the answer may be very large, return it modulo 109 + 7.
subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not.
string s can be partitioned into groups of size k using the following procedure:
first group consists of the first k characters of the string, the second group consists of the next k characters of the string, and so on. each character can be a part of exactly one group.
the last group, if the string does not have k characters remaining, a character fill is used to complete the group.
that the partition is done so that after removing the fill character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be s.
the string s, the size of each group k and the character fill, return a string array denoting the composition of every group s has been divided into, using the above procedure.
matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. for example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].
an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.
are given a 0-indexed integer array nums. you have to partition the array into one or more contiguous subarrays.
call a partition of the array valid if each of the obtained subarrays satisfies one of the following conditions:
subarray consists of exactly 2 equal elements. for example, the subarray [2,2] is good.
subarray consists of exactly 3 equal elements. for example, the subarray [4,4,4] is good.
subarray consists of exactly 3 consecutive increasing elements, that is, the difference between adjacent elements is 1. for example, the subarray [3,4,5] is good, but the subarray [1,3,5] is not.
true if the array has at least one valid partition. otherwise, return false.
are given an integer array target and an integer n.
have an empty stack with the two following operations:
pushes an integer to the top of the stack.
removes the integer on the top of the stack.
also have a stream of the integers in the range [1, n].
the two stack operations to make the numbers in the stack (from the bottom to the top) equal to target. you should follow the following rules:
the stream of the integers is not empty, pick the next integer from the stream and push it to the top of the stack.
the stack is not empty, pop the integer at the top of the stack.
at any moment, the elements in the stack (from the bottom to the top) are equal to target, do not read new integers from the stream and do not do more operations on the stack.
the stack operations needed to build target following the mentioned rules. if there are multiple valid answers, return any of them.
are given an integer array matches where matches[i] = [winneri, loseri] indicates that the player winneri defeated player loseri in a match.
a list answer of size 2 where:
is a list of all players that have not lost any matches.
is a list of all players that have lost exactly one match.
values in the two lists should be returned in increasing order.

should only consider the players that have played at least one match.
testcases will be generated such that no two matches will have the same outcome.
a parking system for a parking lot. the parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.
the parkingsystem class:
big, int medium, int small) initializes object of the parkingsystem class. the number of slots for each parking space are given as part of the constructor.
addcar(int cartype) checks whether there is a parking space of cartype for the car that wants to get into the parking lot. cartype can be of three kinds: big, medium, or small, which are represented by 1, 2, and 3 respectively. a car can only park in a parking space of its cartype. if there is no space available, return false, else park the car in that size space and return true.
and bob play a game with piles of stones. there are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].
objective of the game is to end with the most stones. the total number of stones across all the piles is odd, so there are no ties.
and bob take turns, with alice starting first. each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. this continues until there are no more piles left, at which point the person with the most stones wins.
alice and bob play optimally, return true if alice wins the game, or false if bob wins.
a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
input string is valid if:
brackets must be closed by the same type of brackets.
brackets must be closed in the correct order.
close bracket has a corresponding open bracket of the same type.
an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.
flip an image horizontally means that each row of the image is reversed.
example, flipping [1,1,0] horizontally results in [0,1,1].
invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.
example, inverting [0,1,1] results in [1,0,0].
are given an integer array nums and an integer x. in one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. note that this modifies the array for future operations.
the minimum number of operations to reduce x to exactly 0 if it is possible, otherwise, return -1.
two numbers arr1 and arr2 in base -2, return the result of adding them together.
number is given in array format: as an array of 0s and 1s, from most significant bit to least significant bit. for example, arr = [1,1,0,1] represents the number (-2)^3 + (-2)^2 + (-2)^0 = -3. a number arr in array, format is also guaranteed to have no leading zeros: either arr == [0] or arr[0] == 1.
the result of adding arr1 and arr2 in the same format: as an array of 0s and 1s with no leading zeros.
sentence is a list of words that are separated by a single space with no leading or trailing spaces. for example, "hello world", "hello", "hello world hello world" are all sentences. words consist of only uppercase and lowercase english letters.
sentences sentence1 and sentence2 are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. for example, sentence1 = "hello my name is jane" and sentence2 = "hello jane" can be made equal by inserting "my name is" between "hello" and "jane" in sentence2.
two sentences sentence1 and sentence2, return true if sentence1 and sentence2 are similar. otherwise, return false.
an array of positive integers nums, return an array answer that consists of the digits of each integer in nums after separating them in the same order they appear in nums.
separate the digits of an integer is to get all the digits it has in the same order.
example, for the integer 10921, the separation of its digits is [1,0,9,2,1].
an integer array nums, return the number of and triples.
and triple is a triple of indices (i, j, k) such that:
<= i < nums.length
<= j < nums.length
<= k < nums.length
& nums[j] & nums[k] == 0, where & represents the bitwise-and operator.
an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference.
subsequence is a sequence that can be derived from arr by deleting some or no elements without changing the order of the remaining elements.
we have a class:
class foo {
void first() { print("first"); }
void second() { print("second"); }
void third() { print("third"); }

same instance of foo will be passed to three different threads. thread a will call first(), thread b will call second(), and thread c will call third(). design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().

do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. the input format you see is mainly to ensure our tests' comprehensiveness.
are given an n x n integer matrix grid.
an integer matrix maxlocal of size (n - 2) x (n - 2) such that:
is equal to the largest value of the 3 x 3 matrix in grid centered around row i + 1 and column j + 1.
other words, we want to find the largest value in every contiguous 3 x 3 matrix in grid.
the generated matrix.
storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.
game is represented by an m x n grid of characters grid where each element is a wall, floor, or box.
task is to move the box 'b' to the target position 't' under the following rules:
character 's' represents the player. the player can move up, down, left, right in grid if it is a floor (empty cell).
character '.' represents the floor which means a free cell to walk.
character '#' represents the wall which means an obstacle (impossible to walk there).
is only one box 'b' and one target cell 't' in the grid.
box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. this is a push.
player cannot walk through the box.
the minimum number of pushes to move the box to the target. if there is no way to reach the target, return -1.
are given a string s of length n, and an integer k. you are tasked to find the longest subsequence repeated k times in string s.
subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
subsequence seq is repeated k times in the string s if seq * k is a subsequence of s, where seq * k represents a string constructed by concatenating seq k times.
example, "bba" is repeated 2 times in the string "bababcba", because the string "bbabba", constructed by concatenating "bba" 2 times, is a subsequence of the string "bababcba".
the longest subsequence repeated k times in string s. if multiple such subsequences are found, return the lexicographically largest one. if there is no such subsequence, return an empty string.
are a hiker preparing for an upcoming hike. you are given heights, a 2d array of size rows x columns, where heights[row][col] represents the height of cell (row, col). you are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). you can move up, down, left, or right, and you wish to find a route that requires the minimum effort.
route's effort is the maximum absolute difference in heights between two consecutive cells of the route.
the minimum effort required to travel from the top-left cell to the bottom-right cell.
are given a positive integer n representing the number of nodes of a directed acyclic graph (dag). the nodes are numbered from 0 to n - 1 (inclusive).
are also given a 2d integer array edges, where edges[i] = [fromi, toi] denotes that there is a unidirectional edge from fromi to toi in the graph.
a list answer, where answer[i] is the list of ancestors of the ith node, sorted in ascending order.
node u is an ancestor of another node v if u can reach v via a set of edges.
3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.
a row x col grid of integers, how many 3 x 3 "magic square" subgrids are there? (each subgrid is contiguous).
sentence is a list of tokens separated by a single space with no leading or trailing spaces. every token is either a positive number consisting of digits 0-9 with no leading zeros, or a word consisting of lowercase english letters.
example, "a puppy has 2 eyes 4 legs" is a sentence with seven tokens: "2" and "4" are numbers and the other tokens such as "puppy" are words.
a string s representing a sentence, you need to check if all the numbers in s are strictly increasing from left to right (i.e., other than the last number, each number is strictly smaller than the number on its right in s).
true if so, or false otherwise.
is a car with capacity empty seats. the vehicle only drives east (i.e., it cannot turn around and drive west).
are given the integer capacity and an array trips where trips[i] = [numpassengersi, fromi, toi] indicates that the ith trip has numpassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. the locations are given as the number of kilometers due east from the car's initial location.
true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.
have a long flowerbed in which some of the plots are planted, and some are not. however, flowers cannot be planted in adjacent plots.
an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return true if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule and false otherwise.
farmer has a rectangular grid of land with m rows and n columns that can be divided into unit cells. each cell is either fertile (represented by a 1) or barren (represented by a 0). all cells outside the grid are considered barren.
pyramidal plot of land can be defined as a set of cells with the following criteria:
number of cells in the set has to be greater than 1 and all cells must be fertile.
apex of a pyramid is the topmost cell of the pyramid. the height of a pyramid is the number of rows it covers. let (r, c) be the apex of the pyramid, and its height be h. then, the plot comprises of cells (i, j) where r <= i <= r + h - 1 and c - (i - r) <= j <= c + (i - r).
inverse pyramidal plot of land can be defined as a set of cells with similar criteria:
number of cells in the set has to be greater than 1 and all cells must be fertile.
apex of an inverse pyramid is the bottommost cell of the inverse pyramid. the height of an inverse pyramid is the number of rows it covers. let (r, c) be the apex of the pyramid, and its height be h. then, the plot comprises of cells (i, j) where r - h + 1 <= i <= r and c - (r - i) <= j <= c + (r - i).
examples of valid and invalid pyramidal (and inverse pyramidal) plots are shown below. black cells indicate fertile cells.
a 0-indexed m x n binary matrix grid representing the farmland, return the total number of pyramidal and inverse pyramidal plots that can be found in grid.
a date, return the corresponding day of the week for that date.
input is given as three integers representing the day, month and year respectively.
the answer as one of the following values {"sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"}.
transformation sequence from word beginword to word endword using a dictionary wordlist is a sequence of words beginword -> s1 -> s2 -> ... -> sk such that:
adjacent pair of words differs by a single letter.
si for 1 <= i <= k is in wordlist. note that beginword does not need to be in wordlist.
== endword
two words, beginword and endword, and a dictionary wordlist, return all the shortest transformation sequences from beginword to endword, or an empty list if no such sequence exists. each sequence should be returned as a list of the words [beginword, s1, s2, ..., sk].
the world of dota2, there are two parties: the radiant and the dire.
dota2 senate consists of senators coming from two parties. now the senate wants to decide on a change in the dota2 game. the voting for this change is a round-based procedure. in each round, each senator can exercise one of the two rights:
one senator's right: a senator can make another senator lose all his rights in this and all the following rounds.
the victory: if this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.
a string senate representing each senator's party belonging. the character 'r' and 'd' represent the radiant party and the dire party. then if there are n senators, the size of the given string will be n.
round-based procedure starts from the first senator to the last senator in the given order. this procedure will last until the end of voting. all the senators who have lost their rights will be skipped during the procedure.
every senator is smart enough and will play the best strategy for his own party. predict which party will finally announce the victory and change the dota2 game. the output should be "radiant" or "dire".
are given an integer n, which indicates that there are n courses labeled from 1 to n. you are also given an array relations where relations[i] = [prevcoursei, nextcoursei], representing a prerequisite relationship between course prevcoursei and course nextcoursei: course prevcoursei has to be taken before course nextcoursei. also, you are given the integer k.
one semester, you can take at most k courses as long as you have taken all the prerequisites in the previous semesters for the courses you are taking.
the minimum number of semesters needed to take all courses. the testcases will be generated such that it is possible to take every course.
an integer array nums that does not contain any zeros, find the largest positive integer k such that -k also exists in the array.
the positive integer k. if there is no such integer, return -1.
a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.
are given the root of a full binary tree with the following properties:
nodes have either the value 0 or 1, where 0 represents false and 1 represents true.
nodes have either the value 2 or 3, where 2 represents the boolean or and 3 represents the boolean and.
evaluation of a node is as follows:
the node is a leaf node, the evaluation is the value of the node, i.e. true or false.
evaluate the node's two children and apply the boolean operation of its value with the children's evaluations.
the boolean result of evaluating the root node.
full binary tree is a binary tree where each node has either 0 or 2 children.
leaf node is a node that has zero children.
the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).
way to serialize a binary tree is to use preorder traversal. when we encounter a non-null node, we record the node's value. if it is a null node, we record using a sentinel value such as '#'.
example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where '#' represents a null node.
a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.
is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.
may assume that the input format is always valid.
example, it could never contain two consecutive commas, such as "1,,3".
you are not allowed to reconstruct the tree.
the radius and the position of the center of a circle, implement the function randpoint which generates a uniform random point inside the circle.
the solution class:
radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center).
returns a random point inside the circle. a point on the circumference of the circle is considered to be in the circle. the answer is returned as an array [x, y].
are given two 0-indexed arrays nums and cost consisting each of n positive integers.
can do the following operation any number of times:
or decrease any element of the array nums by 1.
cost of doing one operation on the ith element is cost[i].
the minimum total cost such that all the elements of the array nums become equal.
wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. the first difference (if one exists) may be either positive or negative. a sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.
example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.
contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. the first is not because its first two differences are positive, and the second is not because its last difference is zero.
subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.
an integer array nums, return the length of the longest wiggle subsequence of nums.
wonderful string is a string where at most one letter appears an odd number of times.
example, "ccjjc" and "abab" are wonderful, but "ab" is not.
a string word that consists of the first ten lowercase english letters ('a' through 'j'), return the number of wonderful non-empty substrings in word. if the same substring appears multiple times in word, then count each occurrence separately.
substring is a contiguous sequence of characters in a string.
two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.
have the following three operations permitted on a word:
a character
a character
a character
integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y.
an integer n, return the largest number that is less than or equal to n with monotone increasing digits.
and bob are traveling to rome for separate business meetings.
are given 4 strings arrivealice, leavealice, arrivebob, and leavebob. alice will be in the city from the dates arrivealice to leavealice (inclusive), while bob will be in the city from the dates arrivebob to leavebob (inclusive). each will be a 5-character string in the format "mm-dd", corresponding to the month and day of the date.
the total number of days that alice and bob are in rome together.
can assume that all dates occur in the same calendar year, which is not a leap year. note that the number of days per month can be represented as: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31].
permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:
== 'i' if perm[i] < perm[i + 1], and
== 'd' if perm[i] > perm[i + 1].
a string s, reconstruct the permutation perm and return it. if there are multiple valid permutations perm, return any of them.
an integer n, return the number of positive integers in the range [1, n] that have at least one repeated digit.
are given a 0-indexed array of positive integers nums. find the number of triplets (i, j, k) that meet the following conditions:
<= i < j < k < nums.length
nums[j], and nums[k] are pairwise distinct.
other words, nums[i] != nums[j], nums[i] != nums[k], and nums[j] != nums[k].
the number of triplets that meet the conditions.
are given two integer arrays of the same length nums1 and nums2. in one operation, you are allowed to swap nums1[i] with nums2[i].
example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8].
the minimum number of needed operations to make nums1 and nums2 strictly increasing. the test cases are generated so that the given input always makes it possible.
array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].
are given an even integer n. you initially have a permutation perm of size n where perm[i] == i (0-indexed).
one operation, you will create a new array arr, and for each i:
i % 2 == 0, then arr[i] = perm[i / 2].
i % 2 == 1, then arr[i] = perm[n / 2 + (i - 1) / 2].
will then assign arr to perm.
the minimum non-zero number of operations you need to perform on perm to return the permutation to its initial value.
two integer arrays nums1 and nums2, return an array of their intersection. each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.
two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where:
is a list of all distinct integers in nums1 which are not present in nums2.
is a list of all distinct integers in nums2 which are not present in nums1.
that the integers in the lists may be returned in any order.
an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.
have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. in each garden, you want to plant one of 4 types of flowers.
gardens have at most 3 paths coming into or leaving it.
task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.
any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden. the flower types are denoted 1, 2, 3, or 4. it is guaranteed an answer exists.
an integer array nums, return the maximum difference between two successive elements in its sorted form. if the array contains less than two elements, return 0.
must write an algorithm that runs in linear time and uses linear extra space.
are given a 0-indexed integer array nums of length n. the number of ways to partition nums is the number of pivot indices that satisfy both conditions:
<= pivot < n
+ nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1]
are also given an integer k. you can choose to change the value of one element of nums to k, or to leave the array unchanged.
the maximum possible number of ways to partition nums to satisfy both conditions after changing at most one element.
are given an array of integers nums (0-indexed) and an integer k.
score of a subarray (i, j) is defined as min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). a good subarray is a subarray where i <= k <= j.
the maximum possible score of a good subarray.
an integer n, return the number of trailing zeroes in n!.
that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.
an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. if no such indices exists, return false.
are given an array of strings words and a string pref.
the number of strings in words that contain pref as a prefix.
prefix of a string s is any leading contiguous substring of s.
a string s consisting of only the characters 'a' and 'b', return true if every 'a' appears before every 'b' in the string. otherwise, return false.
an integer array nums and an integer k, return the number of good subarrays of nums.
good array is an array where the number of different integers in that array is exactly k.
example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
subarray is a contiguous part of an array.
social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. these periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).
example, the period [10, 10000] (in seconds) would be partitioned into the following time chunks with these frequencies:
minute (60-second chunks): [10,69], [70,129], [130,189], ..., [9970,10000]
hour (3600-second chunks): [10,3609], [3610,7209], [7210,10000]
day (86400-second chunks): [10,10000]
that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (10000 in the above example).
and implement an api to help the company with their analysis.
the tweetcounts class:
initializes the tweetcounts object.
recordtweet(string tweetname, int time) stores the tweetname at the recorded time (in seconds).
gettweetcountsperfrequency(string freq, string tweetname, int starttime, int endtime) returns a list of integers representing the number of tweets with tweetname in each time chunk for the given period of time [starttime, endtime] (in seconds) and frequency freq.
is one of "minute", "hour", or "day" representing a frequency of every minute, hour, or day respectively.









tweetcounts = new tweetcounts();
0); // new tweet "tweet3" at time 0
60); // new tweet "tweet3" at time 60
10); // new tweet "tweet3" at time 10
"tweet3", 0, 59); // return [2]; chunk [0,59] had 2 tweets
"tweet3", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet
120); // new tweet "tweet3" at time 120
"tweet3", 0, 210); // return [4]; chunk [0,210] had 4 tweets

<= time, starttime, endtime <= 109
<= endtime - starttime <= 104
will be at most 104 calls in total to recordtweet and gettweetcountsperfrequency.
an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.
lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.
are numbottles water bottles that are initially full of water. you can exchange numexchange empty water bottles from the market with one full water bottle.
operation of drinking a full water bottle turns it into an empty bottle.
the two integers numbottles and numexchange, return the maximum number of water bottles you can drink.
an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings words.
example, if words = ["abc", "xyz"] and the stream added the four characters (one by one) 'a', 'x', 'y', and 'z', your algorithm should detect that the suffix "xyz" of the characters "axyz" matches "xyz" from words.
the streamchecker class:
words) initializes the object with the strings array words.
query(char letter) accepts a new character from the stream and returns true if any non-empty suffix from the stream forms a word that is in words.
two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. if it is impossible for b to be a substring of a after repeating it, return -1.
string "abc" repeated 0 times is "", repeated 1 time is "abc" and repeated 2 times is "abcabc".
are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k.
the maximum profit you can achieve. you may complete at most k transactions: i.e. you may buy at most k times and sell at most k times.
you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
the head of a singly linked list, reverse the list, and return the reversed list.
ugly number is a positive integer that is divisible by a, b, or c.
four integers n, a, b, and c, return the nth ugly number.
a binary tree with the following rules:
== 0
treenode.val == x and treenode.left != null, then treenode.left.val == 2 * x + 1
treenode.val == x and treenode.right != null, then treenode.right.val == 2 * x + 2
the binary tree is contaminated, which means all treenode.val have been changed to -1.
the findelements class:
root) initializes the object with a contaminated binary tree and recovers it.
find(int target) returns true if the target value exists in the recovered binary tree.
schema
stocks

column name | type |

stock_name | varchar |
operation | enum |
operation_day | int |
price | int |

operation_day) is the primary key for this table.
operation column is an enum of type ('sell', 'buy')
row of this table indicates that the stock which has stock_name had an operation on the day operation_day with the price.
is guaranteed that each 'sell' operation for a stock has a corresponding 'buy' operation in a previous day. it is also guaranteed that each 'buy' operation for a stock has a corresponding 'sell' operation in an upcoming day.
an sql query to report the capital gain/loss for each stock.
capital gain/loss of a stock is the total gain or loss after buying and selling the stock one or many times.
the result table in any order.
query result format is in the following example.
cinema has n rows of seats, numbered from 1 to n and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above.
the array reservedseats containing the numbers of seats already reserved, for example, reservedseats[i] = [3,8] means the seat located in row 3 and labelled with 8 is already reserved.
the maximum number of four-person groups you can assign on the cinema seats. a four-person group occupies four adjacent seats in one single row. seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.
an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. a move consists of choosing 0 and a 4-directionally adjacent number and swapping it.
state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].
the puzzle board board, return the least number of moves required so that the state of the board is solved. if it is impossible for the state of the board to be solved, return -1.
a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. if there is more than one possible result, return the longest word with the smallest lexicographical order. if there is no possible result, return the empty string.
code that enhances all arrays such that you can call the snail(rowscount, colscount) method that transforms the 1d array into a 2d array organised in the pattern known as snail traversal order. invalid input values should output an empty array. if rowscount * colscount !== nums.length, the input is considered invalid.
traversal order starts at the top left cell with the first value of the current array. it then moves through the entire first column from top to bottom, followed by moving to the next column on the right and traversing it from bottom to top. this pattern continues, alternating the direction of traversal with each column, until the entire current array is covered. for example, when given the input array [19, 10, 3, 7, 9, 8, 5, 2, 1, 17, 16, 14, 12, 18, 6, 13, 11, 20, 4, 15] with rowscount = 5 and colscount = 4, the desired output matrix is shown below. note that iterating the matrix following the arrows corresponds to the order of numbers in the original array.
1:

= [19, 10, 3, 7, 9, 8, 5, 2, 1, 17, 16, 14, 12, 18, 6, 13, 11, 20, 4, 15]
= 5
= 4








2:

= [1,2,3,4]
= 1
= 4
[[1, 2, 3, 4]]
3:

= [1,3]
= 2
= 2
[]
2 multiplied by 2 is 4, and the original array [1,3] has a length of 2; therefore, the input is invalid.

<= nums.length <= 250
<= nums[i] <= 1000
<= rowscount <= 250
<= colscount <= 250

binary tree is uni-valued if every node in the tree has the same value.
the root of a binary tree, return true if the given tree is uni-valued, or false otherwise.
is an undirected tree with n nodes labeled from 0 to n - 1.
are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. you are also given a 2d integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.
are allowed to delete some edges, splitting the tree into multiple connected components. let the value of a component be the sum of all nums[i] for which node i is in the component.
the maximum number of edges you can delete, such that every connected component in the tree has the same value.
an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. if it is impossible to form any triangle of a non-zero area, return 0.
an array of strings words (without duplicates), return all the concatenated words in the given list of words.
concatenated word is defined as a string that is comprised entirely of at least two shorter words (not necesssarily distinct) in the given array.
leetcode store, there are n items to sell. each item has a price. however, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.
are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy.
are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.e., the last integer in the array) is the price of the ith offer.
the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. you are not allowed to buy more items than you want, even if that would lower the overall price. you could use any of the special offers as many times as you want.
have n buildings numbered from 0 to n - 1. each building has a number of employees. it's transfer season, and some employees want to change the building they reside in.
are given an array requests where requests[i] = [fromi, toi] represents an employee's request to transfer from building fromi to building toi.
buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. this means the number of employees leaving is equal to the number of employees moving in. for example if n = 3 and two employees are leaving building 0, one is leaving building 1, and one is leaving building 2, there should be two employees moving to building 0, one employee moving to building 1, and one employee moving to building 2.
the maximum number of achievable requests.
self-dividing number is a number that is divisible by every digit it contains.
example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.
self-dividing number is not allowed to contain the digit zero.
two integers left and right, return a list of all the self-dividing numbers in the range [left, right].
are given an array of distinct integers arr and an array of integer arrays pieces, where the integers in pieces are distinct. your goal is to form arr by concatenating the arrays in pieces in any order. however, you are not allowed to reorder the integers in each array pieces[i].
true if it is possible to form the array arr from pieces. otherwise, return false.
newly designed keypad was tested, where a tester pressed a sequence of n keys, one at a time.
are given a string keyspressed of length n, where keyspressed[i] was the ith key pressed in the testing sequence, and a sorted list releasetimes, where releasetimes[i] was the time the ith key was released. both arrays are 0-indexed. the 0th key was pressed at the time 0, and every subsequent key was pressed at the exact time the previous key was released.
tester wants to know the key of the keypress that had the longest duration. the ith keypress had a duration of releasetimes[i] - releasetimes[i - 1], and the 0th keypress had a duration of releasetimes[0].
that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration.
the key of the keypress that had the longest duration. if there are multiple such keypresses, return the lexicographically largest key of the keypresses.
two integer arrays starttime and endtime and given an integer querytime.
ith student started doing their homework at the time starttime[i] and finished it at time endtime[i].
the number of students doing their homework at time querytime. more formally, return the number of students where querytime lays in the interval [starttime[i], endtime[i]] inclusive.
substring is a contiguous (non-empty) sequence of characters within a string.
vowel substring is a substring that only consists of vowels ('a', 'e', 'i', 'o', and 'u') and has all five vowels present in it.
a string word, return the number of vowel substrings in word.
the root of a binary search tree (bst), convert it to a greater tree such that every key of the original bst is changed to the original key plus the sum of all keys greater than the original key in bst.
a reminder, a binary search tree is a tree that satisfies these constraints:
left subtree of a node contains only nodes with keys less than the node's key.
right subtree of a node contains only nodes with keys greater than the node's key.
the left and right subtrees must also be binary search trees.
are playing a simplified pac-man game on an infinite 2-d grid. you start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget] that you are trying to get to. there are several ghosts on the map with their starting positions given as a 2d array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost. all inputs are integral coordinates.
turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west, or stay still. all actions happen simultaneously.
escape if and only if you can reach the target before any ghost reaches you. if you reach any square (including the target) at the same time as a ghost, it does not count as an escape.
true if it is possible to escape regardless of how the ghosts move, otherwise return false.
two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.
a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. return the answer in any order.
mapping of digits to letters (just like on the telephone buttons) is given below. note that 1 does not map to any letters.
an integer array nums and an integer k, return the k most frequent elements. you may return the answer in any order.
are given a string s of lowercase english letters and an integer array shifts of the same length.
the shift() of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a').
example, shift('a') = 'b', shift('t') = 'u', and shift('z') = 'a'.
for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times.
the final string after all such shifts to s are applied.
are given two integers, m and k, and a stream of integers. you are tasked to implement a data structure that calculates the mkaverage for the stream.
mkaverage can be calculated using these steps:
the number of the elements in the stream is less than m you should consider the mkaverage to be -1. otherwise, copy the last m elements of the stream to a separate container.
the smallest k elements and the largest k elements from the container.
the average value for the rest of the elements rounded down to the nearest integer.
the mkaverage class:
m, int k) initializes the mkaverage object with an empty stream and the two integers m and k.
addelement(int num) inserts a new element num into the stream.
calculatemkaverage() calculates and returns the mkaverage for the current stream rounded down to the nearest integer.
a 2d integer array nums, return all elements of nums in diagonal order as shown in the below images.
the head of a sorted linked list, delete all duplicates such that each element appears only once. return the linked list sorted as well.
an unsorted array of integers nums, return the length of the longest consecutive elements sequence.
must write an algorithm that runs in o(n) time.
are given a 0-indexed m x n integer matrix grid. the width of a column is the maximum length of its integers.
example, if grid = [[-10], [3], [12]], the width of the only column is 3 since -10 is of length 3.
an integer array ans of size n where ans[i] is the width of the ith column.
length of an integer x with len digits is equal to len if x is non-negative, and len + 1 otherwise.
a data stream input of non-negative integers a1, a2, ..., an, summarize the numbers seen so far as a list of disjoint intervals.
the summaryranges class:
initializes the object with an empty stream.
addnum(int value) adds the integer value to the stream.
getintervals() returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi]. the answer should be sorted by starti.
is a network of n servers, labeled from 0 to n - 1. you are given a 2d integer array edges, where edges[i] = [ui, vi] indicates there is a message channel between servers ui and vi, and they can pass any number of messages to each other directly in one second. you are also given a 0-indexed integer array patience of length n.
servers are connected, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels.
server labeled 0 is the master server. the rest are data servers. each data server needs to send its message to the master server for processing and wait for a reply. messages move between servers optimally, so every message takes the least amount of time to arrive at the master server. the master server will process all newly arrived messages instantly and send a reply to the originating server via the reversed path the message had gone through.
the beginning of second 0, each data server sends its message to be processed. starting from second 1, at the beginning of every second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server:
it has not, it will resend the message periodically. the data server i will resend the message every patience[i] second(s), i.e., the data server i will resend the message if patience[i] second(s) have elapsed since the last time the message was sent from this server.
no more resending will occur from this server.
network becomes idle when there are no messages passing between servers or arriving at servers.
the earliest second starting from which the network becomes idle.
are given the head of a linked list containing unique integer values and an integer array nums that is a subset of the linked list values.
the number of connected components in nums where two values are connected if they appear consecutively in the linked list.
are given an integer n representing the length of an unknown array that you are trying to recover. you are also given an array sums containing the values of all 2n subset sums of the unknown array (in no particular order).
the array ans of length n representing the unknown array. if multiple answers exist, return any of them.
array sub is a subset of an array arr if sub can be obtained from arr by deleting some (possibly zero or all) elements of arr. the sum of the elements in sub is one possible subset sum of arr. the sum of an empty array is considered to be 0.
test cases are generated such that there will always be at least one correct answer.
are given an integer array height of length n. there are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
two lines that together with the x-axis form a container, such that the container contains the most water.
the maximum amount of water a container can store.
that you may not slant the container.
virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.
world is modeled as an m x n binary grid isinfected, where isinfected[i][j] == 0 represents uninfected cells, and isinfected[i][j] == 1 represents cells contaminated with the virus. a wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.
night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. resources are limited. each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). there will never be a tie.
the number of walls used to quarantine all the infected regions. if the world will become fully infected, return the number of walls used.
a signed 32-bit integer x, return x with its digits reversed. if reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.
the environment does not allow you to store 64-bit integers (signed or unsigned).
a string word, return the sum of the number of vowels ('a', 'e', 'i', 'o', and 'u') in every substring of word.
substring is a contiguous (non-empty) sequence of characters within a string.
due to the large constraints, the answer may not fit in a signed 32-bit integer. please be careful during the calculations.
are given a 0-indexed string word of length n consisting of digits, and a positive integer m.
divisibility array div of word is an integer array of length n such that:
= 1 if the numeric value of word[0,...,i] is divisible by m, or
= 0 otherwise.
the divisibility array of word.
the root of a binary tree, return the preorder traversal of its nodes' values.
strings, x and y, are considered similar if either they are identical or we can make them equivalent by swapping at most two letters (in distinct positions) within the string x.
example, "tars" and "rats" are similar (swapping at positions 0 and 2), and "rats" and "arts" are similar, but "star" is not similar to "tars", "rats", or "arts".
these form two connected groups by similarity: {"tars", "rats", "arts"} and {"star"}. notice that "tars" and "arts" are in the same group even though they are not similar. formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.
are given a list strs of strings where every string in strs is an anagram of every other string in strs. how many groups are there?
are given a 2d integer array orders, where each orders[i] = [pricei, amounti, ordertypei] denotes that amounti orders have been placed of type ordertypei at the price pricei. the ordertypei is:
if it is a batch of buy orders, or
if it is a batch of sell orders.
that orders[i] represents a batch of amounti independent orders with the same price and order type. all orders represented by orders[i] will be placed before all orders represented by orders[i+1] for all valid i.
is a backlog that consists of orders that have not been executed. the backlog is initially empty. when an order is placed, the following happens:
the order is a buy order, you look at the sell order with the smallest price in the backlog. if that sell order's price is smaller than or equal to the current buy order's price, they will match and be executed, and that sell order will be removed from the backlog. else, the buy order is added to the backlog.
versa, if the order is a sell order, you look at the buy order with the largest price in the backlog. if that buy order's price is larger than or equal to the current sell order's price, they will match and be executed, and that buy order will be removed from the backlog. else, the sell order is added to the backlog.
the total amount of orders in the backlog after placing all the orders from the input. since this number can be large, return it modulo 109 + 7.
schema
activity

column name | type |

player_id | int |
device_id | int |
event_date | date |
games_played | int |

event_date) is the primary key of this table.
table shows the activity of players of some games.
row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.
an sql query to report the first login date for each player.
the result table in any order.
query result format is in the following example.
integer has sequential digits if and only if each digit in the number is one more than the previous digit.
a sorted list of all the integers in the range [low, high] inclusive that have sequential digits.
an n x n chessboard, a knight starts at the cell (row, column) and attempts to make exactly k moves. the rows and columns are 0-indexed, so the top-left cell is (0, 0), and the bottom-right cell is (n - 1, n - 1).
chess knight has eight possible moves it can make, as illustrated below. each move is two cells in a cardinal direction, then one cell in an orthogonal direction.
time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.
knight continues moving until it has made exactly k moves or has moved off the chessboard.
the probability that the knight remains on the board after it has stopped moving.
a binary string s and an integer k, return true if every binary code of length k is a substring of s. otherwise, return false.
are given the root of a binary tree with unique values.
one operation, you can choose any two nodes at the same level and swap their values.
the minimum number of operations needed to make the values at each level sorted in a strictly increasing order.
level of a node is the number of edges along the path between it and the root node.
are given a string s (0-indexed). you are asked to perform the following operation on s until you get a sorted string:
the largest index i such that 1 <= i < s.length and s[i] < s[i - 1].
the largest index j such that i <= j < s.length and s[k] < s[i - 1] for all the possible values of k in the range [i, j] inclusive.
the two characters at indices i - 1 and j.
the suffix starting at index i.
the number of operations needed to make the string sorted. since the answer can be too large, return it modulo 109 + 7.
schema
tree

column name | type |

id | int |
p_id | int |

is the primary key column for this table.
row of this table contains information about the id of a node and the id of its parent node in a tree.
given structure is always a valid tree.
node in the tree can be one of three types:
if the node is a leaf node.
if the node is the root of the tree.
if the node is neither a leaf node nor a root node.
an sql query to report the type of each node in the tree.
the result table in any order.
query result format is in the following example.
an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j].
two integers n and k, return the number of different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs. since the answer can be huge, return it modulo 109 + 7.
a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. you may return the answer in any order.
group of duplicate files consists of at least two files that have the same content.
single directory info string in the input list has the following format:
f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)"
means there are n files (f1.txt, f2.txt ... fn.txt) with content (f1_content, f2_content ... fn_content) respectively in the directory "root/d1/d2/.../dm". note that n >= 1 and m >= 0. if m = 0, it means the directory is just the root directory.
output is a list of groups of duplicate file paths. for each group, it contains all the file paths of the files that have the same content. a file path is a string that has the following format:

are given a string s that contains digits 0-9, addition symbols '+', and multiplication symbols '*' only, representing a valid math expression of single digit numbers (e.g., 3+5*2). this expression was given to n elementary school students. the students were instructed to get the answer of the expression by following this order of operations:
multiplication, reading from left to right; then,
addition, reading from left to right.
are given an integer array answers of length n, which are the submitted answers of the students in no particular order. you are asked to grade the answers, by following these rules:
an answer equals the correct answer of the expression, this student will be rewarded 5 points;
if the answer could be interpreted as if the student applied the operators in the wrong order but had correct arithmetic, this student will be rewarded 2 points;
this student will be rewarded 0 points.
the sum of the points of the students.
a 2d plane, we place n stones at some integer coordinate points. each coordinate point may have at most one stone.
stone can be removed if it shares either the same row or the same column as another stone that has not been removed.
an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.
numerals are represented by seven different symbols: i, v, x, l, c, d and m.
value
1
5
10
50
100
500
1000
example, 2 is written as ii in roman numeral, just two one's added together. 12 is written as xii, which is simply x + ii. the number 27 is written as xxvii, which is xx + v + ii.
numerals are usually written largest to smallest from left to right. however, the numeral for four is not iiii. instead, the number four is written as iv. because the one is before the five we subtract it making four. the same principle applies to the number nine, which is written as ix. there are six instances where subtraction is used:
can be placed before v (5) and x (10) to make 4 and 9.
can be placed before l (50) and c (100) to make 40 and 90.
can be placed before d (500) and m (1000) to make 400 and 900.
an integer, convert it to a roman numeral.
schema
visits

column name | type |

visit_id | int |
customer_id | int |

is the primary key for this table.
table contains information about the customers who visited the mall.
transactions

column name | type |

transaction_id | int |
visit_id | int |
amount | int |

is the primary key for this table.
table contains information about the transactions made during the visit_id.
a sql query to find the ids of the users who visited without making any transactions and the number of times they made these types of visits.
the result table sorted in any order.
query result format is in the following example.
an infinite plane, a robot initially stands at (0, 0) and faces north. note that:
north direction is the positive direction of the y-axis.
south direction is the negative direction of the y-axis.
east direction is the positive direction of the x-axis.
west direction is the negative direction of the x-axis.
robot can receive one of three instructions:
go straight 1 unit.
turn 90 degrees to the left (i.e., anti-clockwise direction).
turn 90 degrees to the right (i.e., clockwise direction).
robot performs the instructions given in order, and repeats them forever.
true if and only if there exists a circle in the plane such that the robot never leaves the circle.
two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays.
distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.
the root of a binary tree, return the maximum width of the given tree.
maximum width of a tree is the maximum width among all levels.
width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.
is guaranteed that the answer will in the range of a 32-bit signed integer.
a simplified version of twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.
the twitter class:
initializes your twitter object.
posttweet(int userid, int tweetid) composes a new tweet with id tweetid by the user userid. each call to this function will be made with a unique tweetid.
getnewsfeed(int userid) retrieves the 10 most recent tweet ids in the user's news feed. each item in the news feed must be posted by users who the user followed or by the user themself. tweets must be ordered from most recent to least recent.
follow(int followerid, int followeeid) the user with id followerid started following the user with id followeeid.
unfollow(int followerid, int followeeid) the user with id followerid started unfollowing the user with id followeeid.
are given a 0-indexed 1-dimensional (1d) integer array original, and two integers, m and n. you are tasked with creating a 2-dimensional (2d) array with m rows and n columns using all the elements from original.
elements from indices 0 to n - 1 (inclusive) of original should form the first row of the constructed 2d array, the elements from indices n to 2 * n - 1 (inclusive) should form the second row of the constructed 2d array, and so on.
an m x n 2d array constructed according to the above procedure, or an empty 2d array if it is impossible.
an integer array data representing the data, return whether it is a valid utf-8 encoding (i.e. it translates to a sequence of valid utf-8 encoded characters).
character in utf8 can be from 1 to 4 bytes long, subjected to the following rules:
a 1-byte character, the first bit is a 0, followed by its unicode code.
an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.
is how the utf-8 encoding would work:
of bytes | utf-8 octet sequence
(binary)

| 0xxxxxxx
| 110xxxxx 10xxxxxx
| 1110xxxx 10xxxxxx 10xxxxxx
| 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
denotes a bit in the binary form of a byte that may be either 0 or 1.
the input is an array of integers. only the least significant 8 bits of each integer is used to store the data. this means each integer represents only 1 byte of data.
are given a 2d integer array, queries. for each queries[i], where queries[i] = [ni, ki], find the number of different ways you can place positive integers into an array of size ni such that the product of the integers is ki. as the number of ways may be too large, the answer to the ith query is the number of ways modulo 109 + 7.
an integer array answer where answer.length == queries.length, and answer[i] is the answer to the ith query.
two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.
that after backspacing an empty text, the text will continue empty.
two strings s and t, transform string s into string t using the following operation any number of times:
a non-empty substring in s and sort it in place so the characters are in ascending order.
example, applying the operation on the underlined substring in "14234" results in "12344".
true if it is possible to transform s into t. otherwise, return false.
substring is a contiguous sequence of characters within a string.
are given an array of distinct positive integers locations where locations[i] represents the position of city i. you are also given integers start, finish and fuel representing the starting city, ending city, and the initial amount of fuel you have, respectively.
each step, if you are at city i, you can pick any city j such that j != i and 0 <= j < locations.length and move to city j. moving from city i to city j reduces the amount of fuel you have by |locations[i] - locations[j]|. please notice that |x| denotes the absolute value of x.
that fuel cannot become negative at any point in time, and that you are allowed to visit any city more than once (including start and finish).
the count of all possible routes from start to finish. since the answer may be too large, return it modulo 109 + 7.
are given an array of integers stones where stones[i] is the weight of the ith stone.
are playing a game with the stones. on each turn, we choose any two stones and smash them together. suppose the stones have weights x and y with x <= y. the result of this smash is:
x == y, both stones are destroyed, and
x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
the end of the game, there is at most one stone left.
the smallest possible weight of the left stone. if there are no stones left, return 0.
are given a positive integer n representing the number of nodes in an undirected graph. the nodes are labeled from 1 to n.
are also given a 2d integer array edges, where edges[i] = [ai, bi] indicates that there is a bidirectional edge between nodes ai and bi. notice that the given graph may be disconnected.
the nodes of the graph into m groups (1-indexed) such that:
node in the graph belongs to exactly one group.
every pair of nodes in the graph that are connected by an edge [ai, bi], if ai belongs to the group with index x, and bi belongs to the group with index y, then |y - x| = 1.
the maximum number of groups (i.e., maximum m) into which you can divide the nodes. return -1 if it is impossible to group the nodes with the given conditions.
ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.
an integer n, return the nth ugly number.
an array of positive integers arr, find a pattern of length m that is repeated k or more times.
pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. a pattern is defined by its length and the number of repetitions.
true if there exists a pattern of length m that is repeated k or more times, otherwise return false.
an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.
make a binary tree using these integers, and each number may be used for any number of times. each non-leaf node's value should be equal to the product of the values of its children.
the number of binary trees we can make. the answer may be too large so return the answer modulo 109 + 7.
are given a 0-indexed 2d integer array tires where tires[i] = [fi, ri] indicates that the ith tire can finish its xth successive lap in fi * ri(x-1) seconds.
example, if fi = 3 and ri = 2, then the tire would finish its 1st lap in 3 seconds, its 2nd lap in 3 * 2 = 6 seconds, its 3rd lap in 3 * 22 = 12 seconds, etc.
are also given an integer changetime and an integer numlaps.
race consists of numlaps laps and you may start the race with any tire. you have an unlimited supply of each tire and after every lap, you may change to any given tire (including the current tire type) if you wait changetime seconds.
the minimum time to finish the race.
an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.
alphanumeric string is a string consisting of lowercase english letters and digits.
a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. it is guaranteed there is at least one word that is not banned, and that the answer is unique.
words in paragraph are case-insensitive and the answer should be returned in lowercase.
complex number can be represented as a string on the form "real+imaginaryi" where:
is the real part and is an integer in the range [-100, 100].
is the imaginary part and is an integer in the range [-100, 100].
== -1.
two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.
are given an integer array cookies, where cookies[i] denotes the number of cookies in the ith bag. you are also given an integer k that denotes the number of children to distribute all the bags of cookies to. all the cookies in the same bag must go to the same child and cannot be split up.
unfairness of a distribution is defined as the maximum total cookies obtained by a single child in the distribution.
the minimum unfairness of all distributions.
are given two strings stamp and target. initially, there is a string s of length target.length with all s[i] == '?'.
one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp.
example, if stamp = "abc" and target = "abcba", then s is "?????" initially. in one turn you can:
stamp at index 0 of s to obtain "abc??",
stamp at index 1 of s to obtain "?abc?", or
stamp at index 2 of s to obtain "??abc".
that stamp must be fully contained in the boundaries of s in order to stamp (i.e., you cannot place stamp at index 3 of s).
want to convert s to target using at most 10 * target.length turns.
an array of the index of the left-most letter being stamped at each turn. if we cannot obtain target from s within 10 * target.length turns, return an empty array.
parentheses string is valid if and only if:
is the empty string,
can be written as ab (a concatenated with b), where a and b are valid strings, or
can be written as (a), where a is a valid string.
are given a parentheses string s. in one move, you can insert a parenthesis at any position of the string.
example, if s = "()))", you can insert an opening parenthesis to be "(()))" or a closing parenthesis to be "())))".
the minimum number of moves required to make s valid.
a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.
a list of unique strings that are valid with the minimum number of removals. you may return the answer in any order.
schema
cinema

column name | type |

id | int |
movie | varchar |
description | varchar |
rating | float |

is the primary key for this table.
row contains information about the name of a movie, its genre, and its rating.
is a 2 decimal places float in the range [0, 10]
an sql query to report the movies with an odd-numbered id and a description that is not "boring".
the result table ordered by rating in descending order.
query result format is in the following example.
the root of a binary tree, return the sum of every tree node's tilt.
tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. if a node does not have a left child, then the sum of the left subtree node values is treated as 0. the rule is similar if the node does not have a right child.
is an n x n 0-indexed grid with some artifacts buried in it. you are given the integer n and a 0-indexed 2d integer array artifacts describing the positions of the rectangular artifacts where artifacts[i] = [r1i, c1i, r2i, c2i] denotes that the ith artifact is buried in the subgrid where:
c1i) is the coordinate of the top-left cell of the ith artifact and
c2i) is the coordinate of the bottom-right cell of the ith artifact.
will excavate some cells of the grid and remove all the mud from them. if the cell has a part of an artifact buried underneath, it will be uncovered. if all the parts of an artifact are uncovered, you can extract it.
a 0-indexed 2d integer array dig where dig[i] = [ri, ci] indicates that you will excavate the cell (ri, ci), return the number of artifacts that you can extract.
test cases are generated such that:
two artifacts overlap.
artifact only covers at most 4 cells.
entries of dig are unique.
are given n rectangles represented by a 0-indexed 2d integer array rectangles, where rectangles[i] = [widthi, heighti] denotes the width and height of the ith rectangle.
rectangles i and j (i < j) are considered interchangeable if they have the same width-to-height ratio. more formally, two rectangles are interchangeable if widthi/heighti == widthj/heightj (using decimal division, not integer division).
the number of pairs of interchangeable rectangles in rectangles.
school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. all students stand in a queue. each student either prefers square or circular sandwiches.
number of sandwiches in the cafeteria is equal to the number of students. the sandwiches are placed in a stack. at each step:
the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.
they will leave it and go to the queue's end.
continues until none of the queue students want to take the top sandwich and are thus unable to eat.
are given two integer arrays students and sandwiches where sandwiches[i] is the type of the ith sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the jth student in the initial queue (j = 0 is the front of the queue). return the number of students that are unable to eat.
ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. the width of such a ramp is j - i.
an integer array nums, return the maximum width of a ramp in nums. if there is no ramp in nums, return 0.
are given an m x n matrix mat that has its rows sorted in non-decreasing order and an integer k.
are allowed to choose exactly one element from each row to form an array.
the kth smallest array sum among all possible arrays.
are given two strings s and p where p is a subsequence of s. you are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed).
want to choose an integer k (0 <= k <= removable.length) such that, after removing k characters from s using the first k indices in removable, p is still a subsequence of s. more formally, you will mark the character at s[removable[i]] for each 0 <= i < k, then remove all marked characters and check if p is still a subsequence.
the maximum k you can choose such that p is still a subsequence of s after the removals.
subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
an array of integers arr, return true if and only if it is a valid mountain array.
that arr is a mountain array if and only if:
>= 3
exists some i with 0 < i < arr.length - 1 such that:
< arr[1] < ... < arr[i - 1] < arr[i]
> arr[i + 1] > ... > arr[arr.length - 1]
a town, there are n people labeled from 1 to n. there is a rumor that one of these people is secretly the town judge.
the town judge exists, then:
town judge trusts nobody.
(except for the town judge) trusts the town judge.
is exactly one person that satisfies properties 1 and 2.
are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi. if a trust relationship does not exist in trust array, then such a trust relationship does not exist.
the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.
are n oranges in the kitchen and you decided to eat some of these oranges every day as follows:
one orange.
the number of remaining oranges n is divisible by 2 then you can eat n / 2 oranges.
the number of remaining oranges n is divisible by 3 then you can eat 2 * (n / 3) oranges.
can only choose one of the actions per day.
the integer n, return the minimum number of days to eat n oranges.
a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.
the maximum amount of gold you can collect under the conditions:
time you are located in a cell you will collect all the gold in that cell.
your position, you can walk one step to the left, right, up, or down.
can't visit the same cell more than once.
visit a cell with 0 gold.
can start and stop collecting gold from any position in the grid that has some gold.
two strings s and t, find the number of ways you can choose a non-empty substring of s and replace a single character by a different character such that the resulting substring is a substring of t. in other words, find the number of substrings in s that differ from some substring in t by exactly one character.
example, the underlined substrings in "computer" and "computation" only differ by the 'e'/'a', so this is a valid way.
the number of substrings that satisfy the condition above.
substring is a contiguous sequence of characters within a string.
are given an integer array arr. from some starting index, you can make a series of jumps. the (1st, 3rd, 5th, ...) jumps in the series are called odd-numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even-numbered jumps. note that the jumps are numbered, not the indices.
may jump forward from index i to index j (with i < j) in the following way:
odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the index j such that arr[i] <= arr[j] and arr[j] is the smallest possible value. if there are multiple such indices j, you can only jump to the smallest such index j.
even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the index j such that arr[i] >= arr[j] and arr[j] is the largest possible value. if there are multiple such indices j, you can only jump to the smallest such index j.
may be the case that for some index i, there are no legal jumps.
starting index is good if, starting from that index, you can reach the end of the array (index arr.length - 1) by jumping some number of times (possibly 0 or more than once).
the number of good starting indices.
are given an integer n and an array of unique integers blacklist. design an algorithm to pick a random integer in the range [0, n - 1] that is not in blacklist. any integer that is in the mentioned range and not in blacklist should be equally likely to be returned.
your algorithm such that it minimizes the number of calls to the built-in random function of your language.
the solution class:
n, int[] blacklist) initializes the object with the integer n and the blacklisted integers blacklist.
pick() returns a random integer in the range [0, n - 1] and not in blacklist.
an array of positive integers nums, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by p. it is not allowed to remove the whole array.
the length of the smallest subarray that you need to remove, or -1 if it's impossible.
subarray is defined as a contiguous block of elements in the array.
schema
queue

column name | type |

person_id | int |
person_name | varchar |
weight | int |
turn | int |

is the primary key column for this table.
table has the information about all people waiting for a bus.
person_id and turn columns will contain all numbers from 1 to n, where n is the number of rows in the table.
determines the order of which the people will board the bus, where turn=1 denotes the first person to board and turn=n denotes the last person to board.
is the weight of the person in kilograms.
is a queue of people waiting to board a bus. however, the bus has a weight limit of 1000 kilograms, so there may be some people who cannot board.
an sql query to find the person_name of the last person that can fit on the bus without exceeding the weight limit. the test cases are generated such that the first person does not exceed the weight limit.
query result format is in the following example.
the combinationiterator class:
characters, int combinationlength) initializes the object with a string characters of sorted distinct lowercase english letters and a number combinationlength as arguments.
returns the next combination of length combinationlength in lexicographical order.
returns true if and only if there exists a next combination.
are given two strings word1 and word2. merge the strings by adding letters in alternating order, starting with word1. if a string is longer than the other, append the additional letters onto the end of the merged string.
the merged string.
are given a binary string s and a positive integer k.
the length of the longest subsequence of s that makes up a binary number less than or equal to k.

subsequence can contain leading zeroes.
empty string is considered to be equal to 0.
subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
are given two positive integer arrays nums and target, of the same length.
one operation, you can choose any two distinct indices i and j where 0 <= i, j < nums.length and:
nums[i] = nums[i] + 2 and
nums[j] = nums[j] - 2.
arrays are considered to be similar if the frequency of each element is the same.
the minimum number of operations required to make nums similar to target. the test cases are generated such that nums can always be similar to target.
are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. any server can reach other servers directly or indirectly through the network.
critical connection is a connection that, if removed, will make some servers unable to reach some other server.
all critical connections in the network in any order.
are given a string sentence that consist of words separated by spaces. each word consists of lowercase and uppercase letters only.
would like to convert the sentence to "goat latin" (a made-up language similar to pig latin.) the rules of goat latin are as follows:
a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append "ma" to the end of the word.
example, the word "apple" becomes "applema".
a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add "ma".
example, the word "goat" becomes "oatgma".
one letter 'a' to the end of each word per its word index in the sentence, starting with 1.
example, the first word gets "a" added to the end, the second word gets "aa" added to the end, and so on.
the final sentence representing the conversion from sentence to goat latin.
are given two 0-indexed integer arrays nums1 and nums2, each of size n, and an integer diff. find the number of pairs (i, j) such that:
<= i < j <= n - 1 and
- nums1[j] <= nums2[i] - nums2[j] + diff.
the number of pairs that satisfy the conditions.
two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules:
1: triplet (i, j, k) if nums1[i]2 == nums2[j] * nums2[k] where 0 <= i < nums1.length and 0 <= j < k < nums2.length.
2: triplet (i, j, k) if nums2[i]2 == nums1[j] * nums1[k] where 0 <= i < nums2.length and 0 <= j < k < nums1.length.
are given an integer array nums and an integer k.
one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. you can apply this operation at most once for each index i.
score of nums is the difference between the maximum and minimum elements in nums.
the minimum score of nums after applying the mentioned operation at most once for each index in it.
an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....
may assume the input array always has a valid answer.
are given a 0-indexed binary string s and two integers minjump and maxjump. in the beginning, you are standing at index 0, which is equal to '0'. you can move from index i to index j if the following conditions are fulfilled:
+ minjump <= j <= min(i + maxjump, s.length - 1), and
== '0'.
true if you can reach index s.length - 1 in s, or false otherwise.
attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. the record only contains the following three characters:
absent.
late.
present.
student is eligible for an attendance award if they meet both of the following criteria:
student was absent ('a') for strictly fewer than 2 days total.
student was never late ('l') for 3 or more consecutive days.
an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. the answer may be very large, so return it modulo 109 + 7.
two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
an integer n, return the number of prime numbers that are strictly less than n.
are given an integer array nums and two integers indexdiff and valuediff.
a pair of indices (i, j) such that:
!= j,
- j) <= indexdiff.
- nums[j]) <= valuediff, and
true if such pair exists or false otherwise.
are n cities numbered from 0 to n - 1 and n - 1 roads such that there is only one way to travel between two different cities (this network form a tree). last year, the ministry of transport decided to orient the roads in one direction because they are too narrow.
are represented by connections where connections[i] = [ai, bi] represents a road from city ai to city bi.
year, there will be a big event in the capital (city 0), and many people want to travel to this city.
task consists of reorienting some roads such that each city can visit the city 0. return the minimum number of edges changed.
guaranteed that each city can reach city 0 after reorder.
the root of a binary tree, the depth of each node is the shortest distance to the root.
the smallest subtree such that it contains all the deepest nodes in the original tree.
node is called the deepest if it has the largest depth possible among any node in the entire tree.
subtree of a node is a tree consisting of that node, plus the set of all descendants of that node.
is a country of n cities numbered from 0 to n - 1 where all the cities are connected by bi-directional roads. the roads are represented as a 2d integer array edges where edges[i] = [xi, yi, timei] denotes a road between cities xi and yi that takes timei minutes to travel. there may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself.
time you pass through a city, you must pay a passing fee. this is represented as a 0-indexed integer array passingfees of length n where passingfees[j] is the amount of dollars you must pay when you pass through city j.
the beginning, you are at city 0 and want to reach city n - 1 in maxtime minutes or less. the cost of your journey is the summation of passing fees for each city that you passed through at some moment of your journey (including the source and destination cities).
maxtime, edges, and passingfees, return the minimum cost to complete your journey, or -1 if you cannot complete it within maxtime minutes.
are given an array of integers nums. perform the following steps:
any two adjacent numbers in nums that are non-coprime.
no such numbers are found, stop the process.
delete the two numbers and replace them with their lcm (least common multiple).
this process as long as you keep finding two adjacent non-coprime numbers.
the final modified array. it can be shown that replacing adjacent non-coprime numbers in any arbitrary order will lead to the same result.
test cases are generated such that the values in the final array are less than or equal to 108.
values x and y are non-coprime if gcd(x, y) > 1 where gcd(x, y) is the greatest common divisor of x and y.
a string s, return true if it is possible to split the string s into three non-empty palindromic substrings. otherwise, return false.
string is said to be palindrome if it the same string when reversed.
define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.
an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.
subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.
country has an infinite number of lakes. initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. if it rains over a lake that is full of water, there will be a flood. your goal is to avoid floods in any lake.
an integer array rains where:
> 0 means there will be rains over the rains[i] lake.
== 0 means there are no rains this day and you can choose one lake this day and dry it.
an array ans where:
== rains.length
== -1 if rains[i] > 0.
is the lake you choose to dry in the ith day if rains[i] == 0.
there are multiple valid answers return any of them. if it is impossible to avoid flood return an empty array.
that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.
are given the customer visit log of a shop represented by a 0-indexed string customers consisting only of characters 'n' and 'y':
the ith character is 'y', it means that customers come at the ith hour
'n' indicates that no customers come at the ith hour.
the shop closes at the jth hour (0 <= j <= n), the penalty is calculated as follows:
every hour when the shop is open and no customers come, the penalty increases by 1.
every hour when the shop is closed and customers come, the penalty increases by 1.
the earliest hour at which the shop must be closed to incur a minimum penalty.
that if a shop closes at the jth hour, it means the shop is closed at the hour j.
this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.
given input is a directed graph that started as a rooted tree with n nodes (with distinct values from 1 to n), with one additional directed edge added. the added edge has two different vertices chosen from 1 to n, and was not an edge that already existed.
resulting graph is given as a 2d-array of edges. each element of edges is a pair [ui, vi] that represents a directed edge connecting nodes ui and vi, where ui is a parent of child vi.
an edge that can be removed so that the resulting graph is a rooted tree of n nodes. if there are multiple answers, return the answer that occurs last in the given 2d-array.
want to water n plants in your garden with a watering can. the plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i. there is a river at x = -1 that you can refill your watering can at.
plant needs a specific amount of water. you will water the plants in the following way:
the plants in order from left to right.
watering the current plant, if you do not have enough water to completely water the next plant, return to the river to fully refill the watering can.
cannot refill the watering can early.
are initially at the river (i.e., x = -1). it takes one step to move one unit on the x-axis.
a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and an integer capacity representing the watering can capacity, return the number of steps needed to water all the plants.
super ugly number is a positive integer whose prime factors are in the array primes.
an integer n and an array of integers primes, return the nth super ugly number.
nth super ugly number is guaranteed to fit in a 32-bit signed integer.
valid encoding of an array of words is any reference string s and array of indices indices such that:
== indices.length
reference string s ends with the '#' character.
each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i].
an array of words, return the length of the shortest reference string s possible of any valid encoding of words.
are some spherical balloons taped onto a flat wall that represents the xy-plane. the balloons are represented as a 2d integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. you do not know the exact y-coordinates of the balloons.
can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. a balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. there is no limit to the number of arrows that can be shot. a shot arrow keeps traveling up infinitely, bursting any balloons in its path.
the array points, return the minimum number of arrows that must be shot to burst all balloons.
an unsorted integer array nums, return the smallest missing positive integer.
must implement an algorithm that runs in o(n) time and uses constant extra space.
are given a string s. an awesome substring is a non-empty substring of s such that we can make any number of swaps in order to make it a palindrome.
the length of the maximum length awesome substring of s.
are n uniquely-sized sticks whose lengths are integers from 1 to n. you want to arrange the sticks such that exactly k sticks are visible from the left. a stick is visible from the left if there are no longer sticks to the left of it.
example, if the sticks are arranged [1,3,2,5,4], then the sticks with lengths 1, 3, and 5 are visible from the left.
n and k, return the number of such arrangements. since the answer may be large, return it modulo 109 + 7.
are given an undirected graph (the "original graph") with n nodes labeled from 0 to n - 1. you decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.
graph is given as a 2d array of edges where edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui and vi in the original graph, and cnti is the total number of new nodes that you will subdivide the edge into. note that cnti == 0 means you will not subdivide the edge.
subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and cnti new nodes. the new nodes are x1, x2, ..., xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3], ..., [xcnti-1, xcnti], [xcnti, vi].
this new graph, you want to know how many nodes are reachable from the node 0, where a node is reachable if the distance is maxmoves or less.
the original graph and maxmoves, return the number of nodes that are reachable from node 0 in the new graph.
are given the root of a binary search tree (bst), where the values of exactly two nodes of the tree were swapped by mistake. recover the tree without changing its structure.
a string s. return all the words vertically in the same order in which they appear in s.
are returned as a list of strings, complete with spaces when is necessary. (trailing spaces are not allowed).
word would be put on only one column and that in one column there will be only one word.
a binary string s, you can split s into 3 non-empty strings s1, s2, and s3 where s1 + s2 + s3 = s.
the number of ways s can be split such that the number of ones is the same in s1, s2, and s3. since the answer may be too large, return it modulo 109 + 7.
n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
an integer n, return the number of distinct solutions to the n-queens puzzle.
a 2d grid of 0s and 1s, return the number of elements in the largest square subgrid that has all 1s on its border, or 0 if such a subgrid doesn't exist in the grid.
a hashset without using any built-in hash table libraries.
myhashset class:
add(key) inserts the value key into the hashset.
contains(key) returns whether the value key exists in the hashset or not.
remove(key) removes the value key in the hashset. if key does not exist in the hashset, do nothing.
the root of a binary tree, return the most frequent subtree sum. if there is a tie, return all the values with the highest frequency in any order.
subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).
are given two 0-indexed binary strings s and target of the same length n. you can do the following operation on s any number of times:
two different indices i and j where 0 <= i, j < n.
replace s[i] with (s[i] or s[j]) and s[j] with (s[i] xor s[j]).
example, if s = "0110", you can choose i = 0 and j = 2, then simultaneously replace s[0] with (s[0] or s[2] = 0 or 1 = 1), and s[2] with (s[0] xor s[2] = 0 xor 1 = 1), so we will have s = "1110".
true if you can make the string s equal to target, or false otherwise.
schema
triangle

column name | type |

x | int |
y | int |
z | int |

y, z) is the primary key column for this table.
row of this table contains the lengths of three line segments.
an sql query to report for every three line segments whether they can form a triangle.
the result table in any order.
query result format is in the following example.
an array of integers nums, return the number of good pairs.
pair (i, j) is called good if nums[i] == nums[j] and i < j.
parentheses string is a non-empty string consisting only of '(' and ')'. it is valid if any of the following conditions is true:
is ().
can be written as ab (a concatenated with b), where a and b are valid parentheses strings.
can be written as (a), where a is a valid parentheses string.
are given a parentheses string s and a string locked, both of length n. locked is a binary string consisting only of '0's and '1's. for each index i of locked,
locked[i] is '1', you cannot change s[i].
if locked[i] is '0', you can change s[i] to either '(' or ')'.
true if you can make s a valid parentheses string. otherwise, return false.
the head of a linked list, return the list after sorting it in ascending order.
good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.
can pick any two different foods to make a good meal.
an array of integers deliciousness where deliciousness[i] is the deliciousness of the ith item of food, return the number of different good meals you can make from this list modulo 109 + 7.
that items with different indices are considered different even if they have the same deliciousness value.
is a survey that consists of n questions where each question's answer is either 0 (no) or 1 (yes).
survey was given to m students numbered from 0 to m - 1 and m mentors numbered from 0 to m - 1. the answers of the students are represented by a 2d integer array students where students[i] is an integer array that contains the answers of the ith student (0-indexed). the answers of the mentors are represented by a 2d integer array mentors where mentors[j] is an integer array that contains the answers of the jth mentor (0-indexed).
student will be assigned to one mentor, and each mentor will have one student assigned to them. the compatibility score of a student-mentor pair is the number of answers that are the same for both the student and the mentor.
example, if the student's answers were [1, 0, 1] and the mentor's answers were [0, 0, 1], then their compatibility score is 2 because only the second and the third answers are the same.
are tasked with finding the optimal student-mentor pairings to maximize the sum of the compatibility scores.
students and mentors, return the maximum compatibility score sum that can be achieved.
are given a positive integer n, indicating that we initially have an n x n 0-indexed integer matrix mat filled with zeroes.
are also given a 2d integer array query. for each query[i] = [row1i, col1i, row2i, col2i], you should do the following operation:
1 to every element in the submatrix with the top left corner (row1i, col1i) and the bottom right corner (row2i, col2i). that is, add 1 to mat[x][y] for all row1i <= x <= row2i and col1i <= y <= col2i.
the matrix mat after performing every query.
game on an undirected graph is played by two players, mouse and cat, who alternate turns.
graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph.
mouse starts at node 1 and goes first, the cat starts at node 2 and goes second, and there is a hole at node 0.
each player's turn, they must travel along one edge of the graph that meets where they are. for example, if the mouse is at node 1, it must travel to any node in graph[1].
it is not allowed for the cat to travel to the hole (node 0.)
the game can end in three ways:
ever the cat occupies the same node as the mouse, the cat wins.
ever the mouse reaches the hole, the mouse wins.
ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.
a graph, and assuming both players play optimally, return
if the mouse wins the game,
if the cat wins the game, or
if the game is a draw.
an integer array instructions, you are asked to create a sorted array from the elements in instructions. you start with an empty container nums. for each element from left to right in instructions, insert it into nums. the cost of each insertion is the minimum of the following:
number of elements currently in nums that are strictly less than instructions[i].
number of elements currently in nums that are strictly greater than instructions[i].
example, if inserting element 3 into nums = [1,2,3,5], the cost of insertion is min(2, 1) (elements 1 and 2 are less than 3, element 5 is greater than 3) and nums will become [1,2,3,3,5].
the total cost to insert all elements from instructions into nums. since the answer may be large, return it modulo 109 + 7
are given a 0-indexed integer array stones sorted in strictly increasing order representing the positions of stones in a river.
frog, initially on the first stone, wants to travel to the last stone and then return to the first stone. however, it can jump to any stone at most once.
length of a jump is the absolute difference between the position of the stone the frog is currently on and the position of the stone to which the frog jumps.
formally, if the frog is at stones[i] and is jumping to stones[j], the length of the jump is |stones[i] - stones[j]|.
cost of a path is the maximum length of a jump among all jumps in the path.
the minimum cost of a path for the frog.
are given a string s. reorder the string using the following algorithm:
the smallest character from s and append it to the result.
the smallest character from s which is greater than the last appended character to the result and append it.
step 2 until you cannot pick more characters.
the largest character from s and append it to the result.
the largest character from s which is smaller than the last appended character to the result and append it.
step 5 until you cannot pick more characters.
the steps from 1 to 6 until you pick all characters from s.
each step, if the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.
the result string after sorting s with this algorithm.
head which is a reference node to a singly-linked list. the value of each node in the linked list is either 0 or 1. the linked list holds the binary representation of a number.
the decimal value of the number in the linked list.
most significant bit is at the head of the linked list.
are given an array of strings nums and an integer k. each string in nums represents an integer without leading zeros.
the string that represents the kth largest integer in nums.
duplicate numbers should be counted distinctly. for example, if nums is ["1","2","2"], "2" is the first largest integer, "2" is the second-largest integer, and "1" is the third-largest integer.
the root of a perfect binary tree, reverse the node values at each odd level of the tree.
example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2].
the root of the reversed tree.
binary tree is perfect if all parent nodes have two children and all leaves are on the same level.
level of a node is the number of edges along the path between it and the root node.
an integer array nums of size n, return the minimum number of moves required to make all array elements equal.
one move, you can increment or decrement an element of the array by 1.
cases are designed so that the answer will fit in a 32-bit integer.
range module is a module that tracks ranges of numbers. design a data structure to track the ranges represented as half-open intervals and query about them.
half-open interval [left, right) denotes all the real numbers x where left <= x < right.
the rangemodule class:
initializes the object of the data structure.
addrange(int left, int right) adds the half-open interval [left, right), tracking every real number in that interval. adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked.
queryrange(int left, int right) returns true if every real number in the interval [left, right) is currently being tracked, and false otherwise.
removerange(int left, int right) stops tracking every real number currently being tracked in the half-open interval [left, right).
security devices are activated inside a bank. you are given a 0-indexed binary string array bank representing the floor plan of the bank, which is an m x n 2d matrix. bank[i] represents the ith row, consisting of '0's and '1's. '0' means the cell is empty, while'1' means the cell has a security device.
is one laser beam between any two security devices if both conditions are met:
two devices are located on two different rows: r1 and r2, where r1 < r2.
each row i where r1 < i < r2, there are no security devices in the ith row.
beams are independent, i.e., one beam does not interfere nor join with another.
the total number of laser beams in the bank.
are given a binary string s, and a 2d integer array queries where queries[i] = [firsti, secondi].
the ith query, find the shortest substring of s whose decimal value, val, yields secondi when bitwise xored with firsti. in other words, val ^ firsti == secondi.
answer to the ith query is the endpoints (0-indexed) of the substring [lefti, righti] or [-1, -1] if no such substring exists. if there are multiple answers, choose the one with the minimum lefti.
an array ans where ans[i] = [lefti, righti] is the answer to the ith query.
substring is a contiguous non-empty sequence of characters within a string.
an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.
are given an integer n indicating there are n people numbered from 0 to n - 1. you are also given a 0-indexed 2d integer array meetings where meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. a person may attend multiple meetings at the same time. finally, you are given an integer firstperson.
0 has a secret and initially shares the secret with a person firstperson at time 0. this secret is then shared every time a meeting takes place with a person that has the secret. more formally, for every meeting, if a person xi has the secret at timei, then they will share the secret with person yi, and vice versa.
secrets are shared instantaneously. that is, a person may receive the secret and share it with people in other meetings within the same time frame.
a list of all the people that have the secret after all the meetings have taken place. you may return the answer in any order.
have a 2-d grid of size m x n representing a box, and you have n balls. the box is open on the top and bottom sides.
cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.
board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1.
board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1.
drop one ball at the top of each column of the box. each ball can get stuck in the box or fall out of the bottom. a ball gets stuck if it hits a "v" shaped pattern between two boards or if a board redirects the ball into either wall of the box.
an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 if the ball gets stuck in the box.
schema
customer

column name | type |

customer_id | int |
product_key | int |

is no primary key for this table. it may contain duplicates. customer_id is not null.
is a foreign key to product table.
product

column name | type |

product_key | int |

is the primary key column for this table.
an sql query to report the customer ids from the customer table that bought all the products in the product table.
the result table in any order.
query result format is in the following example.
are given an integer num. you will apply the following steps exactly two times:
a digit x (0 <= x <= 9).
another digit y (0 <= y <= 9). the digit y can be equal to x.
all the occurrences of x in the decimal representation of num by y.
new integer cannot have any leading zeros, also the new integer cannot be 0.
a and b be the results of applying the operations to num the first and second times, respectively.
the max difference between a and b.
are given an integer array target. you have an integer array initial of the same size as target with all elements initially zeros.
one operation you can choose any subarray from initial and increment each value by one.
the minimum number of operations to form a target array from initial.
test cases are generated so that the answer fits in a 32-bit integer.
all valid combinations of k numbers that sum up to n such that the following conditions are true:
numbers 1 through 9 are used.
number is used at most once.
a list of all possible valid combinations. the list must not contain the same combination twice, and the combinations may be returned in any order.
an integer num, find the closest two integers in absolute difference whose product equals num + 1 or num + 2.
the two integers in any order.
have n coins and you want to build a staircase with these coins. the staircase consists of k rows where the ith row has exactly i coins. the last row of the staircase may be incomplete.
the integer n, return the number of complete rows of the staircase you will build.
your implementation of the linked list. you can choose to use a singly or doubly linked list.
node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node.
you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. assume all nodes in the linked list are 0-indexed.
the mylinkedlist class:
initializes the mylinkedlist object.
get(int index) get the value of the indexth node in the linked list. if the index is invalid, return -1.
addathead(int val) add a node of value val before the first element of the linked list. after the insertion, the new node will be the first node of the linked list.
addattail(int val) append a node of value val as the last element of the linked list.
addatindex(int index, int val) add a node of value val before the indexth node in the linked list. if index equals the length of the linked list, the node will be appended to the end of the linked list. if index is greater than the length, the node will not be inserted.
deleteatindex(int index) delete the indexth node in the linked list, if the index is valid.
have a keyboard layout as shown above in the x-y plane, where each english uppercase letter is located at some coordinate.
example, the letter 'a' is located at coordinate (0, 0), the letter 'b' is located at coordinate (0, 1), the letter 'p' is located at coordinate (2, 3) and the letter 'z' is located at coordinate (4, 1).
the string word, return the minimum total distance to type such string using only two fingers.
distance between coordinates (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|.
that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.
are given a list of strings of the same length words and a string target.
task is to form target using the given words under the following rules:
should be formed from left to right.
form the ith character (0-indexed) of target, you can choose the kth character of the jth string in words if target[i] = words[j][k].
you use the kth character of the jth string of words, you can no longer use the xth character of any string in words where x <= k. in other words, all characters to the left of or at index k become unusuable for every string.
the process until you form the string target.
that you can use multiple characters from the same string in words provided the conditions above are met.
the number of ways to form target from words. since the answer may be too large, return it modulo 109 + 7.
additive number is a string whose digits can form an additive sequence.
valid additive sequence should contain at least three numbers. except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.
a string containing only digits, return true if it is an additive number or false otherwise.
numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.
are given a 0-indexed integer array candies. each element in the array denotes a pile of candies of size candies[i]. you can divide each pile into any number of sub piles, but you cannot merge two piles together.
are also given an integer k. you should allocate piles of candies to k children such that each child gets the same number of candies. each child can take at most one pile of candies and some piles of candies may go unused.
the maximum number of candies each child can get.
a string s, return the number of segments in the string.
segment is defined to be a contiguous sequence of non-space characters.
a program to count the number of days between two dates.
two dates are given as strings, their format is yyyy-mm-dd as shown in the examples.
are given a 0-indexed m x n binary matrix matrix and an integer numselect, which denotes the number of distinct columns you must select from matrix.
us consider s = {c1, c2, ...., cnumselect} as the set of columns selected by you. a row row is covered by s if:
each cell matrix[row][col] (0 <= col <= n - 1) where matrix[row][col] == 1, col is present in s or,
cell in row has a value of 1.
need to choose numselect columns such that the number of rows that are covered is maximized.
the maximum number of rows that can be covered by a set of numselect columns.
valid ip address consists of exactly four integers separated by single dots. each integer is between 0 and 255 (inclusive) and cannot have leading zeros.
example, "0.1.2.201" and "192.168.1.1" are valid ip addresses, but "0.011.255.245", "192.168.1.312" and "192.168@1.1" are invalid ip addresses.
a string s containing only digits, return all possible valid ip addresses that can be formed by inserting dots into s. you are not allowed to reorder or remove any digits in s. you may return the valid ip addresses in any order.
an m x n board of characters and a list of strings words, return all words on the board.
word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. the same letter cell may not be used more than once in a word.
the root of a binary tree, return the postorder traversal of its nodes' values.
digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7).
example, "2582" is good because the digits (2 and 8) at even positions are even and the digits (5 and 2) at odd positions are prime. however, "3245" is not good because 3 is at an even index but is not even.
an integer n, return the total number of good digit strings of length n. since the answer may be large, return it modulo 109 + 7.
digit string is a string consisting of digits 0 through 9 that may contain leading zeros.
an array nums of integers, return the length of the longest arithmetic subsequence in nums.
that:
subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
sequence seq is arithmetic if seq[i + 1] - seq[i] are all the same value (for 0 <= i < seq.length - 1).
are given two 0-indexed integer arrays fronts and backs of length n, where the ith card has the positive integer fronts[i] printed on the front and backs[i] printed on the back. initially, each card is placed on a table such that the front number is facing up and the other is facing down. you may flip over any number of cards (possibly zero).
flipping the cards, an integer is considered good if it is facing down on some card and not facing up on any card.
the minimum possible good integer after flipping the cards. if there are no good integers, return 0.
are given the root of a binary tree with n nodes. each node is assigned a unique value from 1 to n. you are also given an array queries of size m.
have to perform m independent queries on the tree where in the ith query you do the following:
the subtree rooted at the node with the value queries[i] from the tree. it is guaranteed that queries[i] will not be equal to the value of the root.
an array answer of size m where answer[i] is the height of the tree after performing the ith query.

queries are independent, so the tree returns to its initial state after each query.
height of a tree is the number of edges in the longest simple path from the root to some node in the tree.
cell (r, c) of an excel sheet is represented as a string "<col><row>" where:
denotes the column number c of the cell. it is represented by alphabetical letters.
example, the 1st column is denoted by 'a', the 2nd by 'b', the 3rd by 'c', and so on.
is the row number r of the cell. the rth row is represented by the integer r.
are given a string s in the format "<col1><row1>:<col2><row2>", where <col1> represents the column c1, <row1> represents the row r1, <col2> represents the column c2, and <row2> represents the row r2, such that r1 <= r2 and c1 <= c2.
the list of cells (x, y) such that r1 <= x <= r2 and c1 <= y <= c2. the cells should be represented as strings in the format mentioned above and be sorted in non-decreasing order first by columns and then by rows.
are given a string num, which represents a large integer. you are also given a 0-indexed integer array change of length 10 that maps each digit 0-9 to another digit. more formally, digit d maps to digit change[d].
may choose to mutate a single substring of num. to mutate a substring, replace each digit num[i] with the digit it maps to in change (i.e. replace num[i] with change[num[i]]).
a string representing the largest possible integer after mutating (or choosing not to) a single substring of num.
substring is a contiguous sequence of characters within the string.
an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k.
value of |x| is defined as:
if x >= 0.
if x < 0.
are given an array nums. you can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]. afterward, any entries that are less than or equal to their index are worth one point.
example, if we have nums = [2,4,1,3,0], and we rotate by k = 2, it becomes [1,3,0,2,4]. this is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].
the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it. if there are multiple answers, return the smallest such index k.
an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). otherwise, return false.
may be duplicates in the original array.
an array a rotated by x positions results in an array b of the same length such that a[i] == b[(i+x) % a.length], where % is the modulo operation.
a palindromic string of lowercase english letters palindrome, replace exactly one character with any lowercase english letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible.
the resulting string. if there is no way to replace a character to make it not a palindrome, return an empty string.
string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, a has a character strictly smaller than the corresponding character in b. for example, "abcc" is lexicographically smaller than "abcd" because the first position they differ is at the fourth character, and 'c' is smaller than 'd'.
are given a 2d integer array rectangles where rectangles[i] = [li, hi] indicates that ith rectangle has a length of li and a height of hi. you are also given a 2d integer array points where points[j] = [xj, yj] is a point with coordinates (xj, yj).
ith rectangle has its bottom-left corner point at the coordinates (0, 0) and its top-right corner point at (li, hi).
an integer array count of length points.length where count[j] is the number of rectangles that contain the jth point.
ith rectangle contains the jth point if 0 <= xj <= li and 0 <= yj <= hi. note that points that lie on the edges of a rectangle are also considered to be contained by that rectangle.
and bob take turns playing a game, with alice starting first.
there are n stones in a pile. on each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile.
if a player cannot make a move, he/she loses the game.
a positive integer n, return true if and only if alice wins the game otherwise return false, assuming both players play optimally.
two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.
that the number of set bits an integer has is the number of 1's present when written in binary.
example, 21 written in binary is 10101, which has 3 set bits.
morse code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:
maps to ".-",
maps to "-...",
maps to "-.-.", and so on.
convenience, the full table for the 26 letters of the english alphabet is given below:

an array of strings words where each word can be written as a concatenation of the morse code of each letter.
example, "cab" can be written as "-.-..--...", which is the concatenation of "-.-.", ".-", and "-...". we will call such a concatenation the transformation of a word.
the number of different transformations among all words we have.
are given the head of a linked list.
nodes in the linked list are sequentially assigned to non-empty groups whose lengths form the sequence of the natural numbers (1, 2, 3, 4, ...). the length of a group is the number of nodes assigned to it. in other words,
1st node is assigned to the first group.
2nd and the 3rd nodes are assigned to the second group.
4th, 5th, and 6th nodes are assigned to the third group, and so on.
that the length of the last group may be less than or equal to 1 + the length of the second to last group.
the nodes in each group with an even length, and return the head of the modified linked list.
a positive integer millis, write an asyncronous function that sleeps for millis milliseconds. it can resolve any value.
an integer array nums and two integers firstlen and secondlen, return the maximum sum of elements in two non-overlapping subarrays with lengths firstlen and secondlen.
array with length firstlen could occur before or after the array with length secondlen, but they have to be non-overlapping.
subarray is a contiguous part of an array.
are given an array of equal-length strings words. assume that the length of each string is n.
string words[i] can be converted into a difference integer array difference[i] of length n - 1 where difference[i][j] = words[i][j+1] - words[i][j] where 0 <= j <= n - 2. note that the difference between two letters is the difference between their positions in the alphabet i.e. the position of 'a' is 0, 'b' is 1, and 'z' is 25.
example, for the string "acb", the difference integer array is [2 - 0, 1 - 2] = [2, -1].
the strings in words have the same difference integer array, except one. you should find that string.
the string in words that has different difference integer array.
are given a binary string s. you are allowed to perform two types of operations on the string in any sequence:
remove the character at the start of the string s and append it to the end of the string.
pick any character in s and flip its value, i.e., if its value is '0' it becomes '1' and vice-versa.
the minimum number of type-2 operations you need to perform such that s becomes alternating.
string is called alternating if no two adjacent characters are equal.
example, the strings "010" and "1010" are alternating, while the string "0100" is not.
a string columntitle that represents the column title as appears in an excel sheet, return its corresponding column number.
example:
-> 1
-> 2
-> 3

-> 26
-> 27
-> 28

are given a string text of words that are placed among some number of spaces. each word consists of one or more lowercase english letters and are separated by at least one space. it's guaranteed that text contains at least one word.
the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. if you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as text.
the string after rearranging the spaces.
bitwise and of an array nums is the bitwise and of all integers in nums.
example, for nums = [1, 5, 3], the bitwise and is equal to 1 & 5 & 3 = 1.
for nums = [7], the bitwise and is 7.
are given an array of positive integers candidates. evaluate the bitwise and of every combination of numbers of candidates. each number in candidates may only be used once in each combination.
the size of the largest combination of candidates with a bitwise and greater than 0.
are n people standing in a queue, and they numbered from 0 to n - 1 in left to right order. you are given an array heights of distinct integers where heights[i] represents the height of the ith person.
person can see another person to their right in the queue if everybody in between is shorter than both of them. more formally, the ith person can see the jth person if i < j and min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1]).
an array answer of length n where answer[i] is the number of people the ith person can see to their right in the queue.
are n piles of stones arranged in a row. the ith pile has stones[i] stones.
move consists of merging exactly k consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these k piles.
the minimum cost to merge all piles of stones into one pile. if it is impossible, return -1.
is a rooted tree consisting of n nodes numbered 0 to n - 1. each node's number denotes its unique genetic value (i.e. the genetic value of node x is x). the genetic difference between two genetic values is defined as the bitwise-xor of their values. you are given the integer array parents, where parents[i] is the parent for node i. if node x is the root of the tree, then parents[x] == -1.
are also given the array queries where queries[i] = [nodei, vali]. for each query i, find the maximum genetic difference between vali and pi, where pi is the genetic value of any node that is on the path between nodei and the root (including nodei and the root). more formally, you want to maximize vali xor pi.
an array ans where ans[i] is the answer to the ith query.
a sentence text (a sentence is a string of space-separated words) in the following format:
letter is in upper case.
word in text are separated by a single space.
task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths. if two words have the same length, arrange them in their original order.
the new text following the format shown above.
two positive integers left and right, find the two integers num1 and num2 such that:
<= nums1 < nums2 <= right .
and nums2 are both prime numbers.
- nums1 is the minimum amongst all other pairs satisfying the above conditions.
the positive integer array ans = [nums1, nums2]. if there are multiple pairs satisfying these conditions, return the one with the minimum nums1 value or [-1, -1] if such numbers do not exist.
number greater than 1 is called prime if it is only divisible by 1 and itself.
is a strange printer with the following two special properties:
printer can only print a sequence of the same character each time.
each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.
a string s, return the minimum number of turns the printer needed to print it.
are given an integer n. there is an undirected graph with n vertices, numbered from 0 to n - 1. you are given a 2d integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting vertices ai and bi.
the number of complete connected components of the graph.
connected component is a subgraph of a graph in which there exists a path between any two vertices, and no vertex of the subgraph shares an edge with a vertex outside of the subgraph.
connected component is said to be complete if there exists an edge between every pair of its vertices.
have a convex n-sided polygon where each vertex has an integer value. you are given an integer array values where values[i] is the value of the ith vertex (i.e., clockwise order).
will triangulate the polygon into n - 2 triangles. for each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all n - 2 triangles in the triangulation.
the smallest possible total score that you can achieve with some triangulation of the polygon.
two strings s and t, each of which represents a non-negative rational number, return true if and only if they represent the same number. the strings may use parentheses to denote the repeating part of the rational number.
rational number can be represented using up to three parts: <integerpart>, <nonrepeatingpart>, and a <repeatingpart>. the number will be represented in one of the following three ways:

example, 12, 0, and 123.

example, 0.5, 1., 2.12, and 123.0001.

example, 0.1(6), 1.(9), 123.00(1212).
repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. for example:
= 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66).
an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.
times are formatted as "hh:mm", where hh is between 00 and 23, and mm is between 00 and 59. the earliest 24-hour time is 00:00, and the latest is 23:59.
the latest 24-hour time in "hh:mm" format. if no valid time can be made, return an empty string.
are given a 0-indexed integer array nums of length n.
split at an index i where 0 <= i <= n - 2 is called valid if the product of the first i + 1 elements and the product of the remaining elements are coprime.
example, if nums = [2, 3, 3], then a split at the index i = 0 is valid because 2 and 9 are coprime, while a split at the index i = 1 is not valid because 6 and 3 are not coprime. a split at the index i = 2 is not valid because i == n - 1.
the smallest index i at which the array can be split validly or -1 if there is no such split.
values val1 and val2 are coprime if gcd(val1, val2) == 1 where gcd(val1, val2) is the greatest common divisor of val1 and val2.
median is the middle value in an ordered integer list. if the size of the list is even, there is no middle value. so the median is the mean of the two middle values.
examples, if arr = [2,3,4], the median is 3.
examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5.
are given an integer array nums and an integer k. there is a sliding window of size k which is moving from the very left of the array to the very right. you can only see the k numbers in the window. each time the sliding window moves right by one position.
the median array for each window in the original array. answers within 10-5 of the actual value will be accepted.
are climbing a staircase. it takes n steps to reach the top.
time you can either climb 1 or 2 steps. in how many distinct ways can you climb to the top?
are some robots and factories on the x-axis. you are given an integer array robot where robot[i] is the position of the ith robot. you are also given a 2d integer array factory where factory[j] = [positionj, limitj] indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots.
positions of each robot are unique. the positions of each factory are also unique. note that a robot can be in the same position as a factory initially.
the robots are initially broken; they keep moving in one direction. the direction could be the negative or the positive direction of the x-axis. when a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving.
any moment, you can set the initial direction of moving for some robot. your target is to minimize the total distance traveled by all the robots.
the minimum total distance traveled by all the robots. the test cases are generated such that all the robots can be repaired.
that
robots move at the same speed.
two robots move in the same direction, they will never collide.
two robots move in opposite directions and they meet at some point, they do not collide. they cross each other.
a robot passes by a factory that reached its limits, it crosses it as if it does not exist.
the robot moved from a position x to a position y, the distance it moved is |y - x|.
have observations of n + m 6-sided dice rolls with each face numbered from 1 to 6. n of the observations went missing, and you only have the observations of m rolls. fortunately, you have also calculated the average value of the n + m rolls.
are given an integer array rolls of length m where rolls[i] is the value of the ith observation. you are also given the two integers mean and n.
an array of length n containing the missing observations such that the average value of the n + m rolls is exactly mean. if there are multiple valid answers, return any of them. if no such array exists, return an empty array.
average value of a set of k numbers is the sum of the numbers divided by k.
that mean is an integer, so the sum of the n + m rolls should be divisible by n + m.
an integer num, return the number of digits in num that divide num.
integer val divides nums if nums % val == 0.
exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. you are given an integer n and a 2d integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. you are also given an array coins of size n where coins[i] can be either 0 or 1, where 1 indicates the presence of a coin in the vertex i.
you choose to start at any vertex in the tree. then, you can perform the following operations any number of times:
all the coins that are at a distance of at most 2 from the current vertex, or
to any adjacent vertex in the tree.
the minimum number of edges you need to go through to collect all the coins and go back to the initial vertex.
that if you pass an edge several times, you need to count it into the answer several times.
an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).
ans is the concatenation of two nums arrays.
the array ans.
a string s, return true if s is a good string, or false otherwise.
string s is good if all the characters that appear in s have the same number of occurrences (i.e., the same frequency).
this is a companion problem to the system design problem: design tinyurl.
is a url shortening service where you enter a url such as https://leetcode.com/problems/design-tinyurl and it returns a short url such as http://tinyurl.com/4e9iak. design a class to encode a url and decode a tiny url.
is no restriction on how your encode/decode algorithm should work. you just need to ensure that a url can be encoded to a tiny url and the tiny url can be decoded to the original url.
the solution class:
initializes the object of the system.
encode(string longurl) returns a tiny url for the given longurl.
decode(string shorturl) returns the original long url for the given shorturl. it is guaranteed that the given shorturl was encoded by the same object.
are given a binary array nums (0-indexed).
define xi as the number whose binary representation is the subarray nums[0..i] (from most-significant-bit to least-significant-bit).
example, if nums = [1,0,1], then x0 = 1, x1 = 2, and x2 = 5.
an array of booleans answer where answer[i] is true if xi is divisible by 5.
an integer n, you must transform it into 0 using the following operations any number of times:
the rightmost (0th) bit in the binary representation of n.
the ith bit in the binary representation of n if the (i-1)th bit is set to 1 and the (i-2)th through 0th bits are set to 0.
the minimum number of operations to transform n into 0.
an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.
are given an n x n integer matrix board where the cells are labeled from 1 to n2 in a boustrophedon style starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.
start on square 1 of the board. in each move, starting from square curr, do the following:
a destination square next with a label in the range [curr + 1, min(curr + 6, n2)].
choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.
next has a snake or ladder, you must move to the destination of that snake or ladder. otherwise, you move to next.
game ends when you reach the square n2.
board square on row r and column c has a snake or ladder if board[r][c] != -1. the destination of that snake or ladder is board[r][c]. squares 1 and n2 do not have a snake or ladder.
that you only take a snake or ladder at most once per move. if the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent snake or ladder.
example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. you follow the ladder to square 3, but do not follow the subsequent ladder to 4.
the least number of moves required to reach the square n2. if it is not possible to reach the square, return -1.
are given two arrays of integers nums1 and nums2, possibly of different lengths. the values in the arrays are between 1 and 6, inclusive.
one operation, you can change any integer's value in any of the arrays to any value between 1 and 6, inclusive.
the minimum number of operations required to make the sum of values in nums1 equal to the sum of values in nums2. return -1 if it is not possible to make the sum of the two arrays equal.
robot on an infinite xy-plane starts at point (0, 0) facing north. the robot can receive a sequence of these three possible types of commands:
turn left 90 degrees.
turn right 90 degrees.
<= k <= 9: move forward k units, one unit at a time.
of the grid squares are obstacles. the ith obstacle is at grid point obstacles[i] = (xi, yi). if the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command.
the maximum euclidean distance that the robot ever gets from the origin squared (i.e. if the distance is 5, return 25).

means +y direction.
means +x direction.
means -y direction.
means -x direction.
a 0-indexed integer array nums, find the leftmost middleindex (i.e., the smallest amongst all the possible ones).
middleindex is an index where nums[0] + nums[1] + ... + nums[middleindex-1] == nums[middleindex+1] + nums[middleindex+2] + ... + nums[nums.length-1].
middleindex == 0, the left side sum is considered to be 0. similarly, if middleindex == nums.length - 1, the right side sum is considered to be 0.
the leftmost middleindex that satisfies the condition, or -1 if there is no such index.
a string s, partition the string into one or more substrings such that the characters in each substring are unique. that is, no letter appears in a single substring more than once.
the minimum number of substrings in such a partition.
that each character should belong to exactly one substring in a partition.
a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /). for example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3.
writing such an expression, we adhere to the following conventions:
division operator (/) returns rational numbers.
are no parentheses placed anywhere.
use the usual order of operations: multiplication and division happen before addition and subtraction.
is not allowed to use the unary negation operator (-). for example, "x - x" is a valid expression as it only uses subtraction, but "-x + x" is not because it uses negation.
would like to write an expression with the least number of operators such that the expression equals the given target. return the least number of operators used.
are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
nums1 and nums2 into a single array sorted in non-decreasing order.
final sorted array should not be returned by the function, but instead be stored inside the array nums1. to accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.
an array of digits digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. if there is no answer return an empty string.
the answer may not fit in an integer data type, return the answer as a string. note that the returning answer must not contain unnecessary leading zeros.
have an inventory of different colored balls, and there is a customer that wants orders balls of any color.
customer weirdly values the colored balls. each colored ball's value is the number of balls of that color you currently have in your inventory. for example, if you own 6 yellow balls, the customer would pay 6 for the first yellow ball. after the transaction, there are only 5 yellow balls left, so the next yellow ball is then valued at 5 (i.e., the value of the balls decreases as you sell more to the customer).
are given an integer array, inventory, where inventory[i] represents the number of balls of the ith color that you initially own. you are also given an integer orders, which represents the total number of balls that the customer wants. you can sell the balls in any order.
the maximum total value that you can attain after selling orders colored balls. as the answer may be too large, return it modulo 109 + 7.
have k bags. you are given a 0-indexed integer array weights where weights[i] is the weight of the ith marble. you are also given the integer k.
the marbles into the k bags according to the following rules:
bag is empty.
the ith marble and jth marble are in a bag, then all marbles with an index between the ith and jth indices should also be in that same bag.
a bag consists of all the marbles with an index from i to j inclusively, then the cost of the bag is weights[i] + weights[j].
score after distributing the marbles is the sum of the costs of all the k bags.
the difference between the maximum and minimum scores among marble distributions.
are given an array people where people[i] is the weight of the ith person, and an infinite number of boats where each boat can carry a maximum weight of limit. each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.
the minimum number of boats to carry every given person.
are given a positive integer array skill of even length n where skill[i] denotes the skill of the ith player. divide the players into n / 2 teams of size 2 such that the total skill of each team is equal.
chemistry of a team is equal to the product of the skills of the players on that team.
the sum of the chemistry of all the teams, or return -1 if there is no way to divide the players into teams such that the total skill of each team is equal.
sentence is a list of words that are separated by a single space with no leading or trailing spaces. each word consists of lowercase and uppercase english letters.
sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.
example, the sentence "this is a sentence" can be shuffled as "sentence4 a3 is2 this1" or "is2 sentence4 this1 a3".
a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.
are given two strings start and target, both of length n. each string consists only of the characters 'l', 'r', and '_' where:
characters 'l' and 'r' represent pieces, where a piece 'l' can move to the left only if there is a blank space directly to its left, and a piece 'r' can move to the right only if there is a blank space directly to its right.
character '_' represents a blank space that can be occupied by any of the 'l' or 'r' pieces.
true if it is possible to obtain the string target by moving the pieces of the string start any number of times. otherwise, return false.
two integers a and b, return any string s such that:
has length a + b and contains exactly a 'a' letters, and exactly b 'b' letters,
substring 'aaa' does not occur in s, and
substring 'bbb' does not occur in s.
are given an integer array nums.
should move each element of nums into one of the two arrays a and b such that a and b are non-empty, and average(a) == average(b).
true if it is possible to achieve that and false otherwise.
that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr.
are two types of soup: type a and type b. initially, we have n ml of each type of soup. there are four kinds of operations:
100 ml of soup a and 0 ml of soup b,
75 ml of soup a and 25 ml of soup b,
50 ml of soup a and 50 ml of soup b, and
25 ml of soup a and 75 ml of soup b.
we serve some soup, we give it to someone, and we no longer have it. each turn, we will choose from the four operations with an equal probability 0.25. if the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. we stop once we no longer have some quantity of both types of soup.
that we do not have an operation where all 100 ml's of soup b are used first.
the probability that soup a will be empty first, plus half the probability that a and b become empty at the same time. answers within 10-5 of the actual answer will be accepted.
are given an m x n binary matrix grid where each cell is either 0 (empty) or 1 (occupied).
are then given stamps of size stampheight x stampwidth. we want to fit the stamps such that they follow the given restrictions and requirements:
all the empty cells.
not cover any of the occupied cells.
can put as many stamps as we want.
can overlap with each other.
are not allowed to be rotated.
must stay completely inside the grid.
true if it is possible to fit the stamps while following the given restrictions and requirements. otherwise, return false.
are given a m x n matrix grid. initially, you are located at the top-left corner (0, 0), and in each step, you can only move right or down in the matrix.
all possible paths starting from the top-left corner (0, 0) and ending in the bottom-right corner (m - 1, n - 1), find the path with the maximum non-negative product. the product of a path is the product of all integers in the grid cells visited along the path.
the maximum non-negative product modulo 109 + 7. if the maximum product is negative, return -1.
that the modulo is performed after getting the maximum product.
are given n tasks labeled from 0 to n - 1 represented by a 2d integer array tasks, where tasks[i] = [enqueuetimei, processingtimei] means that the ith task will be available to process at enqueuetimei and will take processingtimei to finish processing.
have a single-threaded cpu that can process at most one task at a time and will act in the following way:
the cpu is idle and there are no available tasks to process, the cpu remains idle.
the cpu is idle and there are available tasks, the cpu will choose the one with the shortest processing time. if multiple tasks have the same shortest processing time, it will choose the task with the smallest index.
a task is started, the cpu will process the entire task without stopping.
cpu can finish a task then start a new one instantly.
the order in which the cpu will process the tasks.
are n children standing in a line. each child is assigned a rating value given in the integer array ratings.
are giving candies to these children subjected to the following requirements:
child must have at least one candy.
with a higher rating get more candies than their neighbors.
the minimum number of candies you need to have to distribute the candies to the children.
are given two positive integer arrays spells and potions, of length n and m respectively, where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion.
are also given an integer success. a spell and potion pair is considered successful if the product of their strengths is at least success.
an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell.
a positive integer n, find the sum of all integers in the range [1, n] inclusive that are divisible by 3, 5, or 7.
an integer denoting the sum of all numbers in the given range satisfying the constraint.
are given a 0-indexed integer array tasks, where tasks[i] represents the difficulty level of a task. in each round, you can complete either 2 or 3 tasks of the same difficulty level.
the minimum rounds required to complete all the tasks, or -1 if it is not possible to complete all the tasks.
are given a 0-indexed integer array nums and an integer value.
one operation, you can add or subtract value from any element of nums.
example, if nums = [1,2,3] and value = 2, you can choose to subtract value from nums[0] to make nums = [-1,2,3].
mex (minimum excluded) of an array is the smallest missing non-negative integer in it.
example, the mex of [-1,2,3] is 0 while the mex of [1,0,3] is 2.
the maximum mex of nums after applying the mentioned operation any number of times.
stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100th row. each glass holds one cup of champagne.
some champagne is poured into the first glass at the top. when the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it. when those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on. (a glass at the bottom row has its excess champagne fall on the floor.)
example, after one cup of champagne is poured, the top most glass is full. after two cups of champagne are poured, the two glasses on the second row are half full. after three cups of champagne are poured, those two cups become full - there are 3 full glasses total now. after four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.
after pouring some non-negative integer cups of champagne, return how full the jth glass in the ith row is (both i and j are 0-indexed.)
are given a 0-indexed integer array nums. you can rearrange the elements of nums to any order (including the given order).
prefix be the array containing the prefix sums of nums after rearranging it. in other words, prefix[i] is the sum of the elements from 0 to i in nums after rearranging it. the score of nums is the number of positive integers in the array prefix.
the maximum score you can achieve.
a given equation and return the value of 'x' in the form of a string "x=#value". the equation contains only '+', '-' operation, the variable 'x' and its coefficient. you should return "no solution" if there is no solution for the equation, or "infinite solutions" if there are infinite solutions for the equation.
there is exactly one solution for the equation, we ensure that the value of 'x' is an integer.
a pattern and a string s, find if s follows the same pattern.
follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.
are implementing a program to use as your calendar. we can add a new event if adding the event will not cause a triple booking.
triple booking happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).
event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.
the mycalendartwo class:
initializes the calendar object.
book(int start, int end) returns true if the event can be added to the calendar successfully without causing a triple booking. otherwise, return false and do not add the event to the calendar.
k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k.
example, 9 is a 2-mirror number. the representation of 9 in base-10 and base-2 are 9 and 1001 respectively, which read the same both forward and backward.
the contrary, 4 is not a 2-mirror number. the representation of 4 in base-2 is 100, which does not read the same both forward and backward.
the base k and the number n, return the sum of the n smallest k-mirror numbers.
a string s, return the maximum number of unique substrings that the given string can be split into.
can split string s into any list of non-empty substrings, where the concatenation of the substrings forms the original string. however, you must split the substrings such that all of them are unique.
substring is a contiguous sequence of characters within a string.
the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). it can be proven that there is a unique answer.
the root of the trimmed binary search tree. note that the root may change depending on the given bounds.
is a special typewriter with lowercase english letters 'a' to 'z' arranged in a circle with a pointer. a character can only be typed if the pointer is pointing to that character. the pointer is initially pointing to the character 'a'.
second, you may perform one of the following operations:
the pointer one character counterclockwise or clockwise.
the character the pointer is currently on.
a string word, return the minimum number of seconds to type out the characters in word.
may recall that an array arr is a mountain array if and only if:
>= 3
exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
< arr[1] < ... < arr[i - 1] < arr[i]
> arr[i + 1] > ... > arr[arr.length - 1]
an integer array nums, return the minimum number of elements to remove to make nums a mountain array.
variance of a string is defined as the largest difference between the number of occurrences of any 2 characters present in the string. note the two characters may or may not be the same.
a string s consisting of lowercase english letters only, return the largest variance possible among all substrings of s.
substring is a contiguous sequence of characters within a string.
are given an array of integers nums. you are also given an integer original which is the first number that needs to be searched for in nums.
then do the following steps:
original is found in nums, multiply it by two (i.e., set original = 2 * original).
stop the process.
this process with the new number as long as you keep finding the number.
the final value of original.
pangram is a sentence where every letter of the english alphabet appears at least once.
a string sentence containing only lowercase english letters, return true if sentence is a pangram, or false otherwise.
an integer n, return a string array answer (1-indexed) where:
== "fizzbuzz" if i is divisible by 3 and 5.
== "fizz" if i is divisible by 3.
== "buzz" if i is divisible by 5.
== i (as a string) if none of the above conditions are true.
an integer n, return all the structurally unique bst's (binary search trees), which has exactly n nodes of unique values from 1 to n. return the answer in any order.
a binary string s, return the number of substrings with all characters 1's. since the answer may be too large, return it modulo 109 + 7.
a 0-indexed integer array nums, return the smallest index i of nums such that i mod 10 == nums[i], or -1 if such index does not exist.
mod y denotes the remainder when x is divided by y.
two integers left and right that represent the range [left, right], return the bitwise and of all numbers in this range, inclusive.
four integers length, width, height, and mass, representing the dimensions and mass of a box, respectively, return a string representing the category of the box.
box is "bulky" if:
of the dimensions of the box is greater or equal to 104.
the volume of the box is greater or equal to 109.
the mass of the box is greater or equal to 100, it is "heavy".
the box is both "bulky" and "heavy", then its category is "both".
the box is neither "bulky" nor "heavy", then its category is "neither".
the box is "bulky" but not "heavy", then its category is "bulky".
the box is "heavy" but not "bulky", then its category is "heavy".
that the volume of the box is the product of its length, width and height.
the root of a binary tree, invert the tree, and return its root.
the root of a binary tree, return the length of the longest path, where each node in the path has the same value. this path may or may not pass through the root.
length of the path between two nodes is represented by the number of edges between them.
are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].
should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... } subjected to the following rule:
first element in s[k] starts with the selection of the element nums[k] of index = k.
next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on.
stop adding right before a duplicate element occurs in s[k].
the longest length of a set s[k].
are given a very large integer n, represented as a string, and an integer digit x. the digits in n and the digit x are in the inclusive range [1, 9], and n may represent a negative number.
want to maximize n's numerical value by inserting x anywhere in the decimal representation of n. you cannot insert x to the left of the negative sign.
example, if n = 73 and x = 6, it would be best to insert it between 7 and 3, making n = 763.
n = -55 and x = 2, it would be best to insert it before the first 5, making n = -255.
a string representing the maximum value of n after the insertion.
are given a string num, representing a large integer. return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string "" if no odd integer exists.
substring is a contiguous sequence of characters within a string.
are given two 0-indexed strings word1 and word2.
move consists of choosing two indices i and j such that 0 <= i < word1.length and 0 <= j < word2.length and swapping word1[i] with word2[j].
true if it is possible to get the number of distinct characters in word1 and word2 to be equal with exactly one move. return false otherwise.
are given two positive integer arrays nums1 and nums2, both of length n.
absolute sum difference of arrays nums1 and nums2 is defined as the sum of |nums1[i] - nums2[i]| for each 0 <= i < n (0-indexed).
can replace at most one element of nums1 with any other element in nums1 to minimize the absolute sum difference.
the minimum absolute sum difference after replacing at most one element in the array nums1. since the answer may be large, return it modulo 109 + 7.
is defined as:
if x >= 0, or
if x < 0.
scenic location is represented by its name and attractiveness score, where name is a unique string among all locations and score is an integer. locations can be ranked from the best to the worst. the higher the score, the better the location. if the scores of two locations are equal, then the location with the lexicographically smaller name is better.
are building a system that tracks the ranking of locations with the system initially starting with no locations. it supports:
scenic locations, one at a time.
the ith best location of all locations already added, where i is the number of times the system has been queried (including the current query).
example, when the system is queried for the 4th time, it returns the 4th best location of all locations already added.
that the test data are generated so that at any time, the number of queries does not exceed the number of locations added to the system.
the sortracker class:
initializes the tracker system.
add(string name, int score) adds a scenic location with name and score to the system.
get() queries and returns the ith best location, where i is the number of times this method has been invoked (including this invocation).
a positive integer num, return the number of positive integers less than or equal to num whose digit sums are even.
digit sum of a positive integer is the sum of all its digits.
are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].
have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. you begin the journey with an empty tank at one of the gas stations.
two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. if there exists a solution, it is guaranteed to be unique
are given an m x n binary grid, where each 1 represents a brick and 0 represents an empty space. a brick is stable if:
is directly connected to the top of the grid, or
least one other brick in its four adjacent cells is stable.
are also given an array hits, which is a sequence of erasures we want to apply. each time we want to erase the brick at the location hits[i] = (rowi, coli). the brick on that location (if it exists) will disappear. some other bricks may no longer be stable because of that erasure and will fall. once a brick falls, it is immediately erased from the grid (i.e., it does not land on other stable bricks).
an array result, where each result[i] is the number of bricks that will fall after the ith erasure is applied.
that an erasure may refer to a location with no brick, and if it does, no bricks drop.
two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.
the root of a binary tree, return the lowest common ancestor of its deepest leaves.
that:
node of a binary tree is a leaf if and only if it has no children
depth of the root of the tree is 0. if the depth of a node is d, the depth of each of its children is d + 1.
lowest common ancestor of a set s of nodes, is the node a with the largest depth such that every node in s is in the subtree with root a.
are given two strings s and t.
t is generated by random shuffling string s and then add one more letter at a random position.
the letter that was added to t.
are given an array asteroids of integers representing asteroids in a row.
each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). each asteroid moves at the same speed.
out the state of the asteroids after all collisions. if two asteroids meet, the smaller one will explode. if both are the same size, both will explode. two asteroids moving in the same direction will never meet.
are given a positive integer n, you can do the following operation any number of times:
or subtract a power of 2 from n.
the minimum number of operations to make n equal to 0.
number x is power of 2 if x == 2i where i >= 0.
set [1, 2, 3, ..., n] contains a total of n! unique permutations.
listing and labeling all of the permutations in order, we get the following sequence for n = 3:






n and k, return the kth permutation sequence.
a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.
subarray is a contiguous part of the array.
are given an integer array nums and an integer k. you can partition the array into at most k non-empty adjacent subarrays. the score of a partition is the sum of the averages of each subarray.
that the partition must use every integer in nums, and that the score is not necessarily an integer.
the maximum score you can achieve of all the possible partitions. answers within 10-6 of the actual answer will be accepted.
are given the root of a binary search tree (bst) and an integer val.
the node in the bst that the node's value equals val and return the subtree rooted with that node. if such a node does not exist, return null.
are given a 2d array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.
envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.
the maximum number of envelopes you can russian doll (i.e., put one inside the other).
you cannot rotate an envelope.
are given a 0-indexed integer array nums of even length.
long as nums is not empty, you must repetitively:
the minimum number in nums and remove it.
the maximum number in nums and remove it.
the average of the two removed numbers.
average of two numbers a and b is (a + b) / 2.
example, the average of 2 and 3 is (2 + 3) / 2 = 2.5.
the number of distinct averages calculated using the above process.
that when there is a tie for a minimum or maximum number, any can be removed.
sentence is a list of words that are separated by a single space with no leading or trailing spaces.
are given an array of strings sentences, where each sentences[i] represents a single sentence.
the maximum number of words that appear in a single sentence.
are given an array of strings of the same length words.
one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i].
strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j].
example, words[i] = "zzxy" and words[j] = "xyzz" are special-equivalent because we may make the moves "zzxy" -> "xzzy" -> "xyzz".
group of special-equivalent strings from words is a non-empty subset of words such that:
pair of strings in the group are special equivalent, and
group is the largest size possible (i.e., there is not a string words[i] not in the group such that words[i] is special-equivalent to every string in the group).
the number of groups of special-equivalent strings from words.
transformation sequence from word beginword to word endword using a dictionary wordlist is a sequence of words beginword -> s1 -> s2 -> ... -> sk such that:
adjacent pair of words differs by a single letter.
si for 1 <= i <= k is in wordlist. note that beginword does not need to be in wordlist.
== endword
two words, beginword and endword, and a dictionary wordlist, return the number of words in the shortest transformation sequence from beginword to endword, or 0 if no such sequence exists.
and bob have a different total number of candies. you are given two integer arrays alicesizes and bobsizes where alicesizes[i] is the number of candies of the ith box of candy that alice has and bobsizes[j] is the number of candies of the jth box of candy that bob has.
they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. the total amount of candy a person has is the sum of the number of candies in each box they have.
an integer array answer where answer[0] is the number of candies in the box that alice must exchange, and answer[1] is the number of candies in the box that bob must exchange. if there are multiple answers, you may return any one of them. it is guaranteed that at least one answer exists.
schema
activity

column name | type |

user_id | int |
session_id | int |
activity_date | date |
activity_type | enum |

is no primary key for this table, it may have duplicate rows.
activity_type column is an enum of type ('open_session', 'end_session', 'scroll_down', 'send_message').
table shows the user activities for a social media website.
that each session belongs to exactly one user.
an sql query to find the daily active user count for a period of 30 days ending 2019-07-27 inclusively. a user was active on someday if they made at least one activity on that day.
the result table in any order.
query result format is in the following example.
an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target.
the answer can be very large, return it modulo 109 + 7.
is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). the edges in the graph are represented as a 2d integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. every vertex pair is connected by at most one edge, and no vertex has an edge to itself.
want to determine if there is a valid path that exists from vertex source to vertex destination.
edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.
are given a 0-indexed string hamsters where hamsters[i] is either:
indicating that there is a hamster at index i, or
indicating that index i is empty.
will add some number of food buckets at the empty indices in order to feed the hamsters. a hamster can be fed if there is at least one food bucket to its left or to its right. more formally, a hamster at index i can be fed if you place a food bucket at index i - 1 and/or at index i + 1.
the minimum number of food buckets you should place at empty indices to feed all the hamsters or -1 if it is impossible to feed all of them.
are given an array nums and an integer k. the xor of a segment [left, right] where left <= right is the xor of all the elements with indices between left and right, inclusive: nums[left] xor nums[left+1] xor ... xor nums[right].
the minimum number of elements to change in the array such that the xor of all segments of size k is equal to zero.
positive integer is magical if it is divisible by either a or b.
the three integers n, a, and b, return the nth magical number. since the answer may be very large, return it modulo 109 + 7.
a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.
an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
<= a, b, c, d < n
b, c, and d are distinct.
+ nums[b] + nums[c] + nums[d] == target
may return the answer in any order.
are given an m x n matrix maze (0-indexed) with empty cells (represented as '.') and walls (represented as '+'). you are also given the entrance of the maze, where entrance = [entrancerow, entrancecol] denotes the row and column of the cell you are initially standing at.
one step, you can move one cell up, down, left, or right. you cannot step into a cell with a wall, and you cannot step outside the maze. your goal is to find the nearest exit from the entrance. an exit is defined as an empty cell that is at the border of the maze. the entrance does not count as an exit.
the number of steps in the shortest path from the entrance to the nearest exit, or -1 if no such path exists.
the number of distinct non-empty substrings of text that can be written as the concatenation of some string with itself (i.e. it can be written as a + a where a is some string).
bus has n stops numbered from 0 to n - 1 that form a circle. we know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number i and (i + 1) % n.
bus goes along both directions i.e. clockwise and counterclockwise.
the shortest distance between the given start and destination stops.
an array of asyncronous functions functions and a pool limit n, return an asyncronous function promisepool. it should return a promise that resolves when all the input functions resolve.
limit is defined as the maximum number promises that can be pending at once. promisepool should begin execution of as many functions as possible and continue executing new functions when old promises resolve. promisepool should execute functions[i] then functions[i + 1] then functions[i + 2], etc. when the last promise resolves, promisepool should also resolve.
example, if n = 1, promisepool will execute one function at a time in series. however, if n = 2, it first executes two functions. when either of the two functions resolve, a 3rd function should be executed (if available), and so on until there are no functions left to execute.
can assume all functions never reject. it is acceptable for promisepool to return a promise that resolves any value.
are given several boxes with different colors represented by different positive numbers.
may experience several rounds to remove boxes until there is no box left. each time you can choose some continuous boxes with the same color (i.e., composed of k boxes, k >= 1), remove them and get k * k points.
the maximum points you can get.
are given a 2d matrix of size m x n, consisting of non-negative integers. you are also given an integer k.
value of coordinate (a, b) of the matrix is the xor of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n (0-indexed).
the kth largest value (1-indexed) of all the coordinates of matrix.
schema
students

column name | type |

student_id | int |
student_name | varchar |

is the primary key for this table.
row of this table contains the id and the name of one student in the school.
subjects

column name | type |

subject_name | varchar |

is the primary key for this table.
row of this table contains the name of one subject in the school.
examinations

column name | type |

student_id | int |
subject_name | varchar |

is no primary key for this table. it may contain duplicates.
student from the students table takes every course from the subjects table.
row of this table indicates that a student with id student_id attended the exam of subject_name.
an sql query to find the number of times each student attended each exam.
the result table ordered by student_id and subject_name.
query result format is in the following example.
are given an array target of n integers. from a starting array arr consisting of n 1's, you may perform the following procedure :
x be the sum of all elements currently in your array.
index i, such that 0 <= i < n and set the value of arr at index i to x.
may repeat this procedure as many times as needed.
true if it is possible to construct the target array from arr, otherwise, return false.
an integer rowindex, return the rowindexth (0-indexed) row of the pascal's triangle.
pascal's triangle, each number is the sum of the two numbers directly above it as shown:
a food rating system that can do the following:
the rating of a food item listed in the system.
the highest-rated food item for a type of cuisine in the system.
the foodratings class:
foods, string[] cuisines, int[] ratings) initializes the system. the food items are described by foods, cuisines and ratings, all of which have a length of n.
is the name of the ith food,
is the type of cuisine of the ith food, and
is the initial rating of the ith food.
changerating(string food, int newrating) changes the rating of the food item with the name food.
highestrated(string cuisine) returns the name of the food item that has the highest rating for the given type of cuisine. if there is a tie, return the item with the lexicographically smaller name.
that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.
complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.
example, the integer 5 is "101" in binary and its complement is "010" which is the integer 2.
an integer num, return its complement.
the head of a singly linked list, return true if it is a

false otherwise.
is a family tree rooted at 0 consisting of n nodes numbered 0 to n - 1. you are given a 0-indexed integer array parents, where parents[i] is the parent for node i. since node 0 is the root, parents[0] == -1.
are 105 genetic values, each represented by an integer in the inclusive range [1, 105]. you are given a 0-indexed integer array nums, where nums[i] is a distinct genetic value for node i.
an array ans of length n where ans[i] is the smallest genetic value that is missing from the subtree rooted at node i.
subtree rooted at a node x contains node x and all of its descendant nodes.
are given an integer n representing the size of a 0-indexed memory array. all memory units are initially free.
have a memory allocator with the following functionalities:
a block of size consecutive free memory units and assign it the id mid.
all memory units with the given id mid.
that:
blocks can be allocated to the same mid.
should free all the memory units with mid, even if they were allocated in different blocks.
the allocator class:
n) initializes an allocator object with a memory array of size n.
allocate(int size, int mid) find the leftmost block of size consecutive free memory units and allocate it with the id mid. return the block's first index. if such a block does not exist, return -1.
free(int mid) free all memory units with the id mid. return the number of memory units you have freed.
are given a string title consisting of one or more words separated by a single space, where each word consists of english letters. capitalize the string by changing the capitalization of each word such that:
the length of the word is 1 or 2 letters, change all letters to lowercase.
change the first letter to uppercase and the remaining letters to lowercase.
the capitalized title.
are given a string s of length n where s[i] is either:
means decreasing, or
means increasing.
permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i:
s[i] == 'd', then perm[i] > perm[i + 1], and
s[i] == 'i', then perm[i] < perm[i + 1].
the number of valid permutations perm. since the answer may be large, return it modulo 109 + 7.
are given two positive integers n and k. a factor of an integer n is defined as an integer i where n % i == 0.
a list of all factors of n sorted in ascending order, return the kth factor in this list or return -1 if n has less than k factors.
concert hall has n rows numbered from 0 to n - 1, each with m seats, numbered from 0 to m - 1. you need to design a ticketing system that can allocate seats in the following cases:
a group of k spectators can sit together in a row.
every member of a group of k spectators can get a seat. they may or may not sit together.
that the spectators are very picky. hence:
will book seats only if each member of their group can get a seat with row number less than or equal to maxrow. maxrow can vary from group to group.
case there are multiple rows to choose from, the row with the smallest number is chosen. if there are multiple seats to choose in the same row, the seat with the smallest number is chosen.
the bookmyshow class:
n, int m) initializes the object with n as number of rows and m as number of seats per row.
gather(int k, int maxrow) returns an array of length 2 denoting the row and seat number (respectively) of the first seat being allocated to the k members of the group, who must sit together. in other words, it returns the smallest possible r and c such that all [c, c + k - 1] seats are valid and empty in row r, and r <= maxrow. returns [] in case it is not possible to allocate seats to the group.
scatter(int k, int maxrow) returns true if all k members of the group can be allocated seats in rows 0 to maxrow, who may or may not sit together. if the seats can be allocated, it allocates k seats to the group with the smallest row numbers, and the smallest possible seat numbers in each row. otherwise, returns false.
the array favoritecompanies where favoritecompanies[i] is the list of favorites companies for the ith person (indexed from 0).
the indices of people whose list of favorite companies is not a subset of any other list of favorites companies. you must return the indices in increasing order.
are given a 2d integer array tiles where tiles[i] = [li, ri] represents that every tile j in the range li <= j <= ri is colored white.
are also given an integer carpetlen, the length of a single carpet that can be placed anywhere.
the maximum number of white tiles that can be covered by the carpet.
a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. you may return the answer in any order.
test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.
have n super washing machines on a line. initially, each washing machine has some dresses or is empty.
each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.
an integer array machines representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses. if it is not possible to do it, return -1.
the integers zero, one, low, and high, we can construct a string by starting with an empty string, and then at each step perform either of the following:
the character '0' zero times.
the character '1' one times.
can be performed any number of times.
good string is a string constructed by the above process having a length between low and high (inclusive).
the number of different good strings that can be constructed satisfying these properties. since the answer can be large, return it modulo 109 + 7.
are given a personal information string s, representing either an email address or a phone number. return the masked personal information using the below rules.
address:
email address is:
name consisting of uppercase and lowercase english letters, followed by
'@' symbol, followed by
domain consisting of uppercase and lowercase english letters with a dot '.' somewhere in the middle (not the first or last character).
mask an email:
uppercase letters in the name and domain must be converted to lowercase letters.
middle letters of the name (i.e., all but the first and last letters) must be replaced by 5 asterisks "*****".
number:
phone number is formatted as follows:
phone number contains 10-13 digits.
last 10 digits make up the local number.
remaining 0-3 digits, in the beginning, make up the country code.
characters from the set {'+', '-', '(', ')', ' '} separate the above digits in some way.
mask a phone number:
all separation characters.
masked phone number should have the form:
if the country code has 0 digits.
if the country code has 1 digit.
if the country code has 2 digits.
if the country code has 3 digits.
is the last 4 digits of the local number.
password is considered strong if the below conditions are all met:
has at least 6 characters and at most 20 characters.
contains at least one lowercase letter, at least one uppercase letter, and at least one digit.
does not contain three repeating characters in a row (i.e., "baaabb0" is weak, but "baaba0" is strong).
a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.
one step, you can:
one character to password,
one character from password, or
one character of password with another character.
are given a 0-indexed 2d integer array of events where events[i] = [starttimei, endtimei, valuei]. the ith event starts at starttimei and ends at endtimei, and if you attend this event, you will receive a value of valuei. you can choose at most two non-overlapping events to attend such that the sum of their values is maximized.
this maximum sum.
that the start time and end time is inclusive: that is, you cannot attend two events where one of them starts and the other ends at the same time. more specifically, if you attend an event with end time t, the next event must start at or after t + 1.
an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. you may return the combinations in any order.
same number may be chosen from candidates an unlimited number of times. two combinations are unique if the

at least one of the chosen numbers is different.
test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.
are given a 0-indexed 2d integer array transactions, where transactions[i] = [costi, cashbacki].
array describes transactions, where each transaction must be completed exactly once in some order. at any given moment, you have a certain amount of money. in order to complete transaction i, money >= costi must hold true. after performing a transaction, money becomes money - costi + cashbacki.
the minimum amount of money required before any transaction so that all of the transactions can be completed regardless of the order of the transactions.
are given a 0-indexed integer array nums, where nums[i] represents the score of the ith student. you are also given an integer k.
the scores of any k students from the array so that the difference between the highest and the lowest of the k scores is minimized.
the minimum possible difference.
schema
logs

column name | type |

id | int |
num | varchar |

is the primary key for this table.
is an autoincrement column.
an sql query to find all numbers that appear at least three times consecutively.
the result table in any order.
query result format is in the following example.
an array of integers arr.
want to select three indices i, j and k where (0 <= i < j <= k < arr.length).
define a and b as follows:
= arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]
= arr[j] ^ arr[j + 1] ^ ... ^ arr[k]
that ^ denotes the bitwise-xor operation.
the number of triplets (i, j and k) where a == b.
the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. return the linked list sorted as well.
are buckets buckets of liquid, where exactly one of the buckets is poisonous. to figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. unfortunately, you only have minutestotest minutes to determine which bucket is poisonous.
can feed the pigs according to these steps:
some live pigs to feed.
each pig, choose which buckets to feed it. the pig will consume all the chosen buckets simultaneously and will take no time. each pig can feed from any number of buckets, and each bucket can be fed from by any number of pigs.
for minutestodie minutes. you may not feed any other pigs during this time.
minutestodie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.
this process until you run out of time.
buckets, minutestodie, and minutestotest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.
are given an n x n grid where you have placed some 1 x 1 x 1 cubes. each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).
placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3d shapes.
the total surface area of the resulting shapes.
the bottom face of each shape counts toward its surface area.
are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.
right interval for an interval i is an interval j such that startj >= endi and startj is minimized. note that i may equal j.
an array of right interval indices for each interval i. if no right interval exists for interval i, then put -1 at index i.
are given an array words of size n consisting of non-empty strings.
define the score of a string word as the number of strings words[i] such that word is a prefix of words[i].
example, if words = ["a", "ab", "abc", "cab"], then the score of "ab" is 2, since "ab" is a prefix of both "ab" and "abc".
an array answer of size n where answer[i] is the sum of scores of every non-empty prefix of words[i].
that a string is considered as a prefix of itself.
are n people and 40 types of hats labeled from 1 to 40.
a 2d integer array hats, where hats[i] is a list of all hats preferred by the ith person.
the number of ways that the n people wear different hats to each other.
the answer may be too large, return it modulo 109 + 7.
are n cities connected by some number of flights. you are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.
are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. if there is no such route, return -1.
is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).
being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). for example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].
the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.
must decrease the overall operation steps as much as possible.
and a gang of thieves are planning on robbing a bank. you are given a 0-indexed integer array security, where security[i] is the number of guards on duty on the ith day. the days are numbered starting from 0. you are also given an integer time.
ith day is a good day to rob the bank if:
are at least time days before and after the ith day,
number of guards at the bank for the time days before i are non-increasing, and
number of guards at the bank for the time days after i are non-decreasing.
formally, this means day i is a good day to rob the bank if and only if security[i - time] >= security[i - time + 1] >= ... >= security[i] <= ... <= security[i + time - 1] <= security[i + time].
a list of all days (0-indexed) that are good days to rob the bank. the order that the days are returned in does not matter.
are given an integer array nums consisting of 2 * n integers.
need to divide nums into n pairs such that:
element belongs to exactly one pair.
elements present in a pair are equal.
true if nums can be divided into n pairs, otherwise return false.
are given an array nums consisting of positive integers.
call a subarray of nums nice if the bitwise and of every pair of elements that are in different positions in the subarray is equal to 0.
the length of the longest nice subarray.
subarray is a contiguous part of an array.
that subarrays of length 1 are always considered nice.
an m x n matrix board containing 'x' and 'o', capture all regions that are 4-directionally surrounded by 'x'.
region is captured by flipping all 'o's into 'x's in that surrounded region.
a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) such that:
<= i < j <= n - 1 and
* nums[j] is divisible by k.
are given a 2d integer array grid of size m x n, where each cell contains a positive integer.
cornered path is defined as a set of adjacent cells with at most one turn. more specifically, the path should exclusively move either horizontally or vertically up to the turn (if there is one), without returning to a previously visited cell. after the turn, the path will then move exclusively in the alternate direction: move vertically if it moved horizontally, and vice versa, also without returning to a previously visited cell.
product of a path is defined as the product of all the values in the path.
the maximum number of trailing zeros in the product of a cornered path found in grid.

movement means moving in either the left or right direction.
movement means moving in either the up or down direction.
is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall. each of the four buttons has a different functionality where:
1: flips the status of all the bulbs.
2: flips the status of all the bulbs with even labels (i.e., 2, 4, ...).
3: flips the status of all the bulbs with odd labels (i.e., 1, 3, ...).
4: flips the status of all the bulbs with a label j = 3k + 1 where k = 0, 1, 2, ... (i.e., 1, 4, 7, 10, ...).
must make exactly presses button presses in total. for each press, you may pick any of the four buttons to press.
the two integers n and presses, return the number of different possible statuses after performing all presses button presses.
a queue that supports push and pop operations in the front, middle, and back.
the frontmiddleback class:
initializes the queue.
pushfront(int val) adds val to the front of the queue.
pushmiddle(int val) adds val to the middle of the queue.
pushback(int val) adds val to the back of the queue.
popfront() removes the front element of the queue and returns it. if the queue is empty, return -1.
popmiddle() removes the middle element of the queue and returns it. if the queue is empty, return -1.
popback() removes the back element of the queue and returns it. if the queue is empty, return -1.
that when there are two middle position choices, the operation is performed on the frontmost middle position choice. for example:
6 into the middle of [1, 2, 3, 4, 5] results in [1, 2, 6, 3, 4, 5].
the middle from [1, 2, 3, 4, 5, 6] returns 3 and results in [1, 2, 4, 5, 6].
an integer array arr, return true if there are three consecutive odd numbers in the array. otherwise, return false.
are given an array nums of positive integers and a positive integer k.
subset of nums is beautiful if it does not contain two integers with an absolute difference equal to k.
the number of non-empty beautiful subsets of the array nums.
subset of nums is an array that can be obtained by deleting some (possibly none) elements from nums. two subsets are different if and only if the chosen indices to delete are different.
a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.
that occur multiple times are counted the number of times they occur.
a string word to which you can insert letters "a", "b" or "c" anywhere and any number of times, return the minimum number of letters that must be inserted so that word becomes valid.
string is called valid if it can be formed by concatenating the string "abc" several times.
are given coordinates, a string that represents the coordinates of a square of the chessboard. below is a chessboard for your reference.
true if the square is white, and false if the square is black.
coordinate will always represent a valid chessboard square. the coordinate will always have the letter first, and the number second.
string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.
are given two integers m and n. consider an m x n grid where each cell is initially white. you can paint each cell red, green, or blue. all cells must be painted.
the number of ways to color the grid with no two adjacent cells having the same color. since the answer can be very large, return it modulo 109 + 7.
a positive integer n, return the number of the integers in the range [0, n] whose binary representations do not contain consecutive ones.
your implementation of the circular queue. the circular queue is a linear data structure in which the operations are performed based on fifo (first in first out) principle, and the last position is connected back to the first position to make a circle. it is also called "ring buffer".
of the benefits of the circular queue is that we can make use of the spaces in front of the queue. in a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. but using the circular queue, we can use the space to store new values.
the mycircularqueue class:
initializes the object with the size of the queue to be k.
front() gets the front item from the queue. if the queue is empty, return -1.
rear() gets the last item from the queue. if the queue is empty, return -1.
enqueue(int value) inserts an element into the circular queue. return true if the operation is successful.
dequeue() deletes an element from the circular queue. return true if the operation is successful.
isempty() checks whether the circular queue is empty or not.
isfull() checks whether the circular queue is full or not.
must solve the problem without using the built-in queue data structure in your programming language.
a string s, sort it in decreasing order based on the frequency of the characters. the frequency of a character is the number of times it appears in the string.
the sorted string. if there are multiple answers, return any of them.
phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. alphanumeric characters include letters and numbers.
a string s, return true if it is a palindrome, or false otherwise.
n-bit gray code sequence is a sequence of 2n integers where:
integer is in the inclusive range [0, 2n - 1],
first integer is 0,
integer appears no more than once in the sequence,
binary representation of every pair of adjacent integers differs by exactly one bit, and
binary representation of the first and last integers differs by exactly one bit.
an integer n, return any valid n-bit gray code sequence.
are given an integer array nums (0-indexed). in one operation, you can choose an element of the array and increment it by 1.
example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3].
the minimum number of operations needed to make nums strictly increasing.
array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.length - 1. an array of length 1 is trivially strictly increasing.
an integer array nums of size n, return the number with the value closest to 0 in nums. if there are multiple answers, return the number with the largest value.
a sentence that consists of some words separated by a single space, and a searchword, check if searchword is a prefix of any word in sentence.
the index of the word in sentence (1-indexed) where searchword is a prefix of this word. if searchword is a prefix of more than one word, return the index of the first word (minimum index). if there is no such word return -1.
prefix of a string s is any leading contiguous substring of s.
are given an m x n grid where each cell can have one of three values:
representing an empty cell,
representing a fresh orange, or
representing a rotten orange.
minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.
the minimum number of minutes that must elapse until no cell has a fresh orange. if this is impossible, return -1.
are given n points in the plane that are all distinct, where points[i] = [xi, yi]. a boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).
the number of boomerangs.
an array nums of integers, return how many of them contain an even number of digits.
an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.
are given an array of points in the x-y plane points where points[i] = [xi, yi].
the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the x and y axes. if there is not any such rectangle, return 0.
within 10-5 of the actual answer will be accepted.
an integer n, return true if it is a power of three. otherwise, return false.
integer n is a power of three, if there exists an integer x such that n == 3x.
xor sum of a list is the bitwise xor of all its elements. if the list only contains one element, then its xor sum will be equal to this element.
example, the xor sum of [1,2,3,4] is equal to 1 xor 2 xor 3 xor 4 = 4, and the xor sum of [3] is equal to 3.
are given two 0-indexed arrays arr1 and arr2 that consist only of non-negative integers.
the list containing the result of arr1[i] and arr2[j] (bitwise and) for every (i, j) pair where 0 <= i < arr1.length and 0 <= j < arr2.length.
the xor sum of the aforementioned list.
a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized nestedinteger.
element is either an integer or a list whose elements may also be integers or other lists.
an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.
that it is the kth smallest element in the sorted order, not the kth distinct element.
must find a solution with a memory complexity better than o(n2).
are given a 0-indexed integer array nums. the array nums is beautiful if:
is even.
!= nums[i + 1] for all i % 2 == 0.
that an empty array is considered beautiful.
can delete any number of elements from nums. when you delete an element, all the elements to the right of the deleted element will be shifted one unit to the left to fill the gap created and all the elements to the left of the deleted element will remain unchanged.
the minimum number of elements to delete from nums to make it beautiful.
are given the array nums consisting of n positive integers. you computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.
the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. since the answer can be a huge number return it modulo 109 + 7.
are given the logs for users' actions on leetcode, and an integer k. the logs are represented by a 2d integer array logs where each logs[i] = [idi, timei] indicates that the user with idi performed an action at the minute timei.
users can perform actions simultaneously, and a single user can perform multiple actions in the same minute.
user active minutes (uam) for a given user is defined as the number of unique minutes in which the user performed an action on leetcode. a minute can only be counted once, even if multiple actions occur during it.
are to calculate a 1-indexed array answer of size k such that, for each j (1 <= j <= k), answer[j] is the number of users whose uam equals j.
the array answer as described above.
a binary tree root and an integer target, delete all the leaf nodes with value target.
that once you delete a leaf node with value target, if its parent node becomes a leaf node and has the value target, it should also be deleted (you need to continue doing that until you cannot).
is a supermarket that is frequented by many customers. the products sold at the supermarket are represented as two parallel integer arrays products and prices, where the ith product has an id of products[i] and a price of prices[i].
a customer is paying, their bill is represented as two parallel integer arrays product and amount, where the jth product they purchased has an id of product[j], and amount[j] is how much of the product they bought. their subtotal is calculated as the sum of each amount[j] * (price of the jth product).
supermarket decided to have a sale. every nth customer paying for their groceries will be given a percentage discount. the discount amount is given by discount, where they will be given discount percent off their subtotal. more formally, if their subtotal is bill, then they would actually pay bill * ((100 - discount) / 100).
the cashier class:
n, int discount, int[] products, int[] prices) initializes the object with n, the discount, and the products and their prices.
getbill(int[] product, int[] amount) returns the final total of the bill with the discount applied (if any). answers within 10-5 of the actual value will be accepted.
the coordinates of four points in 2d space p1, p2, p3 and p4, return true if the four points construct a square.
coordinate of a point pi is represented as [xi, yi]. the input is not given in any order.
valid square has four equal sides with positive length and four equal angles (90-degree angles).
the head of a linked list, remove the nth node from the end of the list and return its head.
are given an integer array arr. you can choose a set of integers and remove all the occurrences of these integers in the array.
the minimum size of the set so that at least half of the integers of the array are removed.
sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. more formally, a sequence s is arithmetic if and only if s[i+1] - s[i] == s[1] - s[0] for all valid i.
example, these are arithmetic sequences:
3, 5, 7, 9
7, 7, 7
-1, -5, -9
following sequence is not arithmetic:
1, 2, 5, 7
are given an array of n integers, nums, and two arrays of m integers each, l and r, representing the m range queries, where the ith query is the range [l[i], r[i]]. all the arrays are 0-indexed.
a list of boolean elements answer, where answer[i] is true if the subarray nums[l[i]], nums[l[i]+1], ... , nums[r[i]] can be rearranged to form an arithmetic sequence, and false otherwise.
are given a 0-indexed m x n integer matrix grid and an integer k. you are currently at position (0, 0) and you want to reach position (m - 1, n - 1) moving only down or right.
the number of paths where the sum of the elements on the path is divisible by k. since the answer may be very large, return it modulo 109 + 7.
a string s, partition s such that every

the partition is a


the minimum cuts needed for a palindrome partitioning of s.
and implement a data structure for a least frequently used (lfu) cache.
the lfucache class:
capacity) initializes the object with the capacity of the data structure.
get(int key) gets the value of the key if the key exists in the cache. otherwise, returns -1.
put(int key, int value) update the value of the key if present, or inserts the key if not already present. when the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. for this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.
determine the least frequently used key, a use counter is maintained for each key in the cache. the key with the smallest use counter is the least frequently used key.
a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). the use counter for a key in the cache is incremented either a get or put operation is called on it.
functions get and put must each run in o(1) average time complexity.
are given a string s that consists of lower case english letters and brackets.
the strings in each pair of matching parentheses, starting from the innermost one.
result should not contain any brackets.
are given a positive integer 0-indexed array nums.
subset of the array nums is square-free if the product of its elements is a square-free integer.
square-free integer is an integer that is divisible by no square number other than 1.
the number of square-free non-empty subsets of the array nums. since the answer may be too large, return it modulo 109 + 7.
non-empty subset of nums is an array that can be obtained by deleting some (possibly none but not all) elements from nums. two subsets are different if and only if the chosen indices to delete are different.
an array points where points[i] = [xi, yi] represents a point on the x-y plane, return true if these points are a boomerang.
boomerang is a set of three points that are all distinct and not in a straight line.
an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.
any array that satisfies this condition.
string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself).
a string s, return the longest happy prefix of s. return an empty string "" if no such prefix exists.
are given a 0-indexed circular string array words and a string target. a circular array means that the array's end connects to the array's beginning.
the next element of words[i] is words[(i + 1) % n] and the previous element of words[i] is words[(i - 1 + n) % n], where n is the length of words.
from startindex, you can move to either the next word or the previous word with 1 step at a time.
the shortest distance needed to reach the string target. if the string target does not exist in words, return -1.
are n people standing in a line labeled from 1 to n. the first person in the line is holding a pillow initially. every second, the person holding the pillow passes it to the next person standing in the line. once the pillow reaches the end of the line, the direction changes, and people continue passing the pillow in the opposite direction.
example, once the pillow reaches the nth person they pass it to the n - 1th person, then to the n - 2th person and so on.
the two positive integers n and time, return the index of the person holding the pillow after time seconds.
an integer array nums and an integer k, return the number of subarrays of nums where the greatest common divisor of the subarray's elements is k.
subarray is a contiguous non-empty sequence of elements within an array.
greatest common divisor of an array is the largest integer that evenly divides all the array elements.
a m * n matrix seats that represent seats distributions in a classroom. if a seat is broken, it is denoted by '#' character otherwise it is denoted by a '.' character.
can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him. return the maximum number of students that can take the exam together without any cheating being possible..
must be placed in seats in good condition.
want to build some obstacle courses. you are given a 0-indexed integer array obstacles of length n, where obstacles[i] describes the height of the ith obstacle.
every index i between 0 and n - 1 (inclusive), find the length of the longest obstacle course in obstacles such that:
choose any number of obstacles between 0 and i inclusive.
must include the ith obstacle in the course.
must put the chosen obstacles in the same order as they appear in obstacles.
obstacle (except the first) is taller than or the same height as the obstacle immediately before it.
an array ans of length n, where ans[i] is the length of the longest obstacle course for index i as described above.
triplet is an array of three integers. you are given a 2d integer array triplets, where triplets[i] = [ai, bi, ci] describes the ith triplet. you are also given an integer array target = [x, y, z] that describes the triplet you want to obtain.
obtain target, you may apply the following operation on triplets any number of times (possibly zero):
two indices (0-indexed) i and j (i != j) and update triplets[j] to become [max(ai, aj), max(bi, bj), max(ci, cj)].
example, if triplets[i] = [2, 5, 3] and triplets[j] = [1, 7, 5], triplets[j] will be updated to [max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5].
true if it is possible to obtain the target triplet [x, y, z] as an element of triplets, or false otherwise.
loves to eat bananas. there are n piles of bananas, the ith pile has piles[i] bananas. the guards have gone and will come back in h hours.
can decide her bananas-per-hour eating speed of k. each hour, she chooses some pile of bananas and eats k bananas from that pile. if the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.
likes to eat slowly but still wants to finish eating all the bananas before the guards return.
the minimum integer k such that she can eat all the bananas within h hours.
an array nums and an integer target, return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.
frequency of an element is the number of times it occurs in an array.
are given an integer array nums and an integer k. in one operation, you can choose an index of nums and increment the element at that index by 1.
the maximum possible frequency of an element after performing at most k operations.
a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.
zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).
a c++ program, remove comments from it. the program source is an array of strings source where source[i] is the ith line of the source code. this represents the result of splitting the original source code string by the newline character '\n'.
c++, there are two types of comments, line comments, and block comments.
string "//" denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored.
string "/*" denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of "*/" should be ignored. (here, occurrences happen in reading order: line by line from left to right.) to be clear, the string "/*/" does not yet end the block comment, as the ending would be overlapping the beginning.
first effective comment takes precedence over others.
example, if the string "//" occurs in a block comment, it is ignored.
if the string "/*" occurs in a line or block comment, it is also ignored.
a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.
will be no control characters, single quote, or double quote characters.
example, source = "string s = "/* not a comment. */";" will not be a test case.
nothing else such as defines or macros will interfere with the comments.
is guaranteed that every open block comment will eventually be closed, so "/*" outside of a line or block comment always starts a new comment.
implicit newline characters can be deleted by block comments. please see the examples below for details.
removing the comments from the source code, return the source code in the same format.
are given a 0-indexed string word, consisting of lowercase english letters. you need to select one index and remove the letter at that index from word so that the frequency of every letter present in word is equal.
true if it is possible to remove one letter so that the frequency of all letters in word are equal, and false otherwise.

frequency of a letter x is the number of times it occurs in the string.
must remove exactly one letter and cannot chose to do nothing.
can use run-length encoding (i.e., rle) to encode a sequence of integers. in a run-length encoded array of even length encoding (0-indexed), for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence.
example, the sequence arr = [8,8,8,5,5] can be encoded to be encoding = [3,8,2,5]. encoding = [3,8,0,9,2,5] and encoding = [2,8,1,8,2,5] are also valid rle of arr.
a run-length encoded array, design an iterator that iterates through it.
the rleiterator class:
encoded) initializes the object with the encoded array encoded.
next(int n) exhausts the next n elements and returns the last element exhausted in this way. if there is no element left to exhaust, return -1 instead.
are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:
each step, you will choose any 3 piles of coins (not necessarily consecutive).
your choice, alice will pick the pile with the maximum number of coins.
will pick the next pile with the maximum number of coins.
friend bob will pick the last pile.
until there are no more piles of coins.
an array of integers piles where piles[i] is the number of coins in the ith pile.
the maximum number of coins that you can have.
the root of a binary tree, return the number of nodes where the value of the node is equal to the average of the values in its subtree.

average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.
subtree of root is a tree consisting of root and all of its descendants.
are given a list of bombs. the range of a bomb is defined as the area where its effect can be felt. this area is in the shape of a circle with the center as the location of the bomb.
bombs are represented by a 0-indexed 2d integer array bombs where bombs[i] = [xi, yi, ri]. xi and yi denote the x-coordinate and y-coordinate of the location of the ith bomb, whereas ri denotes the radius of its range.
may choose to detonate a single bomb. when a bomb is detonated, it will detonate all bombs that lie in its range. these bombs will further detonate the bombs that lie in their ranges.
the list of bombs, return the maximum number of bombs that can be detonated if you are allowed to detonate only one bomb.
a string licenseplate and an array of strings words, find the shortest completing word in words.
completing word is a word that contains all the letters in licenseplate. ignore numbers and spaces in licenseplate, and treat letters as case insensitive. if a letter appears more than once in licenseplate, then it must appear in the word the same number of times or more.
example, if licenseplate = "abc 12c", then it contains letters 'a', 'b' (ignoring case), and 'c' twice. possible completing words are "abccdef", "caaacab", and "cbca".
the shortest completing word in words. it is guaranteed an answer exists. if there are multiple shortest completing words, return the first one that occurs in words.
two strings s and t, determine if they are isomorphic.
strings s and t are isomorphic if the characters in s can be replaced to get t.
occurrences of a character must be replaced with another character while preserving the order of characters. no two characters may map to the same character, but a character may map to itself.
the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.
nodes of a binary tree are cousins if they have the same depth with different parents.
that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.
are given an integer n, which indicates that there are n courses labeled from 1 to n. you are also given a 2d integer array relations where relations[j] = [prevcoursej, nextcoursej] denotes that course prevcoursej has to be completed before course nextcoursej (prerequisite relationship). furthermore, you are given a 0-indexed integer array time where time[i] denotes how many months it takes to complete the (i+1)th course.
must find the minimum number of months needed to complete all the courses following these rules:
may start taking a course at any time if the prerequisites are met.
number of courses can be taken at the same time.
the minimum number of months needed to complete all the courses.
the test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).
are given a floating-point number hour, representing the amount of time you have to reach the office. to commute to the office, you must take n trains in sequential order. you are also given an integer array dist of length n, where dist[i] describes the distance (in kilometers) of the ith train ride.
train can only depart at an integer hour, so you may need to wait in between each train ride.
example, if the 1st train ride takes 1.5 hours, you must wait for an additional 0.5 hours before you can depart on the 2nd train ride at the 2 hour mark.
the minimum positive integer speed (in kilometers per hour) that all the trains must travel at for you to reach the office on time, or -1 if it is impossible to be on time.
are generated such that the answer will not exceed 107 and hour will have at most two digits after the decimal point.
are given an integer array nums of 2 * n integers. you need to partition nums into two arrays of length n to minimize the absolute difference of the sums of the arrays. to partition nums, put each element of nums into one of the two arrays.
the minimum possible absolute difference.
the root of a binary tree, return the length of the diameter of the tree.
diameter of a binary tree is the length of the longest path between any two nodes in a tree. this path may or may not pass through the root.
length of a path between two nodes is represented by the number of edges between them.
are given a square board of characters. you can move on the board starting at the bottom right square marked with the character 's'.
need to reach the top left square marked with the character 'e'. the rest of the squares are labeled either with a numeric character 1, 2, ..., 9 or with an obstacle 'x'. in one move you can go up, left or up-left (diagonally) only if there is no obstacle there.
a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo 10^9 + 7.
case there is no path, return [0, 0].
are given a 0-indexed array of integers nums of length n. you are initially positioned at nums[0].
element nums[i] represents the maximum length of a forward jump from index i. in other words, if you are at nums[i], you can jump to any nums[i + j] where:
<= j <= nums[i] and
+ j < n
the minimum number of jumps to reach nums[n - 1]. the test cases are generated such that you can reach nums[n - 1].
a string s of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).
score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.
a 0-indexed integer array nums of size n and two integers lower and upper, return the number of fair pairs.
pair (i, j) is fair if:
<= i < j < n, and
<= nums[i] + nums[j] <= upper
the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.
are given an integer array nums with the following properties:
== 2 * n.
contains n + 1 unique elements.
one element of nums is repeated n times.
the element that is repeated n times.
schema
mynumbers

column name | type |

num | int |

is no primary key for this table. it may contain duplicates.
row of this table contains an integer.
single number is a number that appeared only once in the mynumbers table.
an sql query to report the largest single number. if there is no single number, report null.
query result format is in the following example.
the roots of two binary trees root and subroot, return true if there is a subtree of root with the same structure and node values of subroot and false otherwise.
subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. the tree tree could also be considered as a subtree of itself.
a string of english letters s, return the greatest english letter which occurs as both a lowercase and uppercase letter in s. the returned letter should be in uppercase. if no such letter exists, return an empty string.
english letter b is greater than another letter a if b appears after a in the english alphabet.
are given n bst (binary search tree) root nodes for n separate bsts stored in an array trees (0-indexed). each bst in trees has at most 3 nodes, and no two roots have the same value. in one operation, you can:
two distinct indices i and j such that the value stored at one of the leaves of trees[i] is equal to the root value of trees[j].
the leaf node in trees[i] with trees[j].
trees[j] from trees.
the root of the resulting bst if it is possible to form a valid bst after performing n - 1 operations, or null if it is impossible to create a valid bst.
bst (binary search tree) is a binary tree where each node satisfies the following property:
node in the node's left subtree has a value strictly less than the node's value.
node in the node's right subtree has a value strictly greater than the node's value.
leaf is a node that has no children.
a n-ary tree, find its maximum depth.
maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
input serialization is represented in their level order traversal, each group of children is separated by the null value (see examples).
an integer columnnumber, return its corresponding column title as it appears in an excel sheet.
example:
-> 1
-> 2
-> 3

-> 26
-> 27
-> 28

are given an integer array nums and two integers limit and goal. the array nums has an interesting property that abs(nums[i]) <= limit.
the minimum number of elements you need to add to make the sum of the array equal to goal. the array must maintain its property that abs(nums[i]) <= limit.
that abs(x) equals x if x >= 0, and -x otherwise.
an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
must write an algorithm that runs in o(n) time and without using the division operation.
valid email consists of a local name and a domain name, separated by the '@' sign. besides lowercase letters, the email may contain one or more '.' or '+'.
example, in "alice@leetcode.com", "alice" is the local name, and "leetcode.com" is the domain name.
you add periods '.' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. note that this rule does not apply to domain names.
example, "alice.z@leetcode.com" and "alicez@leetcode.com" forward to the same email address.
you add a plus '+' in the local name, everything after the first plus sign will be ignored. this allows certain emails to be filtered. note that this rule does not apply to domain names.
example, "m.y+name@email.com" will be forwarded to "my@email.com".
is possible to use both of these rules at the same time.
an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.
a positive integer k, you need to find the length of the smallest positive integer n such that n is divisible by k, and n only contains the digit 1.
the length of n. if there is no such n, return -1.
n may not fit in a 64-bit signed integer.
is an undirected graph consisting of n nodes numbered from 0 to n - 1. you are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node.
are also given a 2d integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.
star graph is a subgraph of the given graph having a center node containing 0 or more neighbors. in other words, it is a subset of edges of the given graph such that there exists a common node for all edges.
image below shows star graphs with 3 and 4 neighbors respectively, centered at the blue node.
star sum is the sum of the values of all the nodes present in the star graph.
an integer k, return the maximum star sum of a star graph containing at most k edges.
frog is crossing a river. the river is divided into some number of units, and at each unit, there may or may not exist a stone. the frog can jump on a stone, but it must not jump into the water.
a list of stones' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. initially, the frog is on the first stone and assumes the first jump must be 1 unit.
the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. the frog can only jump in the forward direction.
an array nums of size n, return the majority element.
majority element is the element that appears more than ân / 2â times. you may assume that the majority element always exists in the array.
sentence is a list of words that are separated by a single space with no leading or trailing spaces. each of the words consists of only uppercase and lowercase english letters (no punctuation).
example, "hello world", "hello", and "hello world hello world" are all sentences.
are given a sentence s and an integer k. you want to truncate s such that it contains only the first k words. return s after truncating it.
an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. the relative order of the elements should be kept the same.
it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. more formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. it does not matter what you leave beyond the first k elements.
k after placing the final result in the first k slots of nums.
not allocate extra space for another array. you must do this by modifying the input array in-place with o(1) extra memory.
judge:
judge will test your solution with the following code:
nums = [...]; // input array
expectednums = [...]; // the expected answer with correct length

k = removeduplicates(nums); // calls your implementation

k == expectednums.length;
(int i = 0; i < k; i++) {
nums[i] == expectednums[i];

all assertions pass, then your solution will be accepted.
are n houses evenly lined up on the street, and each house is beautifully painted. you are given a 0-indexed integer array colors of length n, where colors[i] represents the color of the ith house.
the maximum distance between two houses with different colors.
distance between the ith and jth houses is abs(i - j), where abs(x) is the absolute value of x.
an integer array arr and a filtering function fn, return a new array with a fewer or equal number of elements.
returned array should only contain elements where fn(arr[i], i) evaluated to a truthy value.
solve it without the built-in array.filter method.
a single-threaded cpu, we execute a program containing n functions. each function has a unique id between 0 and n-1.
calls are stored in a call stack: when a function call starts, its id is pushed onto the stack, and when a function call ends, its id is popped off the stack. the function whose id is at the top of the stack is the current function being executed. each time a function starts or ends, we write a log with the id, whether it started or ended, and the timestamp.
are given a list logs, where logs[i] represents the ith log message formatted as a string "{function_id}:{"start" | "end"}:{timestamp}". for example, "0:start:3" means a function call with function id 0 started at the beginning of timestamp 3, and "1:end:2" means a function call with function id 1 ended at the end of timestamp 2. note that a function can be called multiple times, possibly recursively.
function's exclusive time is the sum of execution times for all function calls in the program. for example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3.
the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with id i.
are given two integers m and n representing a 0-indexed m x n grid. you are also given two 2d integer arrays guards and walls where guards[i] = [rowi, coli] and walls[j] = [rowj, colj] represent the positions of the ith guard and jth wall respectively.
guard can see every cell in the four cardinal directions (north, east, south, or west) starting from their position unless obstructed by a wall or another guard. a cell is guarded if there is at least one guard that can see it.
the number of unoccupied cells that are not guarded.
entity parser is the parser that takes html code as input and replace all the entities of the special characters by the characters itself.
special characters and their entities for html are:
mark: the entity is &quot; and symbol character is ".
quote mark: the entity is &apos; and symbol character is '.
the entity is &amp; and symbol character is &.
than sign: the entity is &gt; and symbol character is >.
than sign: the entity is &lt; and symbol character is <.
the entity is &frasl; and symbol character is /.
the input text string to the html parser, you have to implement the entity parser.
the text after replacing the entities by the special characters.
the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.
the smallest level x such that the sum of all the values of nodes at level x is maximal.
are given two 0-indexed arrays of strings startwords and targetwords. each string consists of lowercase english letters only.
each string in targetwords, check if it is possible to choose a string from startwords and perform a conversion operation on it to be equal to that from targetwords.
conversion operation is described in the following two steps:
any lowercase letter that is not present in the string to its end.
example, if the string is "abc", the letters 'd', 'e', or 'y' can be added to it, but not 'a'. if 'd' is added, the resulting string will be "abcd".
the letters of the new string in any arbitrary order.
example, "abcd" can be rearranged to "acbd", "bacd", "cbda", and so on. note that it can also be rearranged to "abcd" itself.
the number of strings in targetwords that can be obtained by performing the operations on any string of startwords.
that you will only be verifying if the string in targetwords can be obtained from a string in startwords by performing the operations. the strings in startwords do not actually change during this process.
two arrays of integers with equal lengths, return the maximum value of:
- arr1[j]| + |arr2[i] - arr2[j]| + |i - j|
the maximum is taken over all 0 <= i, j < arr1.length.
are given two 0-indexed arrays nums1 and nums2 and a 2d array queries of queries. there are three types of queries:
a query of type 1, queries[i] = [1, l, r]. flip the values from 0 to 1 and from 1 to 0 in nums1 from index l to index r. both l and r are 0-indexed.
a query of type 2, queries[i] = [2, p, 0]. for every index 0 <= i < n, set nums2[i] = nums2[i] + nums1[i] * p.
a query of type 3, queries[i] = [3, 0, 0]. find the sum of the elements in nums2.
an array containing all the answers to the third type queries.
two binary trees original and cloned and given a reference to a node target in the original tree.
cloned tree is a copy of the original tree.
a reference to the same node in the cloned tree.
that you are not allowed to change any of the two trees or the target node and the answer must be a reference to a node in the cloned tree.
a (0-indexed) integer array nums and two integers low and high, return the number of nice pairs.
nice pair is a pair (i, j) where 0 <= i < j < nums.length and low <= (nums[i] xor nums[j]) <= high.
are available at some positions on an infinite x-axis. you are given a 2d integer array fruits where fruits[i] = [positioni, amounti] depicts amounti fruits at the position positioni. fruits is already sorted by positioni in ascending order, and each positioni is unique.
are also given an integer startpos and an integer k. initially, you are at the position startpos. from any position, you can either walk to the left or right. it takes one step to move one unit on the x-axis, and you can walk at most k steps in total. for every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position.
the maximum total number of fruits you can harvest.
are given an array of n strings strs, all of the same length.
may choose any deletion indices, and we delete all the characters in those indices for each string.
example, if we have strs = ["abcdef","uvwxyz"] and deletion indices {0, 2, 3}, then the final array after deletions is ["bef", "vyz"].
we chose a set of deletion indices answer such that after deletions, the final array has its elements in lexicographic order (i.e., strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]). return the minimum possible value of answer.length.
schema
employees

column name | type |

employee_id | int |
name | varchar |
salary | int |

is the primary key for this table.
row of this table indicates the employee id, employee name, and salary.
an sql query to calculate the bonus of each employee. the bonus of an employee is 100% of their salary if the id of the employee is an odd number and the employee name does not start with the character 'm'. the bonus of an employee is 0 otherwise.
the result table ordered by employee_id.
query result format is in the following example.
a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. the result should also be sorted in ascending order.
integer a is closer to x than an integer b if:
- x| < |b - x|, or
- x| == |b - x| and a < b
are given a string s that contains some bracket pairs, with each pair containing a non-empty key.
example, in the string "(name)is(age)yearsold", there are two bracket pairs that contain the keys "name" and "age".
know the values of a wide range of keys. this is represented by a 2d string array knowledge where each knowledge[i] = [keyi, valuei] indicates that key keyi has a value of valuei.
are tasked to evaluate all of the bracket pairs. when you evaluate a bracket pair that contains some key keyi, you will:
keyi and the bracket pair with the key's corresponding valuei.
you do not know the value of the key, you will replace keyi and the bracket pair with a question mark "?" (without the quotation marks).
key will appear at most once in your knowledge. there will not be any nested brackets in s.
the resulting string after evaluating all of the bracket pairs.
are n flights that are labeled from 1 to n.
are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range.
an array answer of length n, where answer[i] is the total number of seats reserved for flight i.
is a tree (i.e., a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. each node has a value associated with it, and the root of the tree is node 0.
represent this tree, you are given an integer array nums and a 2d array edges. each nums[i] represents the ith node's value, and each edges[j] = [uj, vj] represents an edge between nodes uj and vj in the tree.
values x and y are coprime if gcd(x, y) == 1 where gcd(x, y) is the greatest common divisor of x and y.
ancestor of a node i is any other node on the shortest path from node i to the root. a node is not considered an ancestor of itself.
an array ans of size n, where ans[i] is the closest ancestor to node i such that nums[i] and nums[ans[i]] are coprime, or -1 if there is no such ancestor.
an equation, represented by words on the left side and the result on the right side.
need to check if the equation is solvable under the following rules:
character is decoded as one digit (0 - 9).
two characters can map to the same digit.
words[i] and result are decoded as one number without leading zeros.
of numbers on the left side (words) will equal to the number on the right side (result).
true if the equation is solvable, otherwise return false.
an integer array nums where every element appears three times except for one, which appears exactly once. find the single element and return it.
must implement a solution with a linear runtime complexity and use only constant extra space.
a 2d array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid.
cycle is a path of length 4 or more in the grid that starts and ends at the same cell. from a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.
you cannot move to the cell that you visited in your last move. for example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell.
true if any cycle of the same value exists in grid, otherwise, return false.
problem is an interactive problem.)
may recall that an array arr is a mountain array if and only if:
>= 3
exists some i with 0 < i < arr.length - 1 such that:
< arr[1] < ... < arr[i - 1] < arr[i]
> arr[i + 1] > ... > arr[arr.length - 1]
a mountain array mountainarr, return the minimum index such that mountainarr.get(index) == target. if such an index does not exist, return -1.
cannot access the mountain array directly. you may only access the array using a mountainarray interface:
returns the element of the array at index k (0-indexed).
returns the length of the array.
making more than 100 calls to mountainarray.get will be judged wrong answer. also, any solutions that attempt to circumvent the judge will result in disqualification.
are given a string num representing a large integer. an integer is good if it meets the following conditions:
is a substring of num with length 3.
consists of only one unique digit.
the maximum good integer as a string or an empty string "" if no such integer exists.

substring is a contiguous sequence of characters within a string.
may be leading zeroes in num or a good integer.
schema
products

column name | type |

product_id | int |
new_price | int |
change_date | date |

change_date) is the primary key of this table.
row of this table indicates that the price of some product was changed to a new price at some date.
an sql query to find the prices of all products on 2019-08-16. assume the price of all products before any change is 10.
the result table in any order.
query result format is in the following example.
schema
users

column name | type |

user_id | int |
name | varchar |

is the primary key for this table.
table contains the id and the name of the user. the name consists of only lowercase and uppercase characters.
an sql query to fix the names so that only the first character is uppercase and the rest are lowercase.
the result table ordered by user_id.
query result format is in the following example.
a binary tree
node {
val;
*left;
*right;
*next;

each next pointer to point to its next right node. if there is no next right node, the next pointer should be set to null.
all next pointers are set to null.
are given two non-increasing 0-indexed integer arrays nums1 and nums2.
pair of indices (i, j), where 0 <= i < nums1.length and 0 <= j < nums2.length, is valid if both i <= j and nums1[i] <= nums2[j]. the distance of the pair is j - i.
the maximum distance of any valid pair (i, j). if there are no valid pairs, return 0.
array arr is non-increasing if arr[i-1] >= arr[i] for every 1 <= i < arr.length.
a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.
task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.
an integer array nums, return an integer array counts where counts[i] is the number of smaller elements to the right of nums[i].
are given a positive integer num consisting only of digits 6 and 9.
the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).
have n tasks and m workers. each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. the strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).
you have pills magical pills that will increase a worker's strength by strength. you can decide which workers receive the magical pills, however, you may only give each worker at most one magical pill.
the 0-indexed integer arrays tasks and workers and the integers pills and strength, return the maximum number of tasks that can be completed.
n orders, each order consist in pickup and delivery services.
all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i).
the answer may be too large, return it modulo 10^9 + 7.
a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.
are given a 0-indexed array nums consisting of n positive integers.
array nums is called alternating if:
- 2] == nums[i], where 2 <= i <= n - 1.
- 1] != nums[i], where 1 <= i <= n - 1.
one operation, you can choose an index i and change nums[i] into any positive integer.
the minimum number of operations required to make the array alternating.
0-indexed array derived with length n is derived by computing the bitwise xor (â) of adjacent values in a binary array original of length n.
for each index i in the range [0, n - 1]:
i = n - 1, then derived[i] = original[i] â original[0].
derived[i] = original[i] â original[i + 1].
an array derived, your task is to determine whether there exists a valid binary array original that could have formed derived.
true if such an array exists or false otherwise.
binary array is an array containing only 0's and 1's
two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.
letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].
example, swapping at indices 0 and 2 in "abcd" results in "cbad".
an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.
must write an algorithm that runs in o(n) time and uses o(1) extra space.
have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. the ith request asks for the sum of nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. both starti and endi are 0-indexed.
the maximum total sum of all requests among all permutations of nums.
the answer may be too large, return it modulo 109 + 7.
run a preorder depth-first search (dfs) on the root of a binary tree.
each node in this traversal, we output d dashes (where d is the depth of this node), then we output the value of this node. if the depth of a node is d, the depth of its immediate child is d + 1. the depth of the root node is 0.
a node has only one child, that child is guaranteed to be the left child.
the output traversal of this traversal, recover the tree and return its root.
is an integer array nums sorted in ascending order (with distinct values).
to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). for example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
must write an algorithm with o(log n) runtime complexity.
is an undirected graph consisting of n nodes numbered from 1 to n. you are given the integer n and a 2d array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi. the graph can be disconnected.
can add at most two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops.
true if it is possible to make the degree of each node in the graph even, otherwise return false.
degree of a node is the number of edges connected to it.
are given a string s consisting of digits from 1 to 9 and an integer k.
partition of a string s is called good if:
digit of s is part of exactly one substring.
value of each substring is less than or equal to k.
the minimum number of substrings in a good partition of s. if no good partition of s exists, return -1.
that:
value of a string is its result when interpreted as an integer. for example, the value of "123" is 123 and the value of "1" is 1.
substring is a contiguous sequence of characters within a string.
a 2d matrix matrix, handle multiple queries of the following type:
the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
the nummatrix class:
matrix) initializes the object with the integer matrix matrix.
sumregion(int row1, int col1, int row2, int col2) returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
must design an algorithm where sumregion works on o(1) time complexity.
are given an integer array coins of length n which represents the n coins that you own. the value of the ith coin is coins[i]. you can make some value x if you can choose some of your n coins such that their values sum up to x.
the maximum number of consecutive integer values that you can make with your coins starting from and including 0.
that you may have multiple coins of the same value.
is a biker going on a road trip. the road trip consists of n + 1 points at different altitudes. the biker starts his trip on point 0 with altitude equal 0.
are given an integer array gain of length n where gain[i] is the net gain in altitude between points i and i + 1 for all (0 <= i < n). return the highest altitude of a point.
a text file file.txt, print just the 10th line of the file.

that file.txt has the following content:
1
2
3
4
5
6
7
8
9
10
script should output the tenth line, which is:
10

if the file contains less than 10 lines, what should you output?
there's at least three different solutions. try to explore all possibilities.
are given two integer arrays nums1 and nums2 of length n.
xor sum of the two integer arrays is (nums1[0] xor nums2[0]) + (nums1[1] xor nums2[1]) + ... + (nums1[n - 1] xor nums2[n - 1]) (0-indexed).
example, the xor sum of [1,2,3] and [3,2,1] is equal to (1 xor 3) + (2 xor 2) + (3 xor 1) = 2 + 0 + 2 = 4.
the elements of nums2 such that the resulting xor sum is minimized.
the xor sum after the rearrangement.
are given a 0-indexed array of n integers differences, which describes the differences between each pair of consecutive integers of a hidden sequence of length (n + 1). more formally, call the hidden sequence hidden, then we have that differences[i] = hidden[i + 1] - hidden[i].
are further given two integers lower and upper that describe the inclusive range of values [lower, upper] that the hidden sequence can contain.
example, given differences = [1, -3, 4], lower = 1, upper = 6, the hidden sequence is a sequence of length 4 whose elements are in between 1 and 6 (inclusive).
4, 1, 5] and [4, 5, 2, 6] are possible hidden sequences.
6, 3, 7] is not possible since it contains an element greater than 6.
2, 3, 4] is not possible since the differences are not correct.
the number of possible hidden sequences there are. if there are no possible sequences, return 0.
car travels from a starting position to a destination which is target miles east of the starting position.
are gas stations along the way. the gas stations are represented as an array stations where stations[i] = [positioni, fueli] indicates that the ith gas station is positioni miles east of the starting position and has fueli liters of gas.
car starts with an infinite tank of gas, which initially has startfuel liters of fuel in it. it uses one liter of gas per one mile that it drives. when the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.
the minimum number of refueling stops the car must make in order to reach its destination. if it cannot reach the destination, return -1.
that if the car reaches a gas station with 0 fuel left, the car can still refuel there. if the car reaches the destination with 0 fuel left, it is still considered to have arrived.
an empty set of intervals, implement a data structure that can:
an interval to the set of intervals.
the number of integers that are present in at least one interval.
the countintervals class:
initializes the object with an empty set of intervals.
add(int left, int right) adds the interval [left, right] to the set of intervals.
count() returns the number of integers that are present in at least one interval.
that an interval [left, right] denotes all the integers x where left <= x <= right.
schema
salary

column name | type |

id | int |
name | varchar |
sex | enum |
salary | int |

is the primary key for this table.
sex column is enum value of type ('m', 'f').
table contains information about an employee.
an sql query to swap all 'f' and 'm' values (i.e., change all 'f' values to 'm' and vice versa) with a single update statement and no intermediate temporary tables.
that you must write a single update statement, do not write any select statement for this problem.
query result format is in the following example.
an array nums of positive integers, return the longest possible length of an array prefix of nums, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences.
after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).
the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).
have k lists of sorted integers in non-decreasing order. find the smallest range that includes at least one number from each of the k lists.
define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.
an expression such as expression = "e + 8 - a + 5" and an evaluation map such as {"e": 1} (given in terms of evalvars = ["e"] and evalints = [1]), return a list of tokens representing the simplified expression, such as ["-1*a","14"]
expression alternates chunks and symbols, with a space separating each chunk and symbol.
chunk is either an expression in parentheses, a variable, or a non-negative integer.
variable is a string of lowercase letters (not including digits.) note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like "2x" or "-x".
are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.
example, expression = "1 + 2 * 3" has an answer of ["7"].
format of the output is as follows:
each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.
example, we would never write a term like "b*a*c", only "a*b*c".
have degrees equal to the number of free variables being multiplied, counting multiplicity. we write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.
example, "a*a*b*c" has degree 4.
leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) a leading coefficient of 1 is still printed.
example of a well-formatted answer is ["-2*a*a*a", "3*a*a*b", "3*b*b", "4*a", "5*c", "-6"].
(including constant terms) with coefficient 0 are not included.
example, an expression of "0" has an output of [].
you may assume that the given expression is always valid. all intermediate results will be in the range of [-231, 231 - 1].
have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. apply the following algorithm on arr:
from left to right, remove the first number and every other number afterward until you reach the end of the list.
the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.
repeating the steps again, alternating left to right and right to left, until a single number remains.
the integer n, return the last number that remains in arr.
the root of a binary search tree (bst), return the minimum absolute difference between the values of any two different nodes in the tree.
schema
salesperson

column name | type |

sales_id | int |
name | varchar |
salary | int |
commission_rate | int |
hire_date | date |

is the primary key column for this table.
row of this table indicates the name and the id of a salesperson alongside their salary, commission rate, and hire date.
company

column name | type |

com_id | int |
name | varchar |
city | varchar |

is the primary key column for this table.
row of this table indicates the name and the id of a company and the city in which the company is located.
orders

column name | type |

order_id | int |
order_date | date |
com_id | int |
sales_id | int |
amount | int |

is the primary key column for this table.
is a foreign key to com_id from the company table.
is a foreign key to sales_id from the salesperson table.
row of this table contains information about one order. this includes the id of the company, the id of the salesperson, the date of the order, and the amount paid.
an sql query to report the names of all the salespersons who did not have any orders related to the company with the name "red".
the result table in any order.
query result format is in the following example.
are given an integer array nums. you can choose exactly one index (0-indexed) and remove the element. notice that the index of the elements may change after the removal.
example, if nums = [6,1,7,4,1]:
to remove index 1 results in nums = [6,7,4,1].
to remove index 2 results in nums = [6,1,4,1].
to remove index 4 results in nums = [6,1,7,4].
array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.
the number of indices that you could choose such that after the removal, nums is fair.
are n rooms you need to visit, labeled from 0 to n - 1. each day is labeled, starting from 0. you will go in and visit one room a day.
on day 0, you visit room 0. the order you visit the rooms for the coming days is determined by the following rules and a given 0-indexed array nextvisit of length n:
that on a day, you visit room i,
you have been in room i an odd number of times (including the current visit), on the next day you will visit a room with a lower or equal room number specified by nextvisit[i] where 0 <= nextvisit[i] <= i;
you have been in room i an even number of times (including the current visit), on the next day you will visit room (i + 1) mod n.
the label of the first day where you have been in all the rooms. it can be shown that such a day exists. since the answer may be very large, return it modulo 109 + 7.
are given the root of a binary tree and a positive integer k.
level sum in the tree is the sum of the values of the nodes that are on the same level.
the kth largest level sum in the tree (not necessarily distinct). if there are fewer than k levels in the tree, return -1.
that two nodes are on the same level if they have the same distance from the root.
binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).
are given a binary string s. you can flip s[i] changing it from 0 to 1 or from 1 to 0.
the minimum number of flips to make s monotone increasing.
are given a string s consisting of lowercase english letters. a duplicate removal consists of choosing two adjacent and equal letters and removing them.
repeatedly make duplicate removals on s until we no longer can.
the final string after all such duplicate removals have been made. it can be proven that the answer is unique.
are given an m x n integer matrix grid.
rhombus sum is the sum of the elements that form the border of a regular rhombus shape in grid. the rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each rhombus sum:
that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner.
the biggest three distinct rhombus sums in the grid in descending order. if there are less than three distinct values, return all of them.
are given a 0-indexed array of strings details. each element of details provides information about a given passenger compressed into a string of length 15. the system is such that:
first ten characters consist of the phone number of passengers.
next character denotes the gender of the person.
following two characters are used to indicate the age of the person.
last two characters determine the seat allotted to that person.
the number of passengers who are strictly more than 60 years old.
own a goal parser that can interpret a string command. the command consists of an alphabet of "g", "()" and/or "(al)" in some order. the goal parser will interpret "g" as the string "g", "()" as the string "o", and "(al)" as the string "al". the interpreted strings are then concatenated in the original order.
the string command, return the goal parser's interpretation of command.
are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.
the single element that appears only once.
solution must run in o(log n) time and o(1) space.
schema
employee

column name | type |

employee_id | int |
department_id | int |
primary_flag | varchar |

department_id) is the primary key for this table.
is the id of the employee.
is the id of the department to which the employee belongs.
is an enum of type ('y', 'n'). if the flag is 'y', the department is the primary department for the employee. if the flag is 'n', the department is not the primary.
can belong to multiple departments. when the employee joins other departments, they need to decide which department is their primary department. note that when an employee belongs to only one department, their primary column is 'n'.
an sql query to report all the employees with their primary department. for employees who belong to one department, report their only department.
the result table in any order.
query result format is in the following example.
permutation of an array of integers is an arrangement of its members into a sequence or linear order.
example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].
next permutation of an array of integers is the next lexicographically greater permutation of its integer. more formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. if such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).
example, the next permutation of arr = [1,2,3] is [1,3,2].
the next permutation of arr = [2,3,1] is [3,1,2].
the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
an array of integers nums, find the next permutation of nums.
replacement must be in place and use only constant extra memory.
are several consecutive houses along a street, each of which has some money inside. there is also a robber, who wants to steal money from the homes, but he refuses to steal from adjacent homes.
capability of the robber is the maximum amount of money he steals from one house of all the houses he robbed.
are given an integer array nums representing how much money is stashed in each house. more formally, the ith house from the left has nums[i] dollars.
are also given an integer k, representing the minimum number of houses the robber will steal from. it is always possible to steal at least k houses.
the minimum capability of the robber out of all the possible ways to steal at least k houses.
are given an integer array nums containing distinct numbers, and you can perform the following operations until the array is empty:
the first element has the smallest value, remove it
put the first element at the end of the array.
an integer denoting the number of operations it takes to make nums empty.
want to split a group of n people (labeled from 1 to n) into two groups of any size. each person may dislike some other people, and they should not go into the same group.
the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.
an array of integers arr, a lucky integer is an integer that has a frequency in the array equal to its value.
the largest lucky integer in the array. if there is no lucky integer return -1.
image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.
are also given three integers sr, sc, and color. you should perform a flood fill on the image starting from the pixel image[sr][sc].
perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. replace the color of all of the aforementioned pixels with color.
the modified image after performing the flood fill.
are given an integer array nums. the value of this array is defined as the sum of |nums[i] - nums[i + 1]| for all 0 <= i < nums.length - 1.
are allowed to select any subarray of the given array and reverse it. you can perform this operation only once.
maximum possible value of the final array.
an integer array nums, return the greatest common divisor of the smallest number and largest number in nums.
greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.
integer array original is transformed into a doubled array changed by appending twice the value of every element in original, and then randomly shuffling the resulting array.
an array changed, return original if changed is a doubled array. if changed is not a doubled array, return an empty array. the elements in original may be returned in any order.
company workers use key-cards to unlock office doors. each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. the system emits an alert if any worker uses the key-card three or more times in a one-hour period.
are given a list of strings keyname and keytime where [keyname[i], keytime[i]] corresponds to a person's name and the time when their key-card was used in a single day.
times are given in the 24-hour time format "hh:mm", such as "23:51" and "09:49".
a list of unique worker names who received an alert for frequent keycard use. sort the names in ascending order alphabetically.
that "10:00" - "11:00" is considered to be within a one-hour period, while "22:51" - "23:52" is not considered to be within a one-hour period.
the ruler of a kingdom, you have an army of wizards at your command.
are given a 0-indexed integer array strength, where strength[i] denotes the strength of the ith wizard. for a contiguous group of wizards (i.e. the wizards' strengths form a subarray of strength), the total strength is defined as the product of the following two values:
strength of the weakest wizard in the group.
total of all the individual strengths of the wizards in the group.
the sum of the total strengths of all contiguous groups of wizards. since the answer may be very large, return it modulo 109 + 7.
subarray is a contiguous non-empty sequence of elements within an array.
exists an undirected and unrooted tree with n nodes indexed from 0 to n - 1. you are given the integer n and a 2d integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.
node has an associated price. you are given an integer array price, where price[i] is the price of the ith node.
price sum of a given path is the sum of the prices of all nodes lying on that path.
you are given a 2d integer array trips, where trips[i] = [starti, endi] indicates that you start the ith trip from the node starti and travel to the node endi by any path you like.
performing your first trip, you can choose some non-adjacent nodes and halve the prices.
the minimum total price sum to perform all the given trips.
an array of strings queries and a string pattern, return a boolean array answer where answer[i] is true if queries[i] matches pattern, and false otherwise.
query word queries[i] matches pattern if you can insert lowercase english letters pattern so that it equals the query. you may insert each character at any position and you may not insert any characters.
a wordlist, we want to implement a spellchecker that converts a query word into a correct word.
a given query word, the spell checker handles two categories of spelling mistakes:
if the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.
wordlist = ["yellow"], query = "yellow": correct = "yellow"
wordlist = ["yellow"], query = "yellow": correct = "yellow"
wordlist = ["yellow"], query = "yellow": correct = "yellow"
errors: if after replacing the vowels ('a', 'e', 'i', 'o', 'u') of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist.
wordlist = ["yellow"], query = "yollow": correct = "yellow"
wordlist = ["yellow"], query = "yeellow": correct = "" (no match)
wordlist = ["yellow"], query = "yllw": correct = "" (no match)
addition, the spell checker operates under the following precedence rules:
the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back.
the query matches a word up to capitlization, you should return the first such match in the wordlist.
the query matches a word up to vowel errors, you should return the first such match in the wordlist.
the query has no matches in the wordlist, you should return the empty string.
some queries, return a list of words answer, where answer[i] is the correct word for query = queries[i].
are given a 0-indexed integer array nums. a pair of indices (i, j) is a bad pair if i < j and j - i != nums[j] - nums[i].
the total number of bad pairs in nums.
linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.
a deep copy of the list. the deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. none of the pointers in the new list should point to nodes in the original list.
example, if there are two nodes x and y in the original list, where x.random --> y, then for the corresponding two nodes x and y in the copied list, x.random --> y.
the head of the copied linked list.
linked list is represented in the input/output as a list of n nodes. each node is represented as a pair of [val, random_index] where:
an integer representing node.val
the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.
code will only be given the head of the original linked list.
a lemonade stand, each lemonade costs $5. customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. you must provide the correct change to each customer so that the net transaction is that the customer pays $5.
that you do not have any change in hand at first.
an integer array bills where bills[i] is the bill the ith customer pays, return true if you can provide every customer with the correct change, or false otherwise.
city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.
geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:
is the x coordinate of the left edge of the ith building.
is the x coordinate of the right edge of the ith building.
is the height of the ith building.
may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.
skyline should be represented as a list of "key points" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. any ground between the leftmost and rightmost buildings should be part of the skyline's contour.
there must be no consecutive horizontal lines of equal height in the output skyline. for instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]
an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.
are given a 0-indexed 2d integer array grid of size m x n. each cell has one of two values:
represents an empty cell,
represents an obstacle that may be removed.
can move up, down, left, or right from and to an empty cell.
the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).
are n employees, each with a unique id from 0 to n - 1.
are given a 2d integer array logs where logs[i] = [idi, leavetimei] where:
is the id of the employee that worked on the ith task, and
is the time at which the employee finished the ith task. all the values leavetimei are unique.
that the ith task starts the moment right after the (i - 1)th task ends, and the 0th task starts at time 0.
the id of the employee that worked the task with the longest time. if there is a tie between two or more employees, return the smallest id among them.
n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.
an integer n, return all distinct solutions to the n-queens puzzle. you may return the answer in any order.
solution contains a distinct board configuration of the n-queens' placement, where 'q' and '.' both indicate a queen and an empty space, respectively.
and bob want to water n plants in their garden. the plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the ith plant is located at x = i.
plant needs a specific amount of water. alice and bob have a watering can each, initially full. they water the plants in the following way:
waters the plants in order from left to right, starting from the 0th plant. bob waters the plants in order from right to left, starting from the (n - 1)th plant. they begin watering the plants simultaneously.
takes the same amount of time to water each plant regardless of how much water it needs.
must water the plant if they have enough in their can to fully water it. otherwise, they first refill their can (instantaneously) then water the plant.
case both alice and bob reach the same plant, the one with more water currently in his/her watering can should water this plant. if they have the same amount of water, then alice should water this plant.
a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the ith plant needs, and two integers capacitya and capacityb representing the capacities of alice's and bob's watering cans respectively, return the number of times they have to refill to water all the plants.
are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden.
the entire garden using the minimum length of rope, as it is expensive. the garden is well-fenced only if all the trees are enclosed.
the coordinates of trees that are exactly located on the fence perimeter. you may return the answer in any order.
are given a 0-indexed array of strings words. each string consists of lowercase english letters only. no letter occurs more than once in any string of words.
strings s1 and s2 are said to be connected if the set of letters of s2 can be obtained from the set of letters of s1 by any one of the following operations:
exactly one letter to the set of the letters of s1.
exactly one letter from the set of the letters of s1.
exactly one letter from the set of the letters of s1 with any letter, including itself.
array words can be divided into one or more non-intersecting groups. a string belongs to a group if any one of the following is true:
is connected to at least one other string of the group.
is the only string present in the group.
that the strings in words should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. it can be proved that such an arrangement is always unique.
an array ans of size 2 where:
is the maximum number of groups words can be divided into, and
is the size of the largest group.
are given two strings current and correct representing two 24-hour times.
times are formatted as "hh:mm", where hh is between 00 and 23, and mm is between 00 and 59. the earliest 24-hour time is 00:00, and the latest is 23:59.
one operation you can increase the time current by 1, 5, 15, or 60 minutes. you can perform this operation any number of times.
the minimum number of operations needed to convert current to correct.
an m x n matrix, return all elements of the matrix in spiral order.
are given a 0-indexed binary string s which represents the types of buildings along a street where:
= '0' denotes that the ith building is an office and
= '1' denotes that the ith building is a restaurant.
a city official, you would like to select 3 buildings for random inspection. however, to ensure variety, no two consecutive buildings out of the selected buildings can be of the same type.
example, given s = "001101", we cannot select the 1st, 3rd, and 5th buildings as that would form "011" which is not allowed due to having two consecutive buildings of the same type.
the number of valid ways to select 3 buildings.
are given two groups of points where the first group has size1 points, the second group has size2 points, and size1 >= size2.
cost of the connection between any two points are given in an size1 x size2 matrix where cost[i][j] is the cost of connecting point i of the first group and point j of the second group. the groups are connected if each point in both groups is connected to one or more points in the opposite group. in other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group.
the minimum cost it takes to connect the two groups.
are given a 0-indexed integer array players, where players[i] represents the ability of the ith player. you are also given a 0-indexed integer array trainers, where trainers[j] represents the training capacity of the jth trainer.
ith player can match with the jth trainer if the player's ability is less than or equal to the trainer's training capacity. additionally, the ith player can be matched with at most one trainer, and the jth trainer can be matched with at most one player.
the maximum number of matchings between players and trainers that satisfy these conditions.
the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
is a positive integer and is less than or equal to the length of the linked list. if the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
may not alter the values in the list's nodes, only nodes themselves may be changed.
are given a 0-indexed integer array nums.
say that an integer x is expressible from nums if there exist some integers 0 <= index1 < index2 < ... < indexk < nums.length for which nums[index1] | nums[index2] | ... | nums[indexk] = x. in other words, an integer is expressible if it can be written as the bitwise or of some subsequence of nums.
the minimum positive non-zero integer that is not expressible from nums.
is an n x n grid, with the top-left cell at (0, 0) and the bottom-right cell at (n - 1, n - 1). you are given the integer n and an integer array startpos where startpos = [startrow, startcol] indicates that a robot is initially at cell (startrow, startcol).
are also given a 0-indexed string s of length m where s[i] is the ith instruction for the robot: 'l' (move left), 'r' (move right), 'u' (move up), and 'd' (move down).
robot can begin executing from any ith instruction in s. it executes the instructions one by one towards the end of s but it stops if either of these conditions is met:
next instruction will move the robot off the grid.
are no more instructions left to execute.
an array answer of length m where answer[i] is the number of instructions the robot can execute if the robot begins executing from the ith instruction in s.
is a tournament where n players are participating. the players are standing in a single row and are numbered from 1 to n based on their initial standing position (player 1 is the first player in the row, player 2 is the second player in the row, etc.).
tournament consists of multiple rounds (starting from round number 1). in each round, the ith player from the front of the row competes against the ith player from the end of the row, and the winner advances to the next round. when the number of players is odd for the current round, the player in the middle automatically advances to the next round.
example, if the row consists of players 1, 2, 4, 6, 7
1 competes against player 7.
2 competes against player 6.
4 automatically advances to the next round.
each round is over, the winners are lined back up in the row based on the original ordering assigned to them initially (ascending order).
players numbered firstplayer and secondplayer are the best in the tournament. they can win against any other player before they compete against each other. if any two other players compete against each other, either of them might win, and thus you may choose the outcome of this round.
the integers n, firstplayer, and secondplayer, return an integer array containing two values, the earliest possible round number and the latest possible round number in which these two players will compete against each other, respectively.
the head of a singly linked list where elements are sorted in ascending order, convert it to a

search tree.
an asyncronous function fn and a time t in milliseconds, return a new time limited version of the input function.
time limited function is a function that is identical to the original unless it takes longer than t milliseconds to fullfill. in that case, it will reject with "time limit exceeded". note that it should reject with a string, not an error.
are given a string s of lowercase english letters and an array widths denoting how many pixels wide each lowercase english letter is. specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.
are trying to write s across several lines, where each line is no longer than 100 pixels. starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. then, from where you stopped in s, continue writing as many letters as you can on the second line. continue this process until you have written all of s.
an array result of length 2 where:
is the total number of lines.
is the width of the last line in pixels.
are given a 0-indexed integer array nums. you are allowed to permute nums into a new array perm of your choosing.
define the greatness of nums be the number of indices 0 <= i < nums.length for which perm[i] > nums[i].
the maximum possible greatness you can achieve after permuting nums.
have n cities labeled from 1 to n. two different cities with labels x and y are directly connected by a bidirectional road if and only if x and y share a common divisor strictly greater than some threshold. more formally, cities with labels x and y have a road between them if there exists an integer z such that all of the following are true:
% z == 0,
% z == 0, and
> threshold.
the two integers, n and threshold, and an array of queries, you must determine for each queries[i] = [ai, bi] if cities ai and bi are connected directly or indirectly. (i.e. there is some path between them).
an array answer, where answer.length == queries.length and answer[i] is true if for the ith query, there is a path between ai and bi, or answer[i] is false if there is no path.
the root of a binary tree and an integer targetsum, return the number of paths where the sum of the values along the path equals targetsum.
path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).
an integer array nums, your goal is to make all elements in nums equal. to complete one operation, follow these steps:
the largest value in nums. let its index be i (0-indexed) and its value be largest. if there are multiple elements with the largest value, pick the smallest i.
the next largest value in nums strictly smaller than largest. let its value be nextlargest.
nums[i] to nextlargest.
the number of operations to make all elements in nums equal.
are given an array of characters letters that is sorted in non-decreasing order, and a character target. there are at least two different characters in letters.
the smallest character in letters that is lexicographically greater than target. if such a character does not exist, return the first character in letters.
sequence x1, x2, ..., xn is fibonacci-like if:
>= 3
+ xi+1 == xi+2 for all i + 2 <= n
a strictly increasing array arr of positive integers forming a sequence, return the length of the longest fibonacci-like subsequence of arr. if one does not exist, return 0.
subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. for example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].
are given two 0-indexed integer arrays servers and tasks of lengths n and m respectively. servers[i] is the weight of the ith server, and tasks[j] is the time needed to process the jth task in seconds.
are assigned to the servers using a task queue. initially, all servers are free, and the queue is empty.
second j, the jth task is inserted into the queue (starting with the 0th task being inserted at second 0). as long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the smallest weight, and in case of a tie, it is assigned to a free server with the smallest index.
there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. if multiple servers become free at the same time, then multiple tasks from the queue will be assigned in order of insertion following the weight and index priorities above.
server that is assigned task j at second t will be free again at second t + tasks[j].
an array ans of length m, where ans[j] is the index of the server the jth task will be assigned to.
the array ans.
a string s, return the longest


s.
schema
dailysales

column name | type |

date_id | date |
make_name | varchar |
lead_id | int |
partner_id | int |

table does not have a primary key.
table contains the date and the name of the product sold and the ids of the lead and partner it was sold to.
name consists of only lowercase english letters.
an sql query that will, for each date_id and make_name, return the number of distinct lead_id's and distinct partner_id's.
the result table in any order.
query result format is in the following example.
are given an array of strings products and a string searchword.
a system that suggests at most three product names from products after each character of searchword is typed. suggested products should have common prefix with searchword. if there are more than three products with a common prefix return the three lexicographically minimums products.
a list of lists of the suggested products after each character of searchword is typed.
are given a 0-indexed array of positive integers w where w[i] describes the weight of the ith index.
need to implement the function pickindex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. the probability of picking an index i is w[i] / sum(w).
example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).
a snapshotarray that supports the following interface:
length) initializes an array-like data structure with the given length. initially, each element equals 0.
set(index, val) sets the element at the given index to be equal to val.
snap() takes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.
get(index, snap_id) returns the value at the given index, at the time we took the snapshot with the given snap_id
an integer num, return the number of steps to reduce it to zero.
one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.
tree is an undirected graph in which any two vertices are connected by exactly one path. in other words, any connected graph without simple cycles is a tree.
a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. when you select a node x as the root, the result tree has height h. among all possible rooted trees, those with minimum height (i.e. min(h)) are called minimum height trees (mhts).
a list of all mhts' root labels. you can return the answer in any order.
height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.
an array arr of integers, check if there exist two indices i and j such that :
!= j
<= i, j < arr.length
== 2 * arr[j]
are given an m x n integer array grid. there is a robot initially located at the top-left corner (i.e., grid[0][0]). the robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). the robot can only move either down or right at any point in time.
obstacle and space are marked as 1 or 0 respectively in grid. a path that the robot takes cannot include any square that is an obstacle.
the number of possible unique paths that the robot can take to reach the bottom-right corner.
testcases are generated so that the answer will be less than or equal to 2 * 109.
schema
employee

column name | type |

id | int |
salary | int |

is the primary key column for this table.
row of this table contains information about the salary of an employee.
an sql query to report the nth highest salary from the employee table. if there is no nth highest salary, the query should report null.
query result format is in the following example.
are given an array rectangles where rectangles[i] = [li, wi] represents the ith rectangle of length li and width wi.
can cut the ith rectangle to form a square with a side length of k if both k <= li and k <= wi. for example, if you have a rectangle [4,6], you can cut it to get a square with a side length of at most 4.
maxlen be the side length of the largest square you can obtain from any of the given rectangles.
the number of rectangles that can make a square with a side length of maxlen.
a string s, return true if the s can be palindrome after deleting at most one character from it.
an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
is only one repeated number in nums, return this repeated number.
must solve the problem without modifying the array nums and uses only constant extra space.
an array of digit strings nums and a digit string target, return the number of pairs of indices (i, j) (where i != j) such that the concatenation of nums[i] + nums[j] equals target.
the grammar given below, strings can represent a set of lowercase words. let r(expr) denote the set of words the expression represents.
grammar can best be understood through simple examples:
letters represent a singleton set containing that word.
= {"a"}
= {"w"}
we take a comma-delimited list of two or more expressions, we take the union of possibilities.
= {"a","b","c"}
= {"a","b","c"} (notice the final set only contains each word at most once)
we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.
= {"ac","ad","bc","bd"}
= {"abdfg", "abdfh", "abefg", "abefh", "acdfg", "acdfh", "acefg", "acefh"}
the three rules for our grammar:
every lowercase letter x, we have r(x) = {x}.
expressions e1, e2, ... , ek with k >= 2, we have r({e1, e2, ...}) = r(e1) âª r(e2) âª ...
expressions e1 and e2, we have r(e1 + e2) = {a + b for (a, b) in r(e1) ã r(e2)}, where + denotes concatenation, and ã denotes the cartesian product.
an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents.
a matrix and a target, return the number of non-empty submatrices that sum to target.
submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.
submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate that is different: for example, if x1 != x1'.
is a rectangular brick wall in front of you with n rows of bricks. the ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. the total width of each row is the same.
a vertical line from the top to the bottom and cross the least bricks. if your line goes through the edge of a brick, then the brick is not considered as crossed. you cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.
the 2d array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.
is an m x n binary grid matrix with all the values set 0 initially. design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. all the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.
your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.
the solution class:
m, int n) initializes the object with the size of the binary matrix m and n.
flip() returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1.
reset() resets all the values of the matrix to be 0.
an integer n, return true if it is a power of two. otherwise, return false.
integer n is a power of two, if there exists an integer x such that n == 2x.
have n bags numbered from 0 to n - 1. you are given two 0-indexed integer arrays capacity and rocks. the ith bag can hold a maximum of capacity[i] rocks and currently contains rocks[i] rocks. you are also given an integer additionalrocks, the number of additional rocks you can place in any of the bags.
the maximum number of bags that could have full capacity after placing the additional rocks in some bags.
a last-in-first-out (lifo) stack using only two queues. the implemented stack should support all the functions of a normal stack (push, top, pop, and empty).
the mystack class:
push(int x) pushes element x to the top of the stack.
pop() removes the element on the top of the stack and returns it.
top() returns the element on the top of the stack.
empty() returns true if the stack is empty, false otherwise.

must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.
on your language, the queue may not be supported natively. you may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.
are given a 2d integer array descriptions where descriptions[i] = [parenti, childi, islefti] indicates that parenti is the parent of childi in a binary tree of unique values. furthermore,
islefti == 1, then childi is the left child of parenti.
islefti == 0, then childi is the right child of parenti.
the binary tree described by descriptions and return its root.
test cases will be generated such that the binary tree is valid.
are given a 0-indexed m x n integer matrix grid consisting of distinct integers from 0 to m * n - 1. you can move in this matrix from a cell to any other cell in the next row. that is, if you are in cell (x, y) such that x < m - 1, you can move to any of the cells (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1). note that it is not possible to move from cells in the last row.
possible move has a cost given by a 0-indexed 2d array movecost of size (m * n) x n, where movecost[i][j] is the cost of moving from a cell with value i to a cell in column j of the next row. the cost of moving from cells in the last row of grid can be ignored.
cost of a path in grid is the sum of all values of cells visited plus the sum of costs of all the moves made. return the minimum cost of a path that starts from any cell in the first row and ends at any cell in the last row.
a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.
you are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().
a binary tree, find its minimum depth.
minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
a leaf is a node with no children.
are given an n x n binary grid board. in each move, you can swap any two rows with each other, or any two columns with each other.
the minimum number of moves to transform the board into a chessboard board. if the task is impossible, return -1.
chessboard board is a board where no 0's and no 1's are 4-directionally adjacent.
two objects o1 and o2, check if they are deeply equal.
two objects to be deeply equal, they must contain the same keys, and the associated values must also be deeply equal. two objects are also considered deeply equal if they pass the === equality check.
may assume both objects are the output of json.parse. in other words, they are valid json.
solve it without using lodash's _.isequal() function.
a string s, determine if it is valid.
string s is valid if, starting with an empty string t = "", you can transform t into s after performing the following operation any number of times:
string "abc" into any position in t. more formally, t becomes tleft + "abc" + tright, where t == tleft + tright. note that tleft and tright may be empty.
true if s is a valid string, otherwise, return false.
an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.
are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.
graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. if there is no outgoing edge from node i, then edges[i] == -1.
the length of the longest cycle in the graph. if no cycle exists, return -1.
cycle is a path that starts and ends at the same node.
are keeping the scores for a baseball game with strange rules. at the beginning of the game, you start with an empty record.
are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following:
integer x.
a new score of x.

a new score that is the sum of the previous two scores.

a new score that is the double of the previous score.

the previous score, removing it from the record.
the sum of all the scores on the record after applying all the operations.
test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.
are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.
and return the queue that is represented by the input array people. the returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).
the root of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.
the maximum product of the sums of the two subtrees. since the answer may be too large, return it modulo 109 + 7.
that you need to maximize the answer before taking the mod and not after taking it.
are given an n x n integer matrix. you can do the following operation any number of times:
any two adjacent elements of matrix and multiply each of them by -1.
elements are considered adjacent if and only if they share a border.
goal is to maximize the summation of the matrix's elements. return the maximum sum of the matrix's elements using the operation mentioned above.
a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for:
- k <= r <= i + k,
- k <= c <= j + k, and
c) is a valid position in the matrix.
are given two positive integer arrays nums and numsdivide. you can delete any number of elements from nums.
the minimum number of deletions such that the smallest element in nums divides all the elements of numsdivide. if this is not possible, return -1.
that an integer x divides y if y % x == 0.
a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.
the timemap class:
initializes the object of the data structure.
set(string key, string value, int timestamp) stores the key key with the value value at the given time timestamp.
get(string key, int timestamp) returns a value such that set was called previously, with timestamp_prev <= timestamp. if there are multiple such values, it returns the value associated with the largest timestamp_prev. if there are no values, it returns "".
are given an integer array nums and a positive integer k. you can choose any subsequence of the array and sum all of its elements together.
define the k-sum of the array as the kth largest subsequence sum that can be obtained (not necessarily distinct).
the k-sum of the array.
subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
that the empty subsequence is considered to have a sum of 0.
an integer array nums and an integer k, return the kth largest element in the array.
that it is the kth largest element in the sorted order, not the kth distinct element.
must solve it in o(n) time complexity.
an integer numrows, return the first numrows of pascal's triangle.
pascal's triangle, each number is the sum of the two numbers directly above it as shown:
a binary string s and a positive integer n, return true if the binary representation of all the integers in the range [1, n] are substrings of s, or false otherwise.
substring is a contiguous sequence of characters within a string.
kingdom consists of a king, his children, his grandchildren, and so on. every once in a while, someone in the family dies or a child is born.
kingdom has a well-defined order of inheritance that consists of the king as the first member. let's define the recursive function successor(x, curorder), which given a person x and the inheritance order so far, returns who should be the next person after x in the order of inheritance.
curorder):
x has no children or all of x's children are in curorder:
x is the king return null
return successor(x's parent, curorder)
return x's oldest child who's not in curorder
example, assume we have a kingdom that consists of the king, his children alice and bob (alice is older than bob), and finally alice's son jack.
the beginning, curorder will be ["king"].
successor(king, curorder) will return alice, so we append to curorder to get ["king", "alice"].
successor(alice, curorder) will return jack, so we append to curorder to get ["king", "alice", "jack"].
successor(jack, curorder) will return bob, so we append to curorder to get ["king", "alice", "jack", "bob"].
successor(bob, curorder) will return null. thus the order of inheritance will be ["king", "alice", "jack", "bob"].
the above function, we can always obtain a unique order of inheritance.
the throneinheritance class:
kingname) initializes an object of the throneinheritance class. the name of the king is given as part of the constructor.
birth(string parentname, string childname) indicates that parentname gave birth to childname.
death(string name) indicates the death of name. the death of the person doesn't affect the successor function nor the current inheritance order. you can treat it as just marking the person as dead.
getinheritanceorder() returns a list representing the current order of inheritance excluding dead people.
are given two integer arrays persons and times. in an election, the ith vote was cast for persons[i] at time times[i].
each query at a time t, find the person that was leading the election at time t. votes cast at time t will count towards our query. in the case of a tie, the most recent vote (among tied candidates) wins.
the topvotedcandidate class:
persons, int[] times) initializes the object with the persons and times arrays.
q(int t) returns the number of the person that was leading the election at time t according to the mentioned rules.
a function fn, return a memoized version of that function.
memoized function is a function that will never be called twice with the same inputs. instead it will return a cached value.
can assume there are 3 possible input functions: sum, fib, and factorial.
accepts two integers a and b and returns a + b.
accepts a single integer n and returns 1 if n <= 1 or fib(n - 1) + fib(n - 2) otherwise.
accepts a single integer n and returns 1 if n <= 1 or factorial(n - 1) * n otherwise.
hamming distance between two integers is the number of positions at which the corresponding bits are different.
two integers x and y, return the hamming distance between them.
an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.
subarray is a contiguous part of an array.
an array arr of positive integers sorted in a strictly increasing order, and an integer k.
the kth positive integer that is missing from this array.
and bob continue their games with piles of stones. there are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stonevalue.
and bob take turns, with alice starting first. on each player's turn, that player can take 1, 2, or 3 stones from the first remaining stones in the row.
score of each player is the sum of the values of the stones taken. the score of each player is 0 initially.
objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. the game continues until all the stones have been taken.
alice and bob play optimally.
"alice" if alice will win, "bob" if bob will win, or "tie" if they will end the game with the same score.
are given a 0-indexed string array words, where words[i] consists of lowercase english letters.
one operation, select any index i such that 0 < i < words.length and words[i - 1] and words[i] are anagrams, and delete words[i] from words. keep performing this operation as long as you can select an index that satisfies the conditions.
words after performing all operations. it can be shown that selecting the indices for each operation in any arbitrary order will lead to the same result.
anagram is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. for example, "dacb" is an anagram of "abdc".
sequence is special if it consists of a positive number of 0s, followed by a positive number of 1s, then a positive number of 2s.
example, [0,1,2] and [0,0,1,1,1,2] are special.
contrast, [2,1,0], [1], and [0,1,2,0] are not special.
an array nums (consisting of only integers 0, 1, and 2), return the number of different subsequences that are special. since the answer may be very large, return it modulo 109 + 7.
subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. two subsequences are different if the set of indices chosen are different.
are given a 0-indexed array nums consisting of positive integers, representing targets on a number line. you are also given an integer space.
have a machine which can destroy targets. seeding the machine with some nums[i] allows it to destroy all targets with values that can be represented as nums[i] + c * space, where c is any non-negative integer. you want to destroy the maximum number of targets in nums.
the minimum value of nums[i] you can seed the machine with to destroy the maximum number of targets.
two integers n and k, return an array of all the integers of length n where the difference between every two consecutive digits is k. you may return the answer in any order.
that the integers should not have leading zeros. integers as 02 and 043 are not allowed.
a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.
we would like to merge these accounts. two accounts definitely belong to the same person if there is some common email to both accounts. note that even if two accounts have the same name, they may belong to different people as people could have the same name. a person can have any number of accounts initially, but all of their accounts definitely have the same name.
merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. the accounts themselves can be returned in any order.
a special ranking system, each voter gives a rank from highest to lowest to all teams participating in the competition.
ordering of teams is decided by who received the most position-one votes. if two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. if two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.
are given an array of strings votes which is the votes of all voters in the ranking systems. sort all teams according to the ranking system described above.
a string of all teams sorted by the ranking system.
are two types of persons:
good person: the person who always tells the truth.
bad person: the person who might tell the truth and might lie.
are given a 0-indexed 2d integer array statements of size n x n that represents the statements made by n people about each other. more specifically, statements[i][j] could be one of the following:
which represents a statement made by person i that person j is a bad person.
which represents a statement made by person i that person j is a good person.
represents that no statement is made by person i about person j.
no person ever makes a statement about themselves. formally, we have that statements[i][i] = 2 for all 0 <= i < n.
the maximum number of people who can be good based on the statements made by the n people.
are given an m x n matrix board, representing the current state of a crossword puzzle. the crossword contains lowercase english letters (from solved words), ' ' to represent any empty cells, and '#' to represent any blocked cells.
word can be placed horizontally (left to right or right to left) or vertically (top to bottom or bottom to top) in the board if:
does not occupy a cell containing the character '#'.
cell each letter is placed in must either be ' ' (empty) or match the letter already on the board.
must not be any empty cells ' ' or other lowercase letters directly left or right of the word if the word was placed horizontally.
must not be any empty cells ' ' or other lowercase letters directly above or below the word if the word was placed vertically.
a string word, return true if word can be placed in board, or false otherwise.
are given an integer n denoting the number of nodes of a weighted directed graph. the nodes are numbered from 0 to n - 1.
are also given a 2d integer array edges where edges[i] = [fromi, toi, weighti] denotes that there exists a directed edge from fromi to toi with weight weighti.
you are given three distinct integers src1, src2, and dest denoting three distinct nodes of the graph.
the minimum weight of a subgraph of the graph such that it is possible to reach dest from both src1 and src2 via a set of edges of this subgraph. in case such a subgraph does not exist, return -1.
subgraph is a graph whose vertices and edges are subsets of the original graph. the weight of a subgraph is the sum of weights of its constituent edges.
an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them.
grid is said to be valid if all the cells above the main diagonal are zeros.
the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.
main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n).
a class that allows getting and setting key-value pairs, however a time until expiration is associated with each key.
class has three public methods:
value, duration): accepts an integer key, an integer value, and a duration in milliseconds. once the duration has elapsed, the key should be inaccessible. the method should return true if the same un-expired key already exists and false otherwise. both the value and duration should be overwritten if the key already exists.
if an un-expired key exists, it should return the associated value. otherwise it should return -1.
returns the count of un-expired keys.
are given an array nums of size n consisting of distinct integers from 1 to n and a positive integer k.
the number of non-empty subarrays in nums that have a median equal to k.

median of an array is the middle element after sorting the array in ascending order. if the array is of even length, the median is the left middle element.
example, the median of [2,3,1,4] is 2, and the median of [8,4,3,5,1] is 4.
subarray is a contiguous part of an array.
play the minesweeper game (wikipedia, online game)!
are given an m x n char matrix board representing the game board where:
represents an unrevealed mine,
represents an unrevealed empty square,
represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),
('1' to '8') represents how many mines are adjacent to this revealed square, and
represents a revealed mine.
are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares ('m' or 'e').
the board after revealing this position according to the following rules:
a mine 'm' is revealed, then the game is over. you should change it to 'x'.
an empty square 'e' with no adjacent mines is revealed, then change it to a revealed blank 'b' and all of its adjacent unrevealed squares should be revealed recursively.
an empty square 'e' with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines.
the board when no more squares will be revealed.
are given an integer array nums and an integer k. find the maximum subarray sum of all the subarrays of nums that meet the following conditions:
length of the subarray is k, and
the elements of the subarray are distinct.
the maximum subarray sum of all the subarrays that meet the conditions. if no subarray meets the conditions, return 0.
subarray is a contiguous non-empty sequence of elements within an array.
are given the head of a linked list, which contains a series of integers separated by 0's. the beginning and end of the linked list will have node.val == 0.
every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. the modified list should not contain any 0's.
the head of the modified linked list.
numeric value of a lowercase character is defined as its position (1-indexed) in the alphabet, so the numeric value of a is 1, the numeric value of b is 2, the numeric value of c is 3, and so on.
numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. for example, the numeric value of the string "abe" is equal to 1 + 2 + 5 = 8.
are given two integers n and k. return the lexicographically smallest string with length equal to n and numeric value equal to k.
that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.
are given a 0-indexed integer array nums of length n.
contains a valid split at index i if the following are true:
sum of the first i + 1 elements is greater than or equal to the sum of the last n - i - 1 elements.
is at least one element to the right of i. that is, 0 <= i < n - 1.
the number of valid splits in nums.
an integer array nums that may contain duplicates, return all possible

power set).
solution set must not contain duplicate subsets. return the solution in any order.
an integer array arr, return the number of distinct bitwise ors of all the non-empty subarrays of arr.
bitwise or of a subarray is the bitwise or of each integer in the subarray. the bitwise or of a subarray of one integer is that integer.
subarray is a contiguous non-empty sequence of elements within an array.
car starts at position 0 and speed +1 on an infinite number line. your car can go into negative positions. your car drives automatically according to a sequence of instructions 'a' (accelerate) and 'r' (reverse):
you get an instruction 'a', your car does the following:
+= speed
*= 2
you get an instruction 'r', your car does the following:
your speed is positive then speed = -1
speed = 1
position stays the same.
example, after commands "aar", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1.
a target position target, return the length of the shortest sequence of instructions to get there.
sentence consists of lowercase letters ('a' to 'z'), digits ('0' to '9'), hyphens ('-'), punctuation marks ('!', '.', and ','), and spaces (' ') only. each sentence can be broken down into one or more tokens separated by one or more spaces ' '.
token is a valid word if all three of the following are true:
only contains lowercase letters, hyphens, and/or punctuation (no digits).
is at most one hyphen '-'. if present, it must be surrounded by lowercase characters ("a-b" is valid, but "-ab" and "ab-" are not valid).
is at most one punctuation mark. if present, it must be at the end of the token ("ab,", "cd!", and "." are valid, but "a!b" and "c.," are not valid).
of valid words include "a-b.", "afad", "ba-c", "a!", and "!".
a string sentence, return the number of valid words in sentence.
are given an integer array nums. you want to maximize the number of points you get by performing the following operation any number of times:
any nums[i] and delete it to earn nums[i] points. afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.
the maximum number of points you can earn by applying the above operation some number of times.
an array arr and a chunk size size, return a chunked array. a chunked array contains the original elements in arr, but consists of subarrays each of length size. the length of the last subarray may be less than size if arr.length is not evenly divisible by size.
may assume the array is the output of json.parse. in other words, it is valid json.
solve it without using lodash's _.chunk function.
an integer array nums, design an algorithm to randomly shuffle the array. all permutations of the array should be equally likely as a result of the shuffling.
the solution class:
nums) initializes the object with the integer array nums.
reset() resets the array to its original configuration and returns it.
shuffle() returns a random shuffling of the array.
are given an integer array nums of length n, and an integer array queries of length m.
an array answer of length m where answer[i] is the maximum size of a subsequence that you can take from nums such that the sum of its elements is less than or equal to queries[i].
subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
parentheses string is a non-empty string consisting only of '(' and ')'. it is valid if any of the following conditions is true:
is ().
can be written as ab (a concatenated with b), where a and b are valid parentheses strings.
can be written as (a), where a is a valid parentheses string.
are given an m x n matrix of parentheses grid. a valid parentheses string path in the grid is a path satisfying all of the following conditions:
path starts from the upper left cell (0, 0).
path ends at the bottom-right cell (m - 1, n - 1).
path only ever moves down or right.
resulting parentheses string formed by the path is valid.
true if there exists a valid parentheses string path in the grid. otherwise, return false.
the root of a binary tree and an integer targetsum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetsum.
leaf is a node with no children.
have n flower seeds. every seed must be planted first before it can begin to grow, then bloom. planting a seed takes time and so does the growth of a seed. you are given two 0-indexed integer arrays planttime and growtime, of length n each:
is the number of full days it takes you to plant the ith seed. every day, you can work on planting exactly one seed. you do not have to work on planting the same seed on consecutive days, but the planting of a seed is not complete until you have worked planttime[i] days on planting it in total.
is the number of full days it takes the ith seed to grow after being completely planted. after the last day of its growth, the flower blooms and stays bloomed forever.
the beginning of day 0, you can plant the seeds in any order.
the earliest possible day where all seeds are blooming.
a string s, reverse the string according to the following rules:
the characters that are not english letters remain in the same position.
the english letters (lowercase or uppercase) should be reversed.
s after reversing it.
are given a string s containing one or more words. every consecutive pair of words is separated by a single space ' '.
string t is an anagram of string s if the ith word of t is a permutation of the ith word of s.
example, "acb dfe" is an anagram of "abc def", but "def cab" and "adc bef" are not.
the number of distinct anagrams of s. since the answer may be very large, return it modulo 109 + 7.
two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.
string is represented by an array if the array elements concatenated in order forms the string.
are given an integer array nums and an integer threshold.
any subarray of nums of length k such that every element in the subarray is greater than threshold / k.
the size of any such subarray. if there is no such subarray, return -1.
subarray is a contiguous non-empty sequence of elements within an array.
is an authentication system that works with authentication tokens. for each session, the user will receive a new authentication token that will expire timetolive seconds after the currenttime. if the token is renewed, the expiry time will be extended to expire timetolive seconds after the (potentially different) currenttime.
the authenticationmanager class:
timetolive) constructs the authenticationmanager and sets the timetolive.
tokenid, int currenttime) generates a new token with the given tokenid at the given currenttime in seconds.
tokenid, int currenttime) renews the unexpired token with the given tokenid at the given currenttime in seconds. if there are no unexpired tokens with the given tokenid, the request is ignored, and nothing happens.
currenttime) returns the number of unexpired tokens at the given currenttime.
that if a token expires at time t, and another action happens on time t (renew or countunexpiredtokens), the expiration takes place before the other actions.
a 2d grid consists of 0s (land) and 1s (water). an island is a maximal 4-directionally connected group of 0s and a closed island is an island totally (all left, top, right, bottom) surrounded by 1s.
the number of closed islands.
are playing the following nim game with your friend:
there is a heap of stones on the table.
and your friend will alternate taking turns, and you go first.
each turn, the person whose turn it is will remove 1 to 3 stones from the heap.
one who removes the last stone is the winner.
n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.
the array nums, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence.
there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. a subsequence of an array can be obtained by erasing some (possibly zero) elements from the array.
that the solution with the given constraints is guaranteed to be unique. also return the answer sorted in non-increasing order.
you are an awesome parent and want to give your children some cookies. but, you should give each child at most one cookie.
child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. if s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. your goal is to maximize the number of your content children and output the maximum number.
are given two integer arrays nums1 and nums2. you are tasked to implement a data structure that supports queries of two types:
a positive integer to an element of a given index in the array nums2.
the number of pairs (i, j) such that nums1[i] + nums2[j] equals a given value (0 <= i < nums1.length and 0 <= j < nums2.length).
the findsumpairs class:
nums1, int[] nums2) initializes the findsumpairs object with two integer arrays nums1 and nums2.
add(int index, int val) adds val to nums2[index], i.e., apply nums2[index] += val.
count(int tot) returns the number of pairs (i, j) such that nums1[i] + nums2[j] == tot.
fibonacci numbers, commonly denoted f(n) form a sequence, called the fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. that is,
= 0, f(1) = 1
= f(n - 1) + f(n - 2), for n > 1.
n, calculate f(n).
an integer array nums and an integer k, split nums into k non-empty subarrays such that the largest sum of any subarray is minimized.
the minimized largest sum of the split.
subarray is a contiguous part of the array.
the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. the formatted layout matrix should be constructed using the following rules:
height of the tree is height and the number of rows m should be equal to height + 1.
number of columns n should be equal to 2height+1 - 1.
the root node in the middle of the top row (more formally, at location res[0][(n-1)/2]).
each node that has been placed in the matrix at position res[r][c], place its left child at res[r+1][c-2height-r-1] and its right child at res[r+1][c+2height-r-1].
this process until all the nodes in the tree have been placed.
empty cells should contain the empty string "".
the constructed matrix res.
an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.
the maximum product you can get.
are given a 0-indexed integer array nums. for each index i (1 <= i <= nums.length - 2) the beauty of nums[i] equals:
if nums[j] < nums[i] < nums[k], for all 0 <= j < i and for all i < k <= nums.length - 1.
if nums[i - 1] < nums[i] < nums[i + 1], and the previous condition is not satisfied.
if none of the previous conditions holds.
the sum of beauty of all nums[i] where 1 <= i <= nums.length - 2.
schema
followers

column name | type |

user_id | int |
follower_id | int |

follower_id) is the primary key for this table.
table contains the ids of a user and a follower in a social media app where the follower follows the user.
an sql query that will, for each user, return the number of followers.
the result table ordered by user_id in ascending order.
query result format is in the following example.
day 1, one person discovers a secret.
are given an integer delay, which means that each person will share the secret with a new person every day, starting from delay days after discovering the secret. you are also given an integer forget, which means that each person will forget the secret forget days after discovering it. a person cannot share the secret on the same day they forgot it, or on any day afterwards.
an integer n, return the number of people who know the secret at the end of day n. since the answer may be very large, return it modulo 109 + 7.
are n kids with candies. you are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extracandies, denoting the number of extra candies that you have.
a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extracandies, they will have the greatest number of candies among all the kids, or false otherwise.
that multiple kids can have the greatest number of candies.
complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.
an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.
the cbtinserter class:
root) initializes the data structure with the root of the complete binary tree.
insert(int v) inserts a treenode into the tree with value node.val == val so that the tree remains complete, and returns the value of the parent of the inserted treenode.
get_root() returns the root node of the tree.
two strings first and second, consider occurrences in some text of the form "first second third", where second comes immediately after first, and third comes immediately after second.
an array of all the words third for each occurrence of "first second third".
is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
an algorithm to serialize and deserialize a binary search tree. there is no restriction on how your serialization/deserialization algorithm should work. you need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.
encoded string should be as compact as possible.
valid number can be split up into these components (in order):
decimal number or an integer.
an 'e' or 'e', followed by an integer.
decimal number can be split up into these components (in order):
a sign character (either '+' or '-').
of the following formats:
or more digits, followed by a dot '.'.
or more digits, followed by a dot '.', followed by one or more digits.
dot '.', followed by one or more digits.
integer can be split up into these components (in order):
a sign character (either '+' or '-').
or more digits.
example, all the following are valid numbers: ["2", "0089", "-0.1", "+3.14", "4.", "-.9", "2e10", "-90e3", "3e+7", "+6e-1", "53.5e93", "-123.456e789"], while the following are not valid numbers: ["abc", "1a", "1e", "e3", "99e2.5", "--6", "-+3", "95a54e53"].
a string s, return true if s is a valid number.
an m x n integer matrix heightmap representing the height of each unit cell in a 2d elevation map, return the volume of water it can trap after raining.
an array of integers arr, you are initially positioned at the first index of the array.
one step you can jump from index i to index:
+ 1 where: i + 1 < arr.length.
- 1 where: i - 1 >= 0.
where: arr[i] == arr[j] and i != j.
the minimum number of steps to reach the last index of the array.
that you can not jump outside of the array at any time.
is a test that has n types of questions. you are given an integer target and a 0-indexed 2d integer array types where types[i] = [counti, marksi] indicates that there are counti questions of the ith type, and each one of them is worth marksi points.
the number of ways you can earn exactly target points in the exam. since the answer may be too large, return it modulo 109 + 7.
that questions of the same type are indistinguishable.
example, if there are 3 questions of the same type, then solving the 1st and 2nd questions is the same as solving the 1st and 3rd questions, or the 2nd and 3rd questions.
the root of a binary tree, flatten the tree into a "linked list":
"linked list" should use the same treenode class where the right child pointer points to the next node in the list and the left child pointer is always null.
"linked list" should be in the same order as a pre-order traversal of the binary tree.
schema
actordirector

column name | type |

actor_id | int |
director_id | int |
timestamp | int |

is the primary key column for this table.
a sql query for a report that provides the pairs (actor_id, director_id) where the actor has cooperated with the director at least three times.
the result table in any order.
query result format is in the following example.
are given a positive integer primefactors. you are asked to construct a positive integer n that satisfies the following conditions:
number of prime factors of n (not necessarily distinct) is at most primefactors.
number of nice divisors of n is maximized. note that a divisor of n is nice if it is divisible by every prime factor of n. for example, if n = 12, then its prime factors are [2,2,3], then 6 and 12 are nice divisors, while 3 and 4 are not.
the number of nice divisors of n. since that number can be too large, return it modulo 109 + 7.
that a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. the prime factors of a number n is a list of prime numbers such that their product equals n.
generic microwave supports cooking times for:
least 1 second.
most 99 minutes and 99 seconds.
set the cooking time, you push at most four digits. the microwave normalizes what you push as four digits by prepending zeroes. it interprets the first two digits as the minutes and the last two digits as the seconds. it then adds them up as the cooking time. for example,
push 9 5 4 (three digits). it is normalized as 0954 and interpreted as 9 minutes and 54 seconds.
push 0 0 0 8 (four digits). it is interpreted as 0 minutes and 8 seconds.
push 8 0 9 0. it is interpreted as 80 minutes and 90 seconds.
push 8 1 3 0. it is interpreted as 81 minutes and 30 seconds.
are given integers startat, movecost, pushcost, and targetseconds. initially, your finger is on the digit startat. moving the finger above any specific digit costs movecost units of fatigue. pushing the digit below the finger once costs pushcost units of fatigue.
can be multiple ways to set the microwave to cook for targetseconds seconds but you are interested in the way with the minimum cost.
the minimum cost to set targetseconds seconds of cooking time.
that one minute consists of 60 seconds.
an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.
span of the stock's price in one day is the maximum number of consecutive days (starting from that day and going backward) for which the stock price was less than or equal to the price of that day.
example, if the prices of the stock in the last four days is [7,2,1,2] and the price of the stock today is 2, then the span of today is 4 because starting from today, the price of the stock was less than or equal 2 for 4 consecutive days.
if the prices of the stock in the last four days is [7,34,1,2] and the price of the stock today is 8, then the span of today is 3 because starting from today, the price of the stock was less than or equal 8 for 3 consecutive days.
the stockspanner class:
initializes the object of the class.
next(int price) returns the span of the stock's price given that today's price is price.
are n workers. you are given two integer arrays quality and wage where quality[i] is the quality of the ith worker and wage[i] is the minimum wage expectation for the ith worker.
want to hire exactly k workers to form a paid group. to hire a group of k workers, we must pay them according to the following rules:
worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.
worker in the paid group must be paid at least their minimum wage expectation.
the integer k, return the least amount of money needed to form a paid group satisfying the above conditions. answers within 10-5 of the actual answer will be accepted.
are given two strings of the same length s and t. in one step you can choose any character of t and replace it with another character.
the minimum number of steps to make t an anagram of s.
anagram of a string is a string that contains the same characters with a different (or the same) ordering.
an m x n binary matrix mat, return the number of submatrices that have all ones.
are given an array of non-negative integers nums and an integer k. in one operation, you may choose any element from nums and increment it by 1.
the maximum product of nums after at most k operations. since the answer may be very large, return it modulo 109 + 7. note that you should maximize the product before taking the modulo.
are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. all the scores are guaranteed to be unique.
athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. the placement of each athlete determines their rank:
1st place athlete's rank is "gold medal".
2nd place athlete's rank is "silver medal".
3rd place athlete's rank is "bronze medal".
the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is "x").
an array answer of size n where answer[i] is the rank of the ith athlete.
are given a 0-indexed string text and another 0-indexed string pattern of length 2, both of which consist of only lowercase english letters.
can add either pattern[0] or pattern[1] anywhere in text exactly once. note that the character can be added even at the beginning or at the end of text.
the maximum number of times pattern can occur as a subsequence of the modified text.
subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
an integer n, return true if n has exactly three positive divisors. otherwise, return false.
integer m is a divisor of n if there exists an integer k such that n = k * m.
an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. find the smallest divisor such that the result mentioned above is less than or equal to threshold.
result of the division is rounded to the nearest integer greater than or equal to that element. (for example: 7/3 = 3 and 10/2 = 5).
test cases are generated so that there will be an answer.
an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.
are given an m x n binary matrix matrix.
can choose any number of columns in the matrix and flip every cell in that column (i.e., change the value of the cell from 0 to 1 or vice versa).
the maximum number of rows that have all values equal after some number of flips.
schema
product

column name | type |

product_id | int |
product_name | varchar |
unit_price | int |

is the primary key of this table.
row of this table indicates the name and the price of each product.
sales

column name | type |

seller_id | int |
product_id | int |
buyer_id | int |
sale_date | date |
quantity | int |
price | int |

table has no primary key, it can have repeated rows.
is a foreign key to the product table.
row of this table contains some information about one sale.
an sql query that reports the products that were only sold in the first quarter of 2019. that is, between 2019-01-01 and 2019-03-31 inclusive.
the result table in any order.
query result format is in the following example.
are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters 'a' to 'z'.
the lexicographically smallest string that starts at a leaf of this tree and ends at the root.
a reminder, any shorter prefix of a string is lexicographically smaller.
example, "ab" is lexicographically smaller than "aba".
leaf of a node is a node that has no children.
are implementing a program to use as your calendar. we can add a new event if adding the event will not cause a double booking.
double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).
event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.
the mycalendar class:
initializes the calendar object.
book(int start, int end) returns true if the event can be added to the calendar successfully without causing a double booking. otherwise, return false and do not add the event to the calendar.
are given an integer array nums and an integer k. append k unique positive integers that do not appear in nums to nums such that the resulting total sum is minimum.
the sum of the k integers appended to nums.
the "100 game" two players take turns adding, to a running total, any integer from 1 to 10. the player who first causes the running total to reach or exceed 100 wins.
if we change the game so that players cannot re-use integers?
example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.
two integers maxchoosableinteger and desiredtotal, return true if the first player to move can force a win, otherwise, return false. assume both players play optimally.
an array of integers preorder, which represents the preorder traversal of a bst (i.e., binary search tree), construct the tree and return its root.
is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.
binary search tree is a binary tree where for every node, any descendant of node.left has a value strictly less than node.val, and any descendant of node.right has a value strictly greater than node.val.
preorder traversal of a binary tree displays the value of the node first, then traverses node.left, then traverses node.right.
are given a 0-indexed array nums of length n.
distinct difference array of nums is an array diff of length n such that diff[i] is equal to the number of distinct elements in the suffix nums[i + 1, ..., n - 1] subtracted from the number of distinct elements in the prefix nums[0, ..., i].
the distinct difference array of nums.
that nums[i, ..., j] denotes the subarray of nums starting at index i and ending at index j inclusive. particularly, if i > j then nums[i, ..., j] denotes an empty subarray.
are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. the record only contains the following three characters:
absent.
late.
present.
student is eligible for an attendance award if they meet both of the following criteria:
student was absent ('a') for strictly fewer than 2 days total.
student was never late ('l') for 3 or more consecutive days.
true if the student is eligible for an attendance award, or false otherwise.
an 8 x 8 chessboard, there is exactly one white rook 'r' and some number of white bishops 'b', black pawns 'p', and empty squares '.'.
the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. a rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn. the number of available captures for the white rook is the number of pawns that the rook is attacking.
the number of available captures for the white rook.
are n people that are split into some unknown number of groups. each person is labeled with a unique id from 0 to n - 1.
are given an integer array groupsizes, where groupsizes[i] is the size of the group that person i is in. for example, if groupsizes[1] = 3, then person 1 must be in a group of size 3.
a list of groups such that each person i is in a group of size groupsizes[i].
person should appear in exactly one group, and every person must be in a group. if there are multiple answers, return any of them. it is guaranteed that there will be at least one valid solution for the given input.
is a function signfunc(x) that returns:
if x is positive.
if x is negative.
if x is equal to 0.
are given an integer array nums. let product be the product of all values in the array nums.
signfunc(product).
bitset is a data structure that compactly stores bits.
the bitset class:
size) initializes the bitset with size bits, all of which are 0.
fix(int idx) updates the value of the bit at the index idx to 1. if the value was already 1, no change occurs.
unfix(int idx) updates the value of the bit at the index idx to 0. if the value was already 0, no change occurs.
flip() flips the values of each bit in the bitset. in other words, all bits with value 0 will now have value 1 and vice versa.
all() checks if the value of each bit in the bitset is 1. returns true if it satisfies the condition, false otherwise.
one() checks if there is at least one bit in the bitset with value 1. returns true if it satisfies the condition, false otherwise.
count() returns the total number of bits in the bitset which have value 1.
tostring() returns the current composition of the bitset. note that in the resultant string, the character at the ith index should coincide with the value at the ith bit of the bitset.
are given the root of a binary tree containing digits from 0 to 9 only.
root-to-leaf path in the tree represents a number.
example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
the total sum of all root-to-leaf numbers. test cases are generated so that the answer will fit in a 32-bit integer.
leaf node is a node with no children.
schema
trips

column name | type |

id | int |
client_id | int |
driver_id | int |
city_id | int |
status | enum |
request_at | date |

is the primary key for this table.
table holds all taxi trips. each trip has a unique id, while client_id and driver_id are foreign keys to the users_id at the users table.
is an enum type of ('completed', 'cancelled_by_driver', 'cancelled_by_client').
users

column name | type |

users_id | int |
banned | enum |
role | enum |

is the primary key for this table.
table holds all users. each user has a unique users_id, and role is an enum type of ('client', 'driver', 'partner').
is an enum type of ('yes', 'no').
cancellation rate is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day.
a sql query to find the cancellation rate of requests with unbanned users (both client and driver must not be banned) each day between "2013-10-01" and "2013-10-03". round cancellation rate to two decimal points.
the result table in any order.
query result format is in the following example.
strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.
interleaving of two strings s and t is a configuration where s and t are divided into n and m

such that:
= s1 + s2 + ... + sn
= t1 + t2 + ... + tm
- m| <= 1
interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
a + b is the concatenation of strings a and b.
an iterator that supports the peek operation on an existing iterator in addition to the hasnext and the next operations.
the peekingiterator class:
nums) initializes the object with the given integer iterator iterator.
next() returns the next element in the array and moves the pointer to the next element.
hasnext() returns true if there are still elements in the array.
peek() returns the next element in the array without moving the pointer.
each language may have a different implementation of the constructor and iterator, but they all support the int next() and boolean hasnext() functions.
are some prizes on the x-axis. you are given an integer array prizepositions that is sorted in non-decreasing order, where prizepositions[i] is the position of the ith prize. there could be different prizes at the same position on the line. you are also given an integer k.
are allowed to select two segments with integer endpoints. the length of each segment must be k. you will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). the two selected segments may intersect.
example if k = 2, you can choose segments [1, 3] and [2, 4], and you will win any prize i that satisfies 1 <= prizepositions[i] <= 3 or 2 <= prizepositions[i] <= 4.
the maximum number of prizes you can win if you choose the two segments optimally.
an undirected tree consisting of n vertices numbered from 1 to n. a frog starts jumping from vertex 1. in one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. the frog can not jump back to a visited vertex. in case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.
edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi.
the probability that after t seconds the frog is on the vertex target. answers within 10-5 of the actual answer will be accepted.
the root of a binary search tree (bst), return the minimum difference between the values of any two different nodes in the tree.
has n candies, where the ith candy is of type candytype[i]. alice noticed that she started to gain weight, so she visited a doctor.
doctor advised alice to only eat n / 2 of the candies she has (n is always even). alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.
the integer array candytype of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.
is a group of n members, and a list of various crimes they could commit. the ith crime generates a profit[i] and requires group[i] members to participate in it. if a member participates in one crime, that member can't participate in another crime.
call a profitable scheme any subset of these crimes that generates at least minprofit profit, and the total number of members participating in that subset of crimes is at most n.
the number of schemes that can be chosen. since the answer may be very large, return it modulo 109 + 7.
a singly linked list, return a random node's value from the linked list. each node must have the same probability of being chosen.
the solution class:
head) initializes the object with the head of the singly-linked list head.
getrandom() chooses a node randomly from the list and returns its value. all the nodes of the list should be equally likely to be chosen.
are given an array of positive integers arr. perform some operations (possibly none) on arr so that it satisfies these conditions:
value of the first element in arr must be 1.
absolute difference between any 2 adjacent elements must be less than or equal to 1. in other words, abs(arr[i] - arr[i - 1]) <= 1 for each i where 1 <= i < arr.length (0-indexed). abs(x) is the absolute value of x.
are 2 types of operations that you can perform any number of times:
the value of any element of arr to a smaller positive integer.
the elements of arr to be in any order.
the maximum possible value of an element in arr after performing the operations to satisfy the conditions.
wants to save money for his first car. he puts money in the leetcode bank every day.
starts by putting in $1 on monday, the first day. every day from tuesday to sunday, he will put in $1 more than the day before. on every subsequent monday, he will put in $1 more than the previous monday.
n, return the total amount of money he will have in the leetcode bank at the end of the nth day.
score of an array is defined as the product of its sum and its length.
example, the score of [1, 2, 3, 4, 5] is (1 + 2 + 3 + 4 + 5) * 5 = 75.
a positive integer array nums and an integer k, return the number of non-empty subarrays of nums whose score is strictly less than k.
subarray is a contiguous sequence of elements within an array.
are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.
graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. if there is no outgoing edge from i, then edges[i] == -1.
are also given two integers node1 and node2.
the index of the node that can be reached from both node1 and node2, such that the maximum between the distance from node1 to that node, and from node2 to that node is minimized. if there are multiple answers, return the node with the smallest index, and if no possible answer exists, return -1.
that edges may contain cycles.
string s is nice if, for every letter of the alphabet that s contains, it appears both in uppercase and lowercase. for example, "ababb" is nice because 'a' and 'a' appear, and 'b' and 'b' appear. however, "aba" is not because 'b' appears, but 'b' does not.
a string s, return the longest substring of s that is nice. if there are multiple, return the substring of the earliest occurrence. if there are none, return an empty string.
an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.
are given a positive integer n representing n cities numbered from 1 to n. you are also given a 2d array roads where roads[i] = [ai, bi, distancei] indicates that there is a bidirectional road between cities ai and bi with a distance equal to distancei. the cities graph is not necessarily connected.
score of a path between two cities is defined as the minimum distance of a road in this path.
the minimum possible score of a path between cities 1 and n.

path is a sequence of roads between two cities.
is allowed for a path to contain the same road multiple times, and you can visit cities 1 and n multiple times along the path.
test cases are generated such that there is at least one path between 1 and n.
a stream of integers, implement a data structure that checks if the last k integers parsed in the stream are equal to value.
the datastream class:
value, int k) initializes the object with an empty integer stream and the two integers value and k.
consec(int num) adds num to the stream of integers. returns true if the last k integers are equal to value, and false otherwise. if there are less than k integers, the condition does not hold true, so returns false.
a hashmap without using any built-in hash table libraries.
the myhashmap class:
initializes the object with an empty map.
put(int key, int value) inserts a (key, value) pair into the hashmap. if the key already exists in the map, update the corresponding value.
get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
remove(key) removes the key and its corresponding value if the map contains the mapping for the key.
are given an array of positive integers nums and want to erase a subarray containing unique elements. the score you get by erasing the subarray is equal to the sum of its elements.
the maximum score you can get by erasing exactly one subarray.
array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).
schema
seat

column name | type |

id | int |
student | varchar |

is the primary key column for this table.
row of this table indicates the name and the id of a student.
is a continuous increment.
an sql query to swap the seat id of every two consecutive students. if the number of students is odd, the id of the last student is not swapped.
the result table ordered by id in ascending order.
query result format is in the following example.
are given two 0-indexed integer arrays nums1 and nums2, both of length n.
can choose two integers left and right where 0 <= left <= right < n and swap the subarray nums1[left...right] with the subarray nums2[left...right].
example, if nums1 = [1,2,3,4,5] and nums2 = [11,12,13,14,15] and you choose left = 1 and right = 2, nums1 becomes [1,12,13,4,5] and nums2 becomes [11,2,3,14,15].
may choose to apply the mentioned operation once or not do anything.
score of the arrays is the maximum of sum(nums1) and sum(nums2), where sum(arr) is the sum of all the elements in the array arr.
the maximum possible score.
subarray is a contiguous sequence of elements within an array. arr[left...right] denotes the subarray that contains the elements of nums between indices left and right (inclusive).
an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. if there is no future day for which this is possible, keep answer[i] == 0 instead.
the root of a binary tree, determine if it is a complete binary tree.
a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. it can have between 1 and 2h nodes inclusive at the last level h.
schema
activities:

column name | type |

sell_date | date |
product | varchar |

is no primary key for this table, it may contain duplicates.
row of this table contains the product name and the date it was sold in a market.
an sql query to find for each date the number of different products sold and their names.
sold products names for each date should be sorted lexicographically.
the result table ordered by sell_date.
query result format is in the following example.
define the lcp matrix of any 0-indexed string word of n lowercase english letters as an n x n grid such that:
is equal to the length of the longest common prefix between the substrings word[i,n-1] and word[j,n-1].
an n x n matrix lcp, return the alphabetically smallest string word that corresponds to lcp. if there is no such string, return an empty string.
string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. for example, "aabd" is lexicographically smaller than "aaca" because the first position they differ is at the third letter, and 'b' comes before 'c'.
are n pieces arranged in a line, and each piece is colored either by 'a' or by 'b'. you are given a string colors of length n where colors[i] is the color of the ith piece.
and bob are playing a game where they take alternating turns removing pieces from the line. in this game, alice moves first.
is only allowed to remove a piece colored 'a' if both its neighbors are also colored 'a'. she is not allowed to remove pieces that are colored 'b'.
is only allowed to remove a piece colored 'b' if both its neighbors are also colored 'b'. he is not allowed to remove pieces that are colored 'a'.
and bob cannot remove pieces from the edge of the line.
a player cannot make a move on their turn, that player loses and the other player wins.
alice and bob play optimally, return true if alice wins, or return false if bob wins.
schema
users

column name | type |

id | int |
name | varchar |

is the primary key for this table.
is the name of the user.
rides

column name | type |

id | int |
user_id | int |
distance | int |

is the primary key for this table.
is the id of the user who traveled the distance "distance".
an sql query to report the distance traveled by each user.
the result table ordered by travelled_distance in descending order, if two or more users traveled the same distance, order them by their name in ascending order.
query result format is in the following example.
are given a 0-indexed string s and a 0-indexed integer array spaces that describes the indices in the original string where spaces will be added. each space should be inserted before the character at the given index.
example, given s = "enjoyyourcoffee" and spaces = [5, 9], we place spaces before 'y' and 'c', which are at indices 5 and 9 respectively. thus, we obtain "enjoy your coffee".
the modified string after the spaces have been added.
are given an array of strings ideas that represents a list of names to be used in the process of naming a company. the process of naming a company is as follows:
2 distinct names from ideas, call them ideaa and ideab.
the first letters of ideaa and ideab with each other.
both of the new names are not found in the original ideas, then the name ideaa ideab (the concatenation of ideaa and ideab, separated by a space) is a valid company name.
it is not a valid name.
the number of distinct valid names for the company.
schema
users

column name | type |

account | int |
name | varchar |

is the primary key for this table.
row of this table contains the account number of each user in the bank.
will be no two users having the same name in the table.
transactions

column name | type |

trans_id | int |
account | int |
amount | int |
transacted_on | date |

is the primary key for this table.
row of this table contains all changes made to all accounts.
is positive if the user received money and negative if they transferred money.
accounts start with a balance of 0.
an sql query to report the name and balance of users with a balance higher than 10000. the balance of an account is equal to the sum of the amounts of all transactions involving that account.
the result table in any order.
query result format is in the following example.
an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. in other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible.
that the subarray needs to be non-empty after deleting one element.
a weighted undirected connected graph with n vertices numbered from 0 to n - 1, and an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional and weighted edge between nodes ai and bi. a minimum spanning tree (mst) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight.
all the critical and pseudo-critical edges in the given graph's minimum spanning tree (mst). an mst edge whose deletion from the graph would cause the mst weight to increase is called a critical edge. on the other hand, a pseudo-critical edge is that which can appear in some msts but not all.
that you can return the indices of the edges in any order.
are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item. you are also given a rule represented by two strings, rulekey and rulevalue.
ith item is said to match the rule if one of the following is true:
== "type" and rulevalue == typei.
== "color" and rulevalue == colori.
== "name" and rulevalue == namei.
the number of items that match the given rule.
two integers a and b, return the sum of the two integers without using the operators + and -.
is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.
are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.
an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.
company is planning to interview 2n people. given the array costs where costs[i] = [acosti, bcosti], the cost of flying the ith person to city a is acosti, and the cost of flying the ith person to city b is bcosti.
the minimum cost to fly every person to a city such that exactly n people arrive in each city.
the root of a binary tree, return the average value of the nodes on each level in the form of an array. answers within 10-5 of the actual answer will be accepted.
an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].
true if there is a 132 pattern in nums, otherwise, return false.
a 2d grid of size m x n and an integer k. you need to shift the grid k times.
one shift operation:
at grid[i][j] moves to grid[i][j + 1].
at grid[i][n - 1] moves to grid[i + 1][0].
at grid[m - 1][n - 1] moves to grid[0][0].
the 2d grid after applying shift operation k times.
are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succprob[i].
two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability.
there is no path from start to end, return 0. your answer will be accepted if it differs from the correct answer by at most 1e-5.
is throwing n darts on a very large wall. you are given an array darts where darts[i] = [xi, yi] is the position of the ith dart that alice threw on the wall.
knows the positions of the n darts on the wall. he wants to place a dartboard of radius r on the wall so that the maximum number of darts that alice throws lies on the dartboard.
the integer r, return the maximum number of darts that can lie on the dartboard.
the root of a binary tree, return the leftmost value in the last row of the tree.
are given a 0-indexed string s that you must perform k replacement operations on. the replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k.
complete the ith replacement operation:
if the substring sources[i] occurs at index indices[i] in the original string s.
it does not occur, do nothing.
if it does occur, replace that substring with targets[i].
example, if s = "abcd", indices[i] = 0, sources[i] = "ab", and targets[i] = "eee", then the result of this replacement will be "eeecd".
replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other. the testcases will be generated such that the replacements will not overlap.
example, a testcase with s = "abc", indices = [0, 1], and sources = ["ab","bc"] will not be generated because the "ab" and "bc" replacements overlap.
the resulting string after performing all replacement operations on s.
substring is a contiguous sequence of characters in a string.
are given a 0-indexed m x n integer matrix grid. your initial position is at the top-left cell (0, 0).
from the cell (i, j), you can move to one of the following cells:
(i, k) with j < k <= grid[i][j] + j (rightward movement), or
(k, j) with i < k <= grid[i][j] + i (downward movement).
the minimum number of cells you need to visit to reach the bottom-right cell (m - 1, n - 1). if there is no valid path, return -1.
are given an integer array nums. a subsequence of nums is called a square streak if:
length of the subsequence is at least 2, and
sorting the subsequence, each element (except the first element) is the square of the previous number.
the length of the longest square streak in nums, or return -1 if there is no square streak.
subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. each digit must be rotated - we cannot choose to leave it alone.
number is valid if each digit remains a digit after rotation. for example:
1, and 8 rotate to themselves,
and 5 rotate to each other (in this case they are rotated in a different direction, in other words, 2 or 5 gets mirrored),
and 9 rotate to each other, and
rest of the numbers do not rotate to any other number and become invalid.
an integer n, return the number of good integers in the range [1, n].
are given an integer array nums and an integer k.
the longest subsequence of nums that meets the following requirements:
subsequence is strictly increasing and
difference between adjacent elements in the subsequence is at most k.
the length of the longest subsequence that meets the requirements.
subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
binary watch has 4 leds on the top to represent the hours (0-11), and 6 leds on the bottom to represent the minutes (0-59). each led represents a zero or one, with the least significant bit on the right.
example, the below binary watch reads "4:51".
an integer turnedon which represents the number of leds that are currently on (ignoring the pm), return all possible times the watch could represent. you may return the answer in any order.
hour must not contain a leading zero.
example, "01:00" is not valid. it should be "1:00".
minute must be consist of two digits and may contain a leading zero.
example, "10:2" is not valid. it should be "10:02".
a string s, find the length of the longest

repeating characters.
are given a non-negative integer array nums. in one operation, you must:
a positive integer x such that x is less than or equal to the smallest non-zero element in nums.
x from every positive element in nums.
the minimum number of operations to make every element in nums equal to 0.
an integer array nums, return the third distinct maximum number in this array. if the third maximum does not exist, return the maximum number.
beauty of a string is the difference in frequencies between the most frequent and least frequent characters.
example, the beauty of "abaacc" is 3 - 1 = 2.
a string s, return the sum of beauty of all of its substrings.
a generator function that returns a generator object which yields the fibonacci sequence.
fibonacci sequence is defined by the relation xn = xn-1 + xn-2.
first few numbers of the series are 0, 1, 1, 2, 3, 5, 8, 13.
an integer array arr, return the length of a maximum size turbulent subarray of arr.
subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.
formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:
i <= k < j:
> arr[k + 1] when k is odd, and
< arr[k + 1] when k is even.
for i <= k < j:
> arr[k + 1] when k is even, and
< arr[k + 1] when k is odd.
have a wooden plank of the length n units. some ants are walking on the plank, each ant moves with a speed of 1 unit per second. some of the ants move to the left, the other move to the right.
two ants moving in two different directions meet at some point, they change their directions and continue moving again. assume changing directions does not take any additional time.
an ant reaches one end of the plank at a time t, it falls out of the plank immediately.
an integer n and two integer arrays left and right, the positions of the ants moving to the left and the right, return the moment when the last ant(s) fall out of the plank.
are given an array nums consisting of positive integers.
with score = 0, apply the following algorithm:
the smallest integer of the array that is not marked. if there is a tie, choose the one with the smallest index.
the value of the chosen integer to score.
the chosen element and its two adjacent elements if they exist.
until all the array elements are marked.
the score you get after applying the above algorithm.
an array of strings words, return the first palindromic string in the array. if there is no such string, return an empty string "".
string is palindromic if it reads the same forward and backward.
an integer n, return a counter function. this counter function initially returns n and then returns 1 more than the previous value every subsequent time it is called (n, n + 1, n + 2, etc).
are given three integers n, m and k. consider the following algorithm to find the maximum element of an array of positive integers:
should build the array arr which has the following properties:
has exactly n integers.
<= arr[i] <= m where (0 <= i < n).
applying the mentioned algorithm to arr, the value search_cost is equal to k.
the number of ways to build the array arr under the mentioned conditions. as the answer may grow large, the answer must be computed modulo 109 + 7.
are given an integer array gifts denoting the number of gifts in various piles. every second, you do the following:
the pile with the maximum number of gifts.
there is more than one pile with the maximum number of gifts, choose any.
behind the floor of the square root of the number of gifts in the pile. take the rest of the gifts.
the number of gifts remaining after k seconds.
two strings s and goal, return true if and only if s can become goal after some number of shifts on s.
shift on s consists of moving the leftmost character of s to the rightmost position.
example, if s = "abcde", then it will be "bcdea" after one shift.
an integer array nums and an integer k, modify the array in the following way:
an index i and replace nums[i] with -nums[i].
should apply this process exactly k times. you may choose the same index i multiple times.
the largest possible sum of the array after modifying it in this way.
delivery company wants to build a new service center in a new city. the company knows the positions of all the customers in this city on a 2d-map and wants to build the new center in a position such that the sum of the euclidean distances to all customers is minimum.
an array positions where positions[i] = [xi, yi] is the position of the ith customer on the map, return the minimum sum of the euclidean distances to all customers.
other words, you need to choose the position of the service center [xcentre, ycentre] such that the following formula is minimized:
within 10-5 of the actual value will be accepted.
are given an array tasks where tasks[i] = [actuali, minimumi]:
is the actual amount of energy you spend to finish the ith task.
is the minimum amount of energy you require to begin the ith task.
example, if the task is [10, 12] and your current energy is 11, you cannot start this task. however, if your current energy is 13, you can complete this task, and your energy will be 3 after finishing it.
can finish the tasks in any order you like.
the minimum initial amount of energy you will need to finish all the tasks.
an integer array nums, handle multiple queries of the following type:
the sum of the elements of nums between indices left and right inclusive where left <= right.
the numarray class:
nums) initializes the object with the integer array nums.
sumrange(int left, int right) returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously. each server has infinite computational capacity but cannot handle more than one request at a time. the requests are assigned to servers according to a specific algorithm:
ith (0-indexed) request arrives.
all servers are busy, the request is dropped (not handled at all).
the (i % k)th server is available, assign the request to that server.
assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). for example, if the ith server is busy, try to assign the request to the (i+1)th server, then the (i+2)th server, and so on.
are given a strictly increasing array arrival of positive integers, where arrival[i] represents the arrival time of the ith request, and another array load, where load[i] represents the load of the ith request (the time it takes to complete). your goal is to find the busiest server(s). a server is considered busiest if it handled the most number of requests successfully among all the servers.
a list containing the ids (0-indexed) of the busiest server(s). you may return the ids in any order.
an integer num, return three consecutive integers (as a sorted array) that sum to num. if num cannot be expressed as the sum of three consecutive integers, return an empty array.
n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\', or blank space ' '. these characters divide the square into contiguous regions.
the grid grid represented as a string array, return the number of regions.
that backslash characters are escaped, so a '\' is represented as '\\'.
are several cards arranged in a row, and each card has an associated number of points. the points are given in the integer array cardpoints.
one step, you can take one card from the beginning or from the end of the row. you have to take exactly k cards.
score is the sum of the points of the cards you have taken.
the integer array cardpoints and the integer k, return the maximum score you can obtain.
call a positive integer special if all of its digits are distinct.
a positive integer n, return the number of special integers that belong to the interval [1, n].
have two types of tiles: a 2 x 1 domino shape and a tromino shape. you may rotate these shapes.
an integer n, return the number of ways to tile an 2 x n board. since the answer may be very large, return it modulo 109 + 7.
a tiling, every square must be covered by a tile. two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.
are given an integer finalsum. split it into a sum of a maximum number of unique positive even integers.
example, given finalsum = 12, the following splits are valid (unique positive even integers summing up to finalsum): (12), (2 + 10), (2 + 4 + 6), and (4 + 8). among them, (2 + 4 + 6) contains the maximum number of integers. note that finalsum cannot be split into (2 + 2 + 4 + 4) as all the numbers should be unique.
a list of integers that represent a valid split containing a maximum number of integers. if no valid split exists for finalsum, return an empty list. you may return the integers in any order.
a linked list, swap every two adjacent nodes and return its head. you must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)
are given an array points, an integer angle, and your location, where location = [posx, posy] and points[i] = [xi, yi] both denote integral coordinates on the x-y plane.
you are facing directly east from your position. you cannot move from your position, but you can rotate. in other words, posx and posy cannot be changed. your field of view in degrees is represented by angle, determining how wide you can see from any given view direction. let d be the amount in degrees that you rotate counterclockwise. then, your field of view is the inclusive range of angles [d - angle/2, d + angle/2].
browser does not support the video tag or this video format.
can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view.
can be multiple points at one coordinate. there may be points at your location, and you can always see these points regardless of your rotation. points do not obstruct your vision to other points.
the maximum number of points you can see.
you are given the following code:
foobar {
void foo() {
(int i = 0; i < n; i++) {




void bar() {
(int i = 0; i < n; i++) {




same instance of foobar will be passed to two different threads:
a will call foo(), while
b will call bar().
the given program to output "foobar" n times.
have n boxes labeled from 0 to n - 1. you are given four arrays: status, candies, keys, and containedboxes where:
is 1 if the ith box is open and 0 if the ith box is closed,
is the number of candies in the ith box,
is a list of the labels of the boxes you can open after opening the ith box.
is a list of the boxes you found inside the ith box.
are given an integer array initialboxes that contains the labels of the boxes you initially have. you can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.
the maximum number of candies you can get following the rules above.
are given a non-negative floating point number rounded to two decimal places celsius, that denotes the temperature in celsius.
should convert celsius into kelvin and fahrenheit and return it as an array ans = [kelvin, fahrenheit].
the array ans. answers within 10-5 of the actual answer will be accepted.
that:
= celsius + 273.15
= celsius * 1.80 + 32.00
are given a 0-indexed integer array nums. in one operation, select any non-negative integer x and an index i, then update nums[i] to be equal to nums[i] and (nums[i] xor x).
that and is the bitwise and operation and xor is the bitwise xor operation.
the maximum possible bitwise xor of all elements of nums after applying the operation any number of times.
are given an integer array nums. you have an integer array arr of the same length with all values set to 0 initially. you also have the following modify function:
want to use the modify function to convert arr to nums using the minimum number of calls.
the minimum number of function calls to make nums from arr.
test cases are generated so that the answer fits in a 32-bit signed integer.
is a one-dimensional garden on the x-axis. the garden starts at the point 0 and ends at the point n. (i.e the length of the garden is n).
are n + 1 taps located at points [0, 1, ..., n] in the garden.
an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open.
the minimum number of taps that should be open to water the whole garden, if the garden cannot be watered return -1.
two string arrays words1 and words2, return the number of strings that appear exactly once in each of the two arrays.
an array of integers arr, and three integers a, b and c. you need to find the number of good triplets.
triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true:
<= i < j < k < arr.length
- arr[j]| <= a
- arr[k]| <= b
- arr[k]| <= c
|x| denotes the absolute value of x.
the number of good triplets.
a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. the word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. if word is not a substring of sequence, word's maximum k-repeating value is 0.
strings sequence and word, return the maximum k-repeating value of word in sequence.
and bob take turns playing a game, with alice starting first.
are given a string num of even length consisting of digits and '?' characters. on each turn, a player will do the following if there is still at least one '?' in num:
an index i where num[i] == '?'.
num[i] with any digit between '0' and '9'.
game ends when there are no more '?' characters in num.
bob to win, the sum of the digits in the first half of num must be equal to the sum of the digits in the second half. for alice to win, the sums must not be equal.
example, if the game ended with num = "243801", then bob wins because 2+4+3 = 8+0+1. if the game ended with num = "243803", then alice wins because 2+4+3 != 8+0+3.
alice and bob play optimally, return true if alice will win and false if bob will win.
are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. the root of the tree is the node 0, and each node of the tree has a label which is a lower-case character given in the string labels (i.e. the node with the number i has the label labels[i]).
edges array is given on the form edges[i] = [ai, bi], which means there is an edge between nodes ai and bi in the tree.
an array of size n where ans[i] is the number of nodes in the subtree of the ith node which have the same label as node i.
subtree of a tree t is the tree consisting of a node in t and all of its descendant nodes.
a row of dominoes, tops[i] and bottoms[i] represent the top and bottom halves of the ith domino. (a domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)
may rotate the ith domino, so that tops[i] and bottoms[i] swap values.
the minimum number of rotations so that all the values in tops are the same, or all the values in bottoms are the same.
it cannot be done, return -1.
two strings s and t, your goal is to convert s into t in k moves or less.
the ith (1 <= i <= k) move you can:
any index j (1-indexed) from s, such that 1 <= j <= s.length and j has not been chosen in any previous move, and shift the character at that index i times.
nothing.
a character means replacing it by the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). shifting a character by i means applying the shift operations i times.
that any index j can be picked at most once.
true if it's possible to convert s into t in no more than k moves, otherwise return false.
the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.
node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.
happy string is a string that:
only of letters of the set ['a', 'b', 'c'].
!= s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).
example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings and strings "aa", "baa" and "ababbc" are not happy strings.
two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.
the kth string of this list or return an empty string if there are less than k happy strings of length n.
are n persons on a social media website. you are given an integer array ages where ages[i] is the age of the ith person.
person x will not send a friend request to a person y (x != y) if any of the following conditions is true:
<= 0.5 * age[x] + 7
> age[x]
> 100 && age[x] < 100
x will send a friend request to y.
that if x sends a request to y, y will not necessarily send a request to x. also, a person will not send a friend request to themself.
the total number of friend requests made.
is a tree (i.e. a connected, undirected graph with no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges.
are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node. you are also given a 2d integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.
good path is a simple path that satisfies the following conditions:
starting node and the ending node have the same value.
nodes between the starting node and the ending node have values less than or equal to the starting node (i.e. the starting node's value should be the maximum value along the path).
the number of distinct good paths.
that a path and its reverse are counted as the same path. for example, 0 -> 1 is considered to be the same as 1 -> 0. a single node is also considered as a valid path.
school is trying to take an annual photo of all the students. the students are asked to stand in a single file line in non-decreasing order by height. let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.
are given an integer array heights representing the current order that the students are standing in. each heights[i] is the height of the ith student in line (0-indexed).
the number of indices where heights[i] != expected[i].
the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].
are given an array start where start = [startx, starty] represents your initial position (startx, starty) in a 2d space. you are also given the array target where target = [targetx, targety] represents your target position (targetx, targety).
cost of going from a position (x1, y1) to any other position in the space (x2, y2) is |x2 - x1| + |y2 - y1|.
are also some special roads. you are given a 2d array specialroads where specialroads[i] = [x1i, y1i, x2i, y2i, costi] indicates that the ith special road can take you from (x1i, y1i) to (x2i, y2i) with a cost equal to costi. you can use each special road any number of times.
the minimum cost required to go from (startx, starty) to (targetx, targety).
minimum absolute difference of an array a is defined as the minimum value of |a[i] - a[j]|, where 0 <= i < j < a.length and a[i] != a[j]. if all elements of a are the same, the minimum absolute difference is -1.
example, the minimum absolute difference of the array [5,2,3,7,2] is |2 - 3| = 1. note that it is not 0 because a[i] and a[j] must be different.
are given an integer array nums and the array queries where queries[i] = [li, ri]. for each query i, compute the minimum absolute difference of the subarray nums[li...ri] containing the elements of nums between the 0-based indices li and ri (inclusive).
an array ans where ans[i] is the answer to the ith query.
subarray is a contiguous sequence of elements in an array.
value of |x| is defined as:
if x >= 0.
if x < 0.
are given a 0-indexed array arr consisting of n positive integers, and a positive integer k.
array arr is called k-increasing if arr[i-k] <= arr[i] holds for every index i, where k <= i <= n-1.
example, arr = [4, 1, 5, 2, 6, 2] is k-increasing for k = 2 because:
<= arr[2] (4 <= 5)
<= arr[3] (1 <= 2)
<= arr[4] (5 <= 6)
<= arr[5] (2 <= 2)
the same arr is not k-increasing for k = 1 (because arr[0] > arr[1]) or k = 3 (because arr[0] > arr[3]).
one operation, you can choose an index i and change arr[i] into any positive integer.
the minimum number of operations required to make the array k-increasing for the given k.
are given a string time in the form of hh:mm, where some of the digits in the string are hidden (represented by ?).
valid times are those inclusively between 00:00 and 23:59.
the latest valid time you can get from time by replacing the hidden digits.
are given a positive integer array grades which represents the grades of students in a university. you would like to enter all these students into a competition in ordered non-empty groups, such that the ordering meets the following conditions:
sum of the grades of students in the ith group is less than the sum of the grades of students in the (i + 1)th group, for all groups (except the last).
total number of students in the ith group is less than the total number of students in the (i + 1)th group, for all groups (except the last).
the maximum number of groups that can be formed.
the root of an n-ary tree, return the preorder traversal of its nodes' values.
input serialization is represented in their level order traversal. each group of children is separated by the null value (see examples)
are given an integer array nums. the range of a subarray of nums is the difference between the largest and smallest element in the subarray.
the sum of all subarray ranges of nums.
subarray is a contiguous non-empty sequence of elements within an array.
an array of integers arr and an integer k. find the least number of unique integers after removing exactly k elements.
a function that reverses a string. the input string is given as an array of characters s.
must do this by modifying the input array in-place with o(1) extra memory.
define the string base to be the infinite wraparound string of "abcdefghijklmnopqrstuvwxyz", so base will look like this:

a string s, return the number of unique non-empty substrings of s are present in base.
a string s of '(' , ')' and lowercase english characters.
task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.
a parentheses string is valid if and only if:
is the empty string, contains only lowercase characters, or
can be written as ab (a concatenated with b), where a and b are valid strings, or
can be written as (a), where a is a valid string.
your implementation of the circular double-ended queue (deque).
the mycirculardeque class:
k) initializes the deque with a maximum size of k.
insertfront() adds an item at the front of deque. returns true if the operation is successful, or false otherwise.
insertlast() adds an item at the rear of deque. returns true if the operation is successful, or false otherwise.
deletefront() deletes an item from the front of deque. returns true if the operation is successful, or false otherwise.
deletelast() deletes an item from the rear of deque. returns true if the operation is successful, or false otherwise.
getfront() returns the front item from the deque. returns -1 if the deque is empty.
getrear() returns the last item from deque. returns -1 if the deque is empty.
isempty() returns true if the deque is empty, or false otherwise.
isfull() returns true if the deque is full, or false otherwise.
a string text, you want to use the characters of text to form as many instances of the word "balloon" as possible.
can use each character in text at most once. return the maximum number of instances that can be formed.
has an undirected tree with n nodes labeled from 0 to n - 1. the tree is represented as a 2d integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.
wants bob to find the root of the tree. she allows bob to make several guesses about her tree. in one guess, he does the following:
two distinct integers u and v such that there exists an edge [u, v] in the tree.
tells alice that u is the parent of v in the tree.
guesses are represented by a 2d integer array guesses where guesses[j] = [uj, vj] indicates bob guessed uj to be the parent of vj.
being lazy, does not reply to each of bob's guesses, but just says that at least k of his guesses are true.
the 2d integer arrays edges, guesses and the integer k, return the number of possible nodes that can be the root of alice's tree. if there is no such tree, return 0.
an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.
are given an m x n integer array grid where grid[i][j] could be:
representing the starting square. there is exactly one starting square.
representing the ending square. there is exactly one ending square.
representing empty squares we can walk over.
representing obstacles that we cannot walk over.
the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.
an array of integers nums, you start with an initial positive value startvalue.
each iteration, you calculate the step by step sum of startvalue plus elements in nums (from left to right).
the minimum positive value of startvalue such that the step by step sum is never less than 1.
a binary string s without leading zeros, return true if s contains at most one contiguous segment of ones. otherwise, return false.
an integer array arr, partition the array into (contiguous) subarrays of length at most k. after partitioning, each subarray has their values changed to become the maximum value of that subarray.
the largest sum of the given array after partitioning. test cases are generated so that the answer fits in a 32-bit integer.
are given a string num, representing a large integer, and an integer k.
call some integer wonderful if it is a permutation of the digits in num and is greater in value than num. there can be many wonderful integers. however, we only care about the smallest-valued ones.
example, when num = "5489355142":
1st smallest wonderful integer is "5489355214".
2nd smallest wonderful integer is "5489355241".
3rd smallest wonderful integer is "5489355412".
4th smallest wonderful integer is "5489355421".
the minimum number of adjacent digit swaps that needs to be applied to num to reach the kth smallest wonderful integer.
tests are generated in such a way that kth smallest wonderful integer exists.
are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).
is at least one empty seat, and at least one person sitting.
wants to sit in the seat such that the distance between him and the closest person to him is maximized.
that maximum distance to the closest person.
are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: "xi==yi" or "xi!=yi".here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.
true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.
are given two 2d integer arrays, items1 and items2, representing two sets of items. each array items has the following properties:
= [valuei, weighti] where valuei represents the value and weighti represents the weight of the ith item.
value of each item in items is unique.
a 2d integer array ret where ret[i] = [valuei, weighti], with weighti being the sum of weights of all items with value valuei.
ret should be returned in ascending order by value.
are given an integer array ranks and a character array suits. you have 5 cards where the ith card has a rank of ranks[i] and a suit of suits[i].
following are the types of poker hands you can make from best to worst:
five cards of the same suit.
of a kind": three cards of the same rank.
two cards of the same rank.
card": any single card.
a string representing the best type of poker hand you can make with the given cards.
that the return values are case-sensitive.
are given an encoded string s. to decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:
the character read is a letter, that letter is written onto the tape.
the character read is a digit d, the entire current tape is repeatedly written d - 1 more times in total.
an integer k, return the kth letter (1-indexed) in the decoded string.
the root of a binary tree, replace the value of each node in the tree with the sum of all its cousins' values.
nodes of a binary tree are cousins if they have the same depth with different parents.
the root of the modified tree.
that the depth of a node is the number of edges in the path from the root node to it.
a string n representing an integer, return the closest integer (not including itself), which is a palindrome. if there is a tie, return the smaller one.
closest is defined as the absolute difference minimized between two integers.
an array of strings words, return the words that can be typed using letters of the alphabet on only one row of american keyboard like the image below.
the american keyboard:
first row consists of the characters "qwertyuiop",
second row consists of the characters "asdfghjkl", and
third row consists of the characters "zxcvbnm".
are given a 0-indexed string pattern of length n consisting of the characters 'i' meaning increasing and 'd' meaning decreasing.
0-indexed string num of length n + 1 is created using the following conditions:
consists of the digits '1' to '9', where each digit is used at most once.
pattern[i] == 'i', then num[i] < num[i + 1].
pattern[i] == 'd', then num[i] > num[i + 1].
the lexicographically smallest possible string num that meets the conditions.
the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.
are given two strings word1 and word2. you want to construct a string merge in the following way: while either word1 or word2 are non-empty, choose one of the following options:
word1 is non-empty, append the first character in word1 to merge and delete it from word1.
example, if word1 = "abc" and merge = "dv", then after choosing this operation, word1 = "bc" and merge = "dva".
word2 is non-empty, append the first character in word2 to merge and delete it from word2.
example, if word2 = "abc" and merge = "", then after choosing this operation, word2 = "bc" and merge = "a".
the lexicographically largest merge you can construct.
string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. for example, "abcd" is lexicographically larger than "abcc" because the first position they differ is at the fourth character, and d is greater than c.
are given two 0-indexed strings s and target. you can take some letters from s and rearrange them to form new strings.
the maximum number of copies of target that can be formed by taking letters from s and rearranging them.
are given a string num consisting of digits only.
the largest palindromic integer (in the form of a string) that can be formed using digits taken from num. it should not contain leading zeroes.

do not need to use all the digits of num, but you must use at least one digit.
digits can be reordered.
are given two 0-indexed integer arrays nums1 and nums2 of equal length n and a positive integer k. you must choose a subsequence of indices from nums1 of length k.
chosen indices i0, i1, ..., ik - 1, your score is defined as:
sum of the selected elements from nums1 multiplied with the minimum of the selected elements from nums2.
can defined simply as: (nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1]).
the maximum possible score.
subsequence of indices of an array is a set that can be derived from the set {0, 1, ..., n-1} by deleting some or no elements.
are given an integer array of unique positive integers nums. consider the following graph:
are nums.length nodes, labeled nums[0] to nums[nums.length - 1],
is an undirected edge between nums[i] and nums[j] if nums[i] and nums[j] share a common factor greater than 1.
the size of the largest connected component in the graph.
an array arr that represents a permutation of numbers from 1 to n.
have a binary string of size n that initially has all its bits set to zero. at each step i (assuming both the binary string and arr are 1-indexed) from 1 to n, the bit at position arr[i] is set to 1.
are also given an integer m. find the latest step at which there exists a group of ones of length m. a group of ones is a contiguous substring of 1's such that it cannot be extended in either direction.
the latest step at which there exists a group of ones of length exactly m. if no such group exists, return -1.
an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.
the sum of the three integers.
may assume that each input would have exactly one solution.
are given a 0-indexed binary string floor, which represents the colors of tiles on a floor:
= '0' denotes that the ith tile of the floor is colored black.
the other hand, floor[i] = '1' denotes that the ith tile of the floor is colored white.
are also given numcarpets and carpetlen. you have numcarpets black carpets, each of length carpetlen tiles. cover the tiles with the given carpets such that the number of white tiles still visible is minimum. carpets may overlap one another.
the minimum number of white tiles still visible.
are playing a solitaire game with three piles of stones of sizes a, b, and c respectively. each turn you choose two different non-empty piles, take one stone from each, and add 1 point to your score. the game stops when there are fewer than two non-empty piles (meaning there are no more available moves).
three integers a, b, and c, return the maximum score you can get.
are given a 0-indexed array nums consisiting of positive integers. you can do the following operation on the array any number of times:
an index i such that 0 <= i < n - 1 and replace either of nums[i] or nums[i+1] with their gcd value.
the minimum number of operations to make all elements of nums equal to 1. if it is impossible, return -1.
gcd of two integers is the greatest common divisor of the two integers.
schema
weather

column name | type |

id | int |
recorddate | date |
temperature | int |

is the primary key for this table.
table contains information about the temperature on a certain day.
an sql query to find all dates' id with higher temperatures compared to its previous dates (yesterday).
the result table in any order.
query result format is in the following example.
an integer array arr and a mapping function fn, return a new array with a transformation applied to each element.
returned array should be created such that returnedarray[i] = fn(arr[i], i).
solve it without the built-in array.map method.
friend is typing his name into a keyboard. sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.
examine the typed characters of the keyboard. return true if it is possible that it was your friends name, with some characters (possibly none) being long pressed.
a string formula representing a chemical formula, return the count of each atom.
atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.
or more digits representing that element's count may follow if the count is greater than 1. if the count is 1, no digits will follow.
example, "h2o" and "h2o2" are possible, but "h1o2" is impossible.
formulas are concatenated together to produce another formula.
example, "h2o2he3mg4" is also a formula.
formula placed in parentheses, and a count (optionally added) is also a formula.
example, "(h2o2)" and "(h2o2)3" are formulas.
the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.
test cases are generated so that all the values in the output fit in a 32-bit integer.
are given a positive integer k. you are also given:
2d integer array rowconditions of size n where rowconditions[i] = [abovei, belowi], and
2d integer array colconditions of size m where colconditions[i] = [lefti, righti].
two arrays contain integers from 1 to k.
have to build a k x k matrix that contains each of the numbers from 1 to k exactly once. the remaining cells should have the value 0.
matrix should also satisfy the following conditions:
number abovei should appear in a row that is strictly above the row at which the number belowi appears for all i from 0 to n - 1.
number lefti should appear in a column that is strictly left of the column at which the number righti appears for all i from 0 to m - 1.
any matrix that satisfies the conditions. if no answer exists, return an empty matrix.
an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.
k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:
<= i, j < nums.length
!= j
- nums[j]| == k
that |val| denotes the absolute value of val.
are given a 0-indexed array nums of size n consisting of non-negative integers.
need to apply n - 1 operations to this array where, in the ith operation (0-indexed), you will apply the following on the ith element of nums:
nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0. otherwise, you skip this operation.
performing all the operations, shift all the 0's to the end of the array.
example, the array [1,0,2,0,0,1] after shifting all its 0's to the end, is [1,2,1,0,0,0].
the resulting array.
that the operations are applied sequentially, not all at once.
a 0-indexed integer array nums of size n, find the maximum difference between nums[i] and nums[j] (i.e., nums[j] - nums[i]), such that 0 <= i < j < n and nums[i] < nums[j].
the maximum difference. if no such i and j exists, return -1.
are given an array of n strings strs, all of the same length.
strings can be arranged such that there is one on each line, making a grid.
example, strs = ["abc", "bce", "cae"] can be arranged as follows:



want to delete the columns that are not sorted lexicographically. in the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted, while column 1 ('b', 'c', 'a') is not, so you would delete column 1.
the number of columns that you will delete.
are given a 0-indexed array of positive integers tasks, representing tasks that need to be completed in order, where tasks[i] represents the type of the ith task.
are also given a positive integer space, which represents the minimum number of days that must pass after the completion of a task before another task of the same type can be performed.
day, until all tasks have been completed, you must either:
the next task from tasks, or
a break.
the minimum number of days needed to complete all tasks.
are given a string s formed by digits and '#'. we want to map s to english lowercase characters as follows:
('a' to 'i') are represented by ('1' to '9') respectively.
('j' to 'z') are represented by ('10#' to '26#') respectively.
the string formed after mapping.
test cases are generated so that a unique mapping will always exist.
are given a stream of n videos, each represented by a distinct number from 1 to n that you need to "upload" to a server. you need to implement a data structure that calculates the length of the longest uploaded prefix at various points in the upload process.
consider i to be an uploaded prefix if all videos in the range 1 to i (inclusive) have been uploaded to the server. the longest uploaded prefix is the maximum value of i that satisfies this definition.

the luprefix class:
n) initializes the object for a stream of n videos.
upload(int video) uploads video to the server.
longest() returns the length of the longest uploaded prefix defined above.
is a country of n cities numbered from 0 to n - 1. in this country, there is a road connecting every pair of cities.
are m friends numbered from 0 to m - 1 who are traveling through the country. each one of them will take a path consisting of some cities. each path is represented by an integer array that contains the visited cities in order. the path may contain a city more than once, but the same city will not be listed consecutively.
an integer n and a 2d integer array paths where paths[i] is an integer array representing the path of the ith friend, return the length of the longest common subpath that is shared by every friend's path, or 0 if there is no common subpath at all.
subpath of a path is a contiguous sequence of cities within that path.
have a pointer at index 0 in an array of size arrlen. at each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (the pointer should not be placed outside the array at any time).
two integers steps and arrlen, return the number of ways such that your pointer is still at index 0 after exactly steps steps. since the answer may be too large, return it modulo 109 + 7.
are given a series of video clips from a sporting event that lasted time seconds. these video clips can be overlapping with each other and have varying lengths.
video clip is described by an array clips where clips[i] = [starti, endi] indicates that the ith clip started at starti and ended at endi.
can cut these clips into segments freely.
example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].
the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time]. if the task is impossible, return -1.
schema
customer

column name | type |

id | int |
name | varchar |
referee_id | int |

is the primary key column for this table.
row of this table indicates the id of a customer, their name, and the id of the customer who referred them.
an sql query to report the names of the customer that are not referred by the customer with id = 2.
the result table in any order.
query result format is in the following example.
are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.
nodes initial are initially infected by malware. whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. this spread of malware will continue until no more nodes can be infected in this manner.
m(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.
will remove exactly one node from initial, completely removing it and any connections from this node to any other node.
the node that, if removed, would minimize m(initial). if multiple nodes could be removed to minimize m(initial), return such a node with the smallest index.
are given an m x n integer grid accounts where accounts[i][j] is the amount of money the ith customer has in the jth bank. return the wealth that the richest customer has.
customer's wealth is the amount of money they have in all their bank accounts. the richest customer is the customer that has the maximum wealth.
an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing.
the length of the shortest subarray to remove.
subarray is a contiguous subsequence of the array.
are given two string arrays, queries and dictionary. all words in each array comprise of lowercase english letters and have the same length.
one edit you can take a word from queries, and change any letter in it to any other letter. find all words from queries that, after a maximum of two edits, equal some word from dictionary.
a list of all words from queries, that match with some word from dictionary after a maximum of two edits. return the words in the same order they appear in queries.
three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound.
integer is powerful if it can be represented as xi + yj for some integers i >= 0 and j >= 0.
may return the answer in any order. in your answer, each value should occur at most once.
an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.
are given an n x n grid representing a field of cherries, each cell is one of three possible integers.
means the cell is empty, so you can pass through,
means the cell contains a cherry that you can pick up and pass through, or
means the cell contains a thorn that blocks your way.
the maximum number of cherries you can collect by following the rules below:
at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1).
reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells.
passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0.
there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected.
an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. if no land or water exists in the grid, return -1.
distance used in this problem is the manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.
are given an undirected graph. you are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.
connected trio is a set of three nodes where there is an edge between every pair of them.
degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.
the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.
are a total of numcourses courses you have to take, labeled from 0 to numcourses - 1. you are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
the ordering of courses you should take to finish all courses. if there are many valid answers, return any of them. if it is impossible to finish all courses, return an empty array.
string is a valid parentheses string (denoted vps) if and only if it consists of "(" and ")" characters only, and:
is the empty string, or
can be written as ab (a concatenated with b), where a and b are vps's, or
can be written as (a), where a is a vps.
can similarly define the nesting depth depth(s) of any vps s as follows:
= 0
+ b) = max(depth(a), depth(b)), where a and b are vps's
+ a + ")") = 1 + depth(a), where a is a vps.
example, "", "()()", and "()(()())" are vps's (with nesting depths 0, 1, and 2), and ")(" and "(()" are not vps's.
a vps seq, split it into two disjoint subsequences a and b, such that a and b are vps's (and a.length + b.length = seq.length).
choose any such a and b such that max(depth(a), depth(b)) is the minimum possible value.
an answer array (of length seq.length) that encodes such a choice of a and b: answer[i] = 0 if seq[i] is part of a, else answer[i] = 1. note that even though multiple answers may exist, you may return any of them.
a positive integer n, there exists a 0-indexed array called powers, composed of the minimum number of powers of 2 that sum to n. the array is sorted in non-decreasing order, and there is only one way to form the array.
are also given a 0-indexed 2d integer array queries, where queries[i] = [lefti, righti]. each queries[i] represents a query where you have to find the product of all powers[j] with lefti <= j <= righti.
an array answers, equal in length to queries, where answers[i] is the answer to the ith query. since the answer to the ith query may be too large, each answers[i] should be returned modulo 109 + 7.
a function that checks if a given value is an instance of a given class or superclass. for this problem, an object is considered an instance of a given class if that object has access to that class's methods.
are no constraints on the data types that can be passed to the function. for example, the value or the class could be undefined.
factorial of a positive integer n is the product of all positive integers less than or equal to n.
example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1.
make a clumsy factorial using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply '*', divide '/', add '+', and subtract '-' in this order.
example, clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1.
these operations are still applied using the usual order of operations of arithmetic. we do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.
the division that we use is floor division such that 10 * 9 / 8 = 90 / 8 = 11.
an integer n, return the clumsy factorial of n.
are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. a point on the perimeter of a rectangle is included in the space covered by the rectangle.
integer point inside the space covered by one of the given rectangles should be equally likely to be returned.
that an integer point is a point that has integer coordinates.
the solution class:
rects) initializes the object with the given rectangles rects.
pick() returns a random integer point [u, v] inside the space covered by one of the given rectangles.
are given an integer array deck where deck[i] represents the number written on the ith card.
the cards into one or more groups such that:
group has exactly x cards where x > 1, and
the cards in one group have the same integer written on them.
true if such partition is possible, or false otherwise.
are stacking blocks to form a pyramid. each block has a color, which is represented by a single letter. each row of blocks contains one less block than the row beneath it and is centered on top.
make the pyramid aesthetically pleasing, there are only specific triangular patterns that are allowed. a triangular pattern consists of a single block stacked on top of two blocks. the patterns are given as a list of three-letter strings allowed, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.
example, "abc" represents a triangular pattern with a 'c' block stacked on top of an 'a' (left) and 'b' (right) block. note that this is different from "bac" where 'b' is on the left bottom and 'a' is on the right bottom.
start with a bottom row of blocks bottom, given as a single string, that you must use as the base of the pyramid.
bottom and allowed, return true if you can build the pyramid all the way to the top such that every triangular pattern in the pyramid is in allowed, or false otherwise.
an array of integers nums, sort the array in increasing order based on the frequency of the values. if multiple values have the same frequency, sort them in decreasing order.
the sorted array.
are given two 2d integer arrays nums1 and nums2.
= [idi, vali] indicate that the number with the id idi has a value equal to vali.
= [idi, vali] indicate that the number with the id idi has a value equal to vali.
array contains unique ids and is sorted in ascending order by id.
the two arrays into one array that is sorted in ascending order by id, respecting the following conditions:
ids that appear in at least one of the two arrays should be included in the resulting array.
id should be included only once and its value should be the sum of the values of this id in the two arrays. if the id does not exist in one of the two arrays then its value in that array is considered to be 0.
the resulting array. the returned array must be sorted in ascending order by id.
two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement:
this list is answer = [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers.
the list answer. if there multiple valid answers, return any of them.
are currently designing a dynamic array. you are given a 0-indexed integer array nums, where nums[i] is the number of elements that will be in the array at time i. in addition, you are given an integer k, the maximum number of times you can resize the array (to any size).
size of the array at time t, sizet, must be at least nums[t] because there needs to be enough space in the array to hold all the elements. the space wasted at time t is defined as sizet - nums[t], and the total space wasted is the sum of the space wasted across every time t where 0 <= t < nums.length.
the minimum total space wasted if you can resize the array at most k times.
the array can have any size at the start and does not count towards the number of resizing operations.
are given the root node of a binary search tree (bst) and a value to insert into the tree. return the root node of the bst after the insertion. it is guaranteed that the new value does not exist in the original bst.
that there may exist multiple valid ways for the insertion, as long as the tree remains a bst after insertion. you can return any of them.
an integer array nums, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.
the shortest such subarray and output its length.
are 8 prison cells in a row and each cell is either occupied or vacant.
day, whether the cell is occupied or vacant changes according to the following rules:
a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.
it becomes vacant.
that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.
are given an integer array cells where cells[i] == 1 if the ith cell is occupied and cells[i] == 0 if the ith cell is vacant, and you are given an integer n.
the state of the prison after n days (i.e., n such changes described above).
are given an integer n. we reorder the digits in any order (including the original order) such that the leading digit is not zero.
true if and only if we can do this so that the resulting number is a power of two.
are given an array of positive integers beans, where each integer represents the number of magic beans found in a particular magic bag.
any number of beans (possibly none) from each bag such that the number of beans in each remaining non-empty bag (still containing at least one bean) is equal. once a bean has been removed from a bag, you are not allowed to return it to any of the bags.
the minimum number of magic beans that you have to remove.
are given two positive integers n and target.
integer is considered beautiful if the sum of its digits is less than or equal to target.
the minimum non-negative integer x such that n + x is beautiful. the input will be generated such that it is always possible to make n beautiful.
an array of integers nums, calculate the pivot index of this array.
pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.
the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. this also applies to the right edge of the array.
the leftmost pivot index. if no such index exists, return -1.
are given a 0-indexed integer array nums.
all of the indices are unmarked. you are allowed to make this operation any number of times:
two different unmarked indices i and j such that 2 * nums[i] <= nums[j], then mark i and j.
the maximum possible number of marked indices in nums using the above operation any number of times.
a function createcounter. it should accept an initial integer init. it should return an object with three functions.
three functions are:
increases the current value by 1 and then returns it.
reduces the current value by 1 and then returns it.
sets the current value to init and then returns it.
a string s, find the first non-repeating character in it and return its index. if it does not exist, return -1.
string s is called happy if it satisfies the following conditions:
only contains the letters 'a', 'b', and 'c'.
does not contain any of "aaa", "bbb", or "ccc" as a substring.
contains at most a occurrences of the letter 'a'.
contains at most b occurrences of the letter 'b'.
contains at most c occurrences of the letter 'c'.
three integers a, b, and c, return the longest possible happy string. if there are multiple longest happy strings, return any of them. if there is no such string, return the empty string "".
substring is a contiguous sequence of characters within a string.
an array of functions [f1, f2, f3, ..., fn], return a new function fn that is the function composition of the array of functions.
function composition of [f(x), g(x), h(x)] is fn(x) = f(g(h(x))).
function composition of an empty list of functions is the identity function f(x) = x.
may assume each function in the array accepts one integer as input and returns one integer as output.
a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. if the array is already strictly increasing, return true.
array nums is strictly increasing if nums[i - 1] < nums[i] for each index (1 <= i < nums.length).
are given a 0-indexed string s. you are also given a 0-indexed string querycharacters of length k and a 0-indexed array of integer indices queryindices of length k, both of which are used to describe k queries.
ith query updates the character in s at index queryindices[i] to the character querycharacters[i].
an array lengths of length k where lengths[i] is the length of the longest substring of s consisting of only one repeating character after the ith query is performed.
schema
delivery

column name | type |

delivery_id | int |
customer_id | int |
order_date | date |
customer_pref_delivery_date | date |

is the primary key of this table.
table holds information about food delivery to customers that make orders at some date and specify a preferred delivery date (on the same order date or after it).
the customer's preferred delivery date is the same as the order date, then the order is called immediate; otherwise, it is called scheduled.
first order of a customer is the order with the earliest order date that the customer made. it is guaranteed that a customer has precisely one first order.
an sql query to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.
query result format is in the following example.
an integer array nums, return the number of subarrays filled with 0.
subarray is a contiguous non-empty sequence of elements within an array.
string is a valid parentheses string (denoted vps) if it meets one of the following:
is an empty string "", or a single character not equal to "(" or ")",
can be written as ab (a concatenated with b), where a and b are vps's, or
can be written as (a), where a is a vps.
can similarly define the nesting depth depth(s) of any vps s as follows:
= 0
= 0, where c is a string with a single character not equal to "(" or ")".
+ b) = max(depth(a), depth(b)), where a and b are vps's.
+ a + ")") = 1 + depth(a), where a is a vps.
example, "", "()()", and "()(()())" are vps's (with nesting depths 0, 1, and 2), and ")(" and "(()" are not vps's.
a vps represented as string s, return the nesting depth of s.
a number container system that can do the following:
or replace a number at the given index in the system.
the smallest index for the given number in the system.
the numbercontainers class:
initializes the number container system.
change(int index, int number) fills the container at index with the number. if there is already a number at that index, replace it.
find(int number) returns the smallest index for the given number, or -1 if there is no index that is filled by number in the system.
is an infrastructure of n cities with some number of roads connecting these cities. each roads[i] = [ai, bi] indicates that there is a bidirectional road between cities ai and bi.
network rank of two different cities is defined as the total number of directly connected roads to either city. if a road is directly connected to both cities, it is only counted once.
maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.
the integer n and the array roads, return the maximal network rank of the entire infrastructure.
are given two linked lists: list1 and list2 of sizes n and m respectively.
list1's nodes from the ath node to the bth node, and put list2 in their place.
blue edges and nodes in the following figure indicate the result:
the result list and return its head.
a string s and an integer k, return true if you can use all the characters in s to construct k palindrome strings or false otherwise.
are given a 0-indexed integer array nums and a target element target.
target index is an index i such that nums[i] == target.
a list of the target indices of nums after sorting nums in non-decreasing order. if there are no target indices, return an empty list. the returned list must be sorted in increasing order.
an array of integers arr of even length n and an integer k.
want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k.
true if you can find a way to do that or false otherwise.
alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.
example, the alternating sum of [4,2,5,3] is (4 + 5) - (2 + 3) = 4.
an array nums, return the maximum alternating sum of any subsequence of nums (after reindexing the elements of the subsequence).
subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. for example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.
pow(x, n), which calculates x raised to the power n (i.e., xn).
are given an integer num. you know that danny mittal will sneakily remap one of the 10 possible digits (0 to 9) to another digit.
the difference between the maximum and minimum values danny can make by remapping exactly one digit in num.

danny remaps a digit d1 to another digit d2, danny replaces all occurrences of d1 in num with d2.
can remap a digit to itself, in which case num does not change.
can remap different digits for obtaining minimum and maximum values respectively.
resulting number after remapping can contain leading zeroes.
mentioned "danny mittal" to congratulate him on being in the top 10 in weekly contest 326.
are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.
value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).
view the projection of these cubes onto the xy, yz, and zx planes.
projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. we are viewing the "shadow" when looking at the cubes from the top, the front, and the side.
the total area of all three projections.
a string date representing a gregorian calendar date formatted as yyyy-mm-dd, return the day number of the year.
are given an integer n. there are n rooms numbered from 0 to n - 1.
are given a 2d integer array meetings where meetings[i] = [starti, endi] means that a meeting will be held during the half-closed time interval [starti, endi). all the values of starti are unique.
are allocated to rooms in the following manner:
meeting will take place in the unused room with the lowest number.
there are no available rooms, the meeting will be delayed until a room becomes free. the delayed meeting should have the same duration as the original meeting.
a room becomes unused, meetings that have an earlier original start time should be given the room.
the number of the room that held the most meetings. if there are multiple rooms, return the room with the lowest number.
half-closed interval [a, b) is the interval between a and b including a and not including b.
the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).
a string s of lowercase letters, you need to find the maximum number of non-empty substrings of s that meet the following conditions:
substrings do not overlap, that is for any two substrings s[i..j] and s[x..y], either j < x or i > y is true.
substring that contains a certain character c must also contain all occurrences of c.
the maximum number of substrings that meet the above conditions. if there are multiple solutions with the same number of substrings, return the one with minimum total length. it can be shown that there exists a unique solution of minimum total length.
that you can return the substrings in any order.
are given an m x n integer matrix grid and an array queries of size k.
an array answer of size k such that for each integer queries[i] you start in the top left cell of the matrix and repeat the following process:
queries[i] is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all 4 directions: up, down, left, and right.
you do not get any points, and you end this process.
the process, answer[i] is the maximum number of points you can get. note that for each query you are allowed to visit the same cell multiple times.
the resulting array answer.
schema
requestaccepted

column name | type |

requester_id | int |
accepter_id | int |
accept_date | date |

accepter_id) is the primary key for this table.
table contains the id of the user who sent the request, the id of the user who received the request, and the date when the request was accepted.
an sql query to find the people who have the most friends and the most friends number.
test cases are generated so that only one person has the most friends.
query result format is in the following example.
a 0-indexed integer array nums, find a 0-indexed integer array answer where:
== nums.length.
= |leftsum[i] - rightsum[i]|.

is the sum of elements to the left of the index i in the array nums. if there is no such element, leftsum[i] = 0.
is the sum of elements to the right of the index i in the array nums. if there is no such element, rightsum[i] = 0.
the array answer.
two strings s and t, return the number of distinct

s which equals t.
test cases are generated so that the answer fits on a 32-bit signed integer.
a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
are given an m x n integer matrix grid, where m and n are both even integers, and an integer k.
matrix is composed of several layers, which is shown in the below image, where each color is its own layer:
cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix. to cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the counter-clockwise direction. an example rotation is shown below:
the matrix after applying k cyclic rotations to it.
are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers.
should rearrange the elements of nums such that the modified array follows the given conditions:
consecutive pair of integers have opposite signs.
all integers with the same sign, the order in which they were present in nums is preserved.
rearranged array begins with a positive integer.
the modified array after rearranging the elements to satisfy the aforementioned conditions.
decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. for example, 101 and 1100 are deci-binary, while 112 and 3001 are not.
a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to n.
are given an integer array nums. you are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.
true if you can reach the last index, or false otherwise.
an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 109 + 7.
are given two 0-indexed integer arrays nums and divisors.
divisibility score of divisors[i] is the number of indices j such that nums[j] is divisible by divisors[i].
the integer divisors[i] with the maximum divisibility score. if there is more than one integer with the maximum score, return the minimum of them.
exists an undirected and initially unrooted tree with n nodes indexed from 0 to n - 1. you are given the integer n and a 2d integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.
node has an associated price. you are given an integer array price, where price[i] is the price of the ith node.
price sum of a given path is the sum of the prices of all nodes lying on that path.
tree can be rooted at any node root of your choice. the incurred cost after choosing root is the difference between the maximum and minimum price sum amongst all paths starting at root.
the maximum possible cost amongst all possible root choices.
are given a map of a server center, represented as a m * n integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server. two servers are said to communicate if they are on the same row or on the same column.

the number of servers that communicate with any other server.
are given an integer n.
number from 1 to n is grouped according to the sum of its digits.
the number of groups that have the largest size.
are given a 2d integer array ranges and two integers left and right. each ranges[i] = [starti, endi] represents an inclusive interval between starti and endi.
true if each integer in the inclusive range [left, right] is covered by at least one interval in ranges. return false otherwise.
integer x is covered by an interval ranges[i] = [starti, endi] if starti <= x <= endi.
city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). the edges in the graph are represented as a 2d integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. every vertex pair is connected by at most one edge, and no vertex has an edge to itself. the time taken to traverse any edge is time minutes.
vertex has a traffic signal which changes its color from green to red and vice versa every change minutes. all signals change at the same time. you can enter a vertex at any time, but can leave a vertex only when the signal is green. you cannot wait at a vertex if the signal is green.
second minimum value is defined as the smallest value strictly larger than the minimum value.
example the second minimum value of [2, 3, 4] is 3, and the second minimum value of [2, 2, 4] is 4.
n, edges, time, and change, return the second minimum time it will take to go from vertex 1 to vertex n.

can go through any vertex any number of times, including 1 and n.
can assume that when the journey starts, all signals have just turned green.
are given a string s. you can convert s to a

adding characters in front of it.
the shortest palindrome you can find by performing this transformation.
an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.
the result as a list of indices representing the starting position of each interval (0-indexed). if there are multiple answers, return the lexicographically smallest one.
code that enhances all arrays such that you can call the array.groupby(fn) method on any array and it will return a grouped version of the array.
grouped array is an object where each key is the output of fn(arr[i]) and each value is an array containing all items in the original array with that key.
provided callback fn will accept an item in the array and return a string key.
order of each value list should be the order the items appear in the array. any order of keys is acceptable.
solve it without lodash's _.groupby function.
a string s, remove duplicate letters so that every letter appears once and only once. you must make sure your result is
smallest in lexicographical order
all possible results.
are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.
that x does not have to be an element in nums.
x if the array is special, otherwise, return -1. it can be proven that if nums is special, the value for x is unique.
are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.
example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.
will start at the bus stop source (you are not on any bus initially), and you want to go to the bus stop target. you can travel between bus stops by buses only.
the least number of buses you must take to travel from source to target. return -1 if it is not possible.
an integer array nums, find the

the largest sum, and return its sum.
the root of a binary tree, return the sum of values of nodes with an even-valued grandparent. if there are no nodes with an even-valued grandparent, return 0.
grandparent of a node is the parent of its parent if it exists.
are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.
it is possible, return any [i, j] with i + 1 < j, such that:
arr[1], ..., arr[i] is the first part,
+ 1], arr[i + 2], ..., arr[j - 1] is the second part, and
arr[j + 1], ..., arr[arr.length - 1] is the third part.
three parts have equal binary values.
it is not possible, return [-1, -1].
that the entire part is used when considering what binary value it represents. for example, [1,1,0] represents 6 in decimal, not 3. also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.
two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
other words, return true if one of s1's permutations is the substring of s2.
and bob are opponents in an archery competition. the competition has set the following rules:
first shoots numarrows arrows and then bob shoots numarrows arrows.
points are then calculated as follows:
target has integer scoring sections ranging from 0 to 11 inclusive.
each section of the target with score k (in between 0 to 11), say alice and bob have shot ak and bk arrows on that section respectively. if ak >= bk, then alice takes k points. if ak < bk, then bob takes k points.
if ak == bk == 0, then nobody takes k points.
example, if alice and bob both shot 2 arrows on the section with score 11, then alice takes 11 points. on the other hand, if alice shot 0 arrows on the section with score 11 and bob shot 2 arrows on that same section, then bob takes 11 points.
are given the integer numarrows and an integer array alicearrows of size 12, which represents the number of arrows alice shot on each scoring section from 0 to 11. now, bob wants to maximize the total number of points he can obtain.
the array bobarrows which represents the number of arrows bob shot on each scoring section from 0 to 11. the sum of the values in bobarrows should equal numarrows.
there are multiple ways for bob to earn the maximum total points, return any one of them.
an integer array nums, return the sum of floor(nums[i] / nums[j]) for all pairs of indices 0 <= i, j < nums.length in the array. since the answer may be too large, return it modulo 109 + 7.
floor() function returns the integer part of the division.
two strings s and part, perform the following operation on s until all occurrences of the substring part are removed:
the leftmost occurrence of the substring part and remove it from s.
s after removing all occurrences of part.
substring is a contiguous sequence of characters in a string.
distance of a pair of integers a and b is defined as the absolute difference between a and b.
an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.
an m x n binary matrix mat, return the distance of the nearest 0 for each cell.
distance between two adjacent cells is 1.
k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)
are given some events [starttime, endtime), after each given event, return an integer k representing the maximum k-booking between all the previous events.
the mycalendarthree class:
initializes the object.
book(int starttime, int endtime) returns an integer k representing the largest integer such that there exists a k-booking in the calendar.
are given an integer n and an integer p in the range [0, n - 1]. representing a 0-indexed array arr of length n where all positions are set to 0's, except position p which is set to 1.
are also given an integer array banned containing some positions from the array. for the ith position in banned, arr[banned[i]] = 0, and banned[i] != p.
can perform multiple operations on arr. in an operation, you can choose a subarray with size k and reverse the subarray. however, the 1 in arr should never go to any of the positions in banned. in other words, after each operation arr[banned[i]] remains 0.
an array ans where for each i from [0, n - 1], ans[i] is the minimum number of reverse operations needed to bring the 1 to position i in arr, or -1 if it is impossible.
subarray is a contiguous non-empty sequence of elements within an array.
values of ans[i] are independent for all i's.
reverse of an array is an array containing the values in reverse order.
are given a 0-indexed array of distinct integers nums.
is an element in nums that has the lowest value and an element that has the highest value. we call them the minimum and maximum respectively. your goal is to remove both these elements from the array.
deletion is defined as either removing an element from the front of the array or removing an element from the back of the array.
the minimum number of deletions it would take to remove both the minimum and maximum element from the array.
the root of a binary tree, return the sum of values of its deepest leaves.
two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.
you must not use any built-in biginteger library or convert the inputs to integer directly.
an array of strings names of size n. you will create n folders in your file system such that, at the ith minute, you will create a folder with the name names[i].
two files cannot have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.
an array of strings of length n where ans[i] is the actual name the system will assign to the ith folder when you create it.
array arr a mountain if the following properties hold:
>= 3
exists some i with 0 < i < arr.length - 1 such that:
< arr[1] < ... < arr[i - 1] < arr[i]
> arr[i + 1] > ... > arr[arr.length - 1]
a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].
must solve it in o(log(arr.length)) time complexity.
a binary array nums, you should delete one element from it.
the size of the longest non-empty subarray containing only 1's in the resulting array. return 0 if there is no such subarray.
are given a string s consisting of the characters 'a', 'b', and 'c' and a non-negative integer k. each minute, you may take either the leftmost character of s, or the rightmost character of s.
the minimum number of minutes needed for you to take at least k of each character, or return -1 if it is not possible to take k of each character.
a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.
an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. if there is no such subarray, return -1.
subarray is a contiguous part of an array.
a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.
there are fewer than k characters left, reverse all of them. if there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.
an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the ith day to get a warmer temperature. if there is no future day for which this is possible, keep answer[i] == 0 instead.
the root of a binary tree, determine if it is a complete binary tree.
a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. it can have between 1 and 2h nodes inclusive at the last level h.
schema
activities:

column name | type |

sell_date | date |
product | varchar |

is no primary key for this table, it may contain duplicates.
row of this table contains the product name and the date it was sold in a market.
an sql query to find for each date the number of different products sold and their names.
sold products names for each date should be sorted lexicographically.
the result table ordered by sell_date.
query result format is in the following example.
define the lcp matrix of any 0-indexed string word of n lowercase english letters as an n x n grid such that:
is equal to the length of the longest common prefix between the substrings word[i,n-1] and word[j,n-1].
an n x n matrix lcp, return the alphabetically smallest string word that corresponds to lcp. if there is no such string, return an empty string.
string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. for example, "aabd" is lexicographically smaller than "aaca" because the first position they differ is at the third letter, and 'b' comes before 'c'.
are n pieces arranged in a line, and each piece is colored either by 'a' or by 'b'. you are given a string colors of length n where colors[i] is the color of the ith piece.
and bob are playing a game where they take alternating turns removing pieces from the line. in this game, alice moves first.
is only allowed to remove a piece colored 'a' if both its neighbors are also colored 'a'. she is not allowed to remove pieces that are colored 'b'.
is only allowed to remove a piece colored 'b' if both its neighbors are also colored 'b'. he is not allowed to remove pieces that are colored 'a'.
and bob cannot remove pieces from the edge of the line.
a player cannot make a move on their turn, that player loses and the other player wins.
alice and bob play optimally, return true if alice wins, or return false if bob wins.
schema
users

column name | type |

id | int |
name | varchar |

is the primary key for this table.
is the name of the user.
rides

column name | type |

id | int |
user_id | int |
distance | int |

is the primary key for this table.
is the id of the user who traveled the distance "distance".
an sql query to report the distance traveled by each user.
the result table ordered by travelled_distance in descending order, if two or more users traveled the same distance, order them by their name in ascending order.
query result format is in the following example.
are given a 0-indexed string s and a 0-indexed integer array spaces that describes the indices in the original string where spaces will be added. each space should be inserted before the character at the given index.
example, given s = "enjoyyourcoffee" and spaces = [5, 9], we place spaces before 'y' and 'c', which are at indices 5 and 9 respectively. thus, we obtain "enjoy your coffee".
the modified string after the spaces have been added.
are given an array of strings ideas that represents a list of names to be used in the process of naming a company. the process of naming a company is as follows:
2 distinct names from ideas, call them ideaa and ideab.
the first letters of ideaa and ideab with each other.
both of the new names are not found in the original ideas, then the name ideaa ideab (the concatenation of ideaa and ideab, separated by a space) is a valid company name.
it is not a valid name.
the number of distinct valid names for the company.
schema
users

column name | type |

account | int |
name | varchar |

is the primary key for this table.
row of this table contains the account number of each user in the bank.
will be no two users having the same name in the table.
transactions

column name | type |

trans_id | int |
account | int |
amount | int |
transacted_on | date |

is the primary key for this table.
row of this table contains all changes made to all accounts.
is positive if the user received money and negative if they transferred money.
accounts start with a balance of 0.
an sql query to report the name and balance of users with a balance higher than 10000. the balance of an account is equal to the sum of the amounts of all transactions involving that account.
the result table in any order.
query result format is in the following example.
an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. in other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible.
that the subarray needs to be non-empty after deleting one element.
a weighted undirected connected graph with n vertices numbered from 0 to n - 1, and an array edges where edges[i] = [ai, bi, weighti] represents a bidirectional and weighted edge between nodes ai and bi. a minimum spanning tree (mst) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight.
all the critical and pseudo-critical edges in the given graph's minimum spanning tree (mst). an mst edge whose deletion from the graph would cause the mst weight to increase is called a critical edge. on the other hand, a pseudo-critical edge is that which can appear in some msts but not all.
that you can return the indices of the edges in any order.
are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the ith item. you are also given a rule represented by two strings, rulekey and rulevalue.
ith item is said to match the rule if one of the following is true:
== "type" and rulevalue == typei.
== "color" and rulevalue == colori.
== "name" and rulevalue == namei.
the number of items that match the given rule.
two integers a and b, return the sum of the two integers without using the operators + and -.
is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.
are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.
an array answer of length n where answer[i] is the sum of the distances between the ith node in the tree and all other nodes.
company is planning to interview 2n people. given the array costs where costs[i] = [acosti, bcosti], the cost of flying the ith person to city a is acosti, and the cost of flying the ith person to city b is bcosti.
the minimum cost to fly every person to a city such that exactly n people arrive in each city.
the root of a binary tree, return the average value of the nodes on each level in the form of an array. answers within 10-5 of the actual answer will be accepted.
an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].
true if there is a 132 pattern in nums, otherwise, return false.
a 2d grid of size m x n and an integer k. you need to shift the grid k times.
one shift operation:
at grid[i][j] moves to grid[i][j + 1].
at grid[i][n - 1] moves to grid[i + 1][0].
at grid[m - 1][n - 1] moves to grid[0][0].
the 2d grid after applying shift operation k times.
are given an undirected weighted graph of n nodes (0-indexed), represented by an edge list where edges[i] = [a, b] is an undirected edge connecting the nodes a and b with a probability of success of traversing that edge succprob[i].
two nodes start and end, find the path with the maximum probability of success to go from start to end and return its success probability.
there is no path from start to end, return 0. your answer will be accepted if it differs from the correct answer by at most 1e-5.
is throwing n darts on a very large wall. you are given an array darts where darts[i] = [xi, yi] is the position of the ith dart that alice threw on the wall.
knows the positions of the n darts on the wall. he wants to place a dartboard of radius r on the wall so that the maximum number of darts that alice throws lies on the dartboard.
the integer r, return the maximum number of darts that can lie on the dartboard.
the root of a binary tree, return the leftmost value in the last row of the tree.
are given a 0-indexed string s that you must perform k replacement operations on. the replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k.
complete the ith replacement operation:
if the substring sources[i] occurs at index indices[i] in the original string s.
it does not occur, do nothing.
if it does occur, replace that substring with targets[i].
example, if s = "abcd", indices[i] = 0, sources[i] = "ab", and targets[i] = "eee", then the result of this replacement will be "eeecd".
replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other. the testcases will be generated such that the replacements will not overlap.
example, a testcase with s = "abc", indices = [0, 1], and sources = ["ab","bc"] will not be generated because the "ab" and "bc" replacements overlap.
the resulting string after performing all replacement operations on s.
substring is a contiguous sequence of characters in a string.
are given a 0-indexed m x n integer matrix grid. your initial position is at the top-left cell (0, 0).
from the cell (i, j), you can move to one of the following cells:
(i, k) with j < k <= grid[i][j] + j (rightward movement), or
(k, j) with i < k <= grid[i][j] + i (downward movement).
the minimum number of cells you need to visit to reach the bottom-right cell (m - 1, n - 1). if there is no valid path, return -1.
are given an integer array nums. a subsequence of nums is called a square streak if:
length of the subsequence is at least 2, and
sorting the subsequence, each element (except the first element) is the square of the previous number.
the length of the longest square streak in nums, or return -1 if there is no square streak.
subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. each digit must be rotated - we cannot choose to leave it alone.
number is valid if each digit remains a digit after rotation. for example:
1, and 8 rotate to themselves,
and 5 rotate to each other (in this case they are rotated in a different direction, in other words, 2 or 5 gets mirrored),
and 9 rotate to each other, and
rest of the numbers do not rotate to any other number and become invalid.
an integer n, return the number of good integers in the range [1, n].
are given an integer array nums and an integer k.
the longest subsequence of nums that meets the following requirements:
subsequence is strictly increasing and
difference between adjacent elements in the subsequence is at most k.
the length of the longest subsequence that meets the requirements.
subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
binary watch has 4 leds on the top to represent the hours (0-11), and 6 leds on the bottom to represent the minutes (0-59). each led represents a zero or one, with the least significant bit on the right.
example, the below binary watch reads "4:51".
an integer turnedon which represents the number of leds that are currently on (ignoring the pm), return all possible times the watch could represent. you may return the answer in any order.
hour must not contain a leading zero.
example, "01:00" is not valid. it should be "1:00".
minute must be consist of two digits and may contain a leading zero.
example, "10:2" is not valid. it should be "10:02".
a string s, find the length of the longest

repeating characters.
are given a non-negative integer array nums. in one operation, you must:
a positive integer x such that x is less than or equal to the smallest non-zero element in nums.
x from every positive element in nums.
the minimum number of operations to make every element in nums equal to 0.
an integer array nums, return the third distinct maximum number in this array. if the third maximum does not exist, return the maximum number.
beauty of a string is the difference in frequencies between the most frequent and least frequent characters.
example, the beauty of "abaacc" is 3 - 1 = 2.
a string s, return the sum of beauty of all of its substrings.
a generator function that returns a generator object which yields the fibonacci sequence.
fibonacci sequence is defined by the relation xn = xn-1 + xn-2.
first few numbers of the series are 0, 1, 1, 2, 3, 5, 8, 13.
an integer array arr, return the length of a maximum size turbulent subarray of arr.
subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.
formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:
i <= k < j:
> arr[k + 1] when k is odd, and
< arr[k + 1] when k is even.
for i <= k < j:
> arr[k + 1] when k is even, and
< arr[k + 1] when k is odd.
have a wooden plank of the length n units. some ants are walking on the plank, each ant moves with a speed of 1 unit per second. some of the ants move to the left, the other move to the right.
two ants moving in two different directions meet at some point, they change their directions and continue moving again. assume changing directions does not take any additional time.
an ant reaches one end of the plank at a time t, it falls out of the plank immediately.
an integer n and two integer arrays left and right, the positions of the ants moving to the left and the right, return the moment when the last ant(s) fall out of the plank.
are given an array nums consisting of positive integers.
with score = 0, apply the following algorithm:
the smallest integer of the array that is not marked. if there is a tie, choose the one with the smallest index.
the value of the chosen integer to score.
the chosen element and its two adjacent elements if they exist.
until all the array elements are marked.
the score you get after applying the above algorithm.
an array of strings words, return the first palindromic string in the array. if there is no such string, return an empty string "".
string is palindromic if it reads the same forward and backward.
an integer n, return a counter function. this counter function initially returns n and then returns 1 more than the previous value every subsequent time it is called (n, n + 1, n + 2, etc).
are given three integers n, m and k. consider the following algorithm to find the maximum element of an array of positive integers:
should build the array arr which has the following properties:
has exactly n integers.
<= arr[i] <= m where (0 <= i < n).
applying the mentioned algorithm to arr, the value search_cost is equal to k.
the number of ways to build the array arr under the mentioned conditions. as the answer may grow large, the answer must be computed modulo 109 + 7.
are given an integer array gifts denoting the number of gifts in various piles. every second, you do the following:
the pile with the maximum number of gifts.
there is more than one pile with the maximum number of gifts, choose any.
behind the floor of the square root of the number of gifts in the pile. take the rest of the gifts.
the number of gifts remaining after k seconds.
two strings s and goal, return true if and only if s can become goal after some number of shifts on s.
shift on s consists of moving the leftmost character of s to the rightmost position.
example, if s = "abcde", then it will be "bcdea" after one shift.
an integer array nums and an integer k, modify the array in the following way:
an index i and replace nums[i] with -nums[i].
should apply this process exactly k times. you may choose the same index i multiple times.
the largest possible sum of the array after modifying it in this way.
delivery company wants to build a new service center in a new city. the company knows the positions of all the customers in this city on a 2d-map and wants to build the new center in a position such that the sum of the euclidean distances to all customers is minimum.
an array positions where positions[i] = [xi, yi] is the position of the ith customer on the map, return the minimum sum of the euclidean distances to all customers.
other words, you need to choose the position of the service center [xcentre, ycentre] such that the following formula is minimized:
within 10-5 of the actual value will be accepted.
are given an array tasks where tasks[i] = [actuali, minimumi]:
is the actual amount of energy you spend to finish the ith task.
is the minimum amount of energy you require to begin the ith task.
example, if the task is [10, 12] and your current energy is 11, you cannot start this task. however, if your current energy is 13, you can complete this task, and your energy will be 3 after finishing it.
can finish the tasks in any order you like.
the minimum initial amount of energy you will need to finish all the tasks.
an integer array nums, handle multiple queries of the following type:
the sum of the elements of nums between indices left and right inclusive where left <= right.
the numarray class:
nums) initializes the object with the integer array nums.
sumrange(int left, int right) returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously. each server has infinite computational capacity but cannot handle more than one request at a time. the requests are assigned to servers according to a specific algorithm:
ith (0-indexed) request arrives.
all servers are busy, the request is dropped (not handled at all).
the (i % k)th server is available, assign the request to that server.
assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). for example, if the ith server is busy, try to assign the request to the (i+1)th server, then the (i+2)th server, and so on.
are given a strictly increasing array arrival of positive integers, where arrival[i] represents the arrival time of the ith request, and another array load, where load[i] represents the load of the ith request (the time it takes to complete). your goal is to find the busiest server(s). a server is considered busiest if it handled the most number of requests successfully among all the servers.
a list containing the ids (0-indexed) of the busiest server(s). you may return the ids in any order.
an integer num, return three consecutive integers (as a sorted array) that sum to num. if num cannot be expressed as the sum of three consecutive integers, return an empty array.
n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\', or blank space ' '. these characters divide the square into contiguous regions.
the grid grid represented as a string array, return the number of regions.
that backslash characters are escaped, so a '\' is represented as '\\'.
are several cards arranged in a row, and each card has an associated number of points. the points are given in the integer array cardpoints.
one step, you can take one card from the beginning or from the end of the row. you have to take exactly k cards.
score is the sum of the points of the cards you have taken.
the integer array cardpoints and the integer k, return the maximum score you can obtain.
call a positive integer special if all of its digits are distinct.
a positive integer n, return the number of special integers that belong to the interval [1, n].
have two types of tiles: a 2 x 1 domino shape and a tromino shape. you may rotate these shapes.
an integer n, return the number of ways to tile an 2 x n board. since the answer may be very large, return it modulo 109 + 7.
a tiling, every square must be covered by a tile. two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.
are given an integer finalsum. split it into a sum of a maximum number of unique positive even integers.
example, given finalsum = 12, the following splits are valid (unique positive even integers summing up to finalsum): (12), (2 + 10), (2 + 4 + 6), and (4 + 8). among them, (2 + 4 + 6) contains the maximum number of integers. note that finalsum cannot be split into (2 + 2 + 4 + 4) as all the numbers should be unique.
a list of integers that represent a valid split containing a maximum number of integers. if no valid split exists for finalsum, return an empty list. you may return the integers in any order.
a linked list, swap every two adjacent nodes and return its head. you must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)
are given an array points, an integer angle, and your location, where location = [posx, posy] and points[i] = [xi, yi] both denote integral coordinates on the x-y plane.
you are facing directly east from your position. you cannot move from your position, but you can rotate. in other words, posx and posy cannot be changed. your field of view in degrees is represented by angle, determining how wide you can see from any given view direction. let d be the amount in degrees that you rotate counterclockwise. then, your field of view is the inclusive range of angles [d - angle/2, d + angle/2].
browser does not support the video tag or this video format.
can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view.
can be multiple points at one coordinate. there may be points at your location, and you can always see these points regardless of your rotation. points do not obstruct your vision to other points.
the maximum number of points you can see.
you are given the following code:
foobar {
void foo() {
(int i = 0; i < n; i++) {




void bar() {
(int i = 0; i < n; i++) {




same instance of foobar will be passed to two different threads:
a will call foo(), while
b will call bar().
the given program to output "foobar" n times.
have n boxes labeled from 0 to n - 1. you are given four arrays: status, candies, keys, and containedboxes where:
is 1 if the ith box is open and 0 if the ith box is closed,
is the number of candies in the ith box,
is a list of the labels of the boxes you can open after opening the ith box.
is a list of the boxes you found inside the ith box.
are given an integer array initialboxes that contains the labels of the boxes you initially have. you can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.
the maximum number of candies you can get following the rules above.
are given a non-negative floating point number rounded to two decimal places celsius, that denotes the temperature in celsius.
should convert celsius into kelvin and fahrenheit and return it as an array ans = [kelvin, fahrenheit].
the array ans. answers within 10-5 of the actual answer will be accepted.
that:
= celsius + 273.15
= celsius * 1.80 + 32.00
are given a 0-indexed integer array nums. in one operation, select any non-negative integer x and an index i, then update nums[i] to be equal to nums[i] and (nums[i] xor x).
that and is the bitwise and operation and xor is the bitwise xor operation.
the maximum possible bitwise xor of all elements of nums after applying the operation any number of times.
are given an integer array nums. you have an integer array arr of the same length with all values set to 0 initially. you also have the following modify function:
want to use the modify function to convert arr to nums using the minimum number of calls.
the minimum number of function calls to make nums from arr.
test cases are generated so that the answer fits in a 32-bit signed integer.
is a one-dimensional garden on the x-axis. the garden starts at the point 0 and ends at the point n. (i.e the length of the garden is n).
are n + 1 taps located at points [0, 1, ..., n] in the garden.
an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open.
the minimum number of taps that should be open to water the whole garden, if the garden cannot be watered return -1.
two string arrays words1 and words2, return the number of strings that appear exactly once in each of the two arrays.
an array of integers arr, and three integers a, b and c. you need to find the number of good triplets.
triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true:
<= i < j < k < arr.length
- arr[j]| <= a
- arr[k]| <= b
- arr[k]| <= c
|x| denotes the absolute value of x.
the number of good triplets.
a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. the word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. if word is not a substring of sequence, word's maximum k-repeating value is 0.
strings sequence and word, return the maximum k-repeating value of word in sequence.
and bob take turns playing a game, with alice starting first.
are given a string num of even length consisting of digits and '?' characters. on each turn, a player will do the following if there is still at least one '?' in num:
an index i where num[i] == '?'.
num[i] with any digit between '0' and '9'.
game ends when there are no more '?' characters in num.
bob to win, the sum of the digits in the first half of num must be equal to the sum of the digits in the second half. for alice to win, the sums must not be equal.
example, if the game ended with num = "243801", then bob wins because 2+4+3 = 8+0+1. if the game ended with num = "243803", then alice wins because 2+4+3 != 8+0+3.
alice and bob play optimally, return true if alice will win and false if bob will win.
are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. the root of the tree is the node 0, and each node of the tree has a label which is a lower-case character given in the string labels (i.e. the node with the number i has the label labels[i]).
edges array is given on the form edges[i] = [ai, bi], which means there is an edge between nodes ai and bi in the tree.
an array of size n where ans[i] is the number of nodes in the subtree of the ith node which have the same label as node i.
subtree of a tree t is the tree consisting of a node in t and all of its descendant nodes.
a row of dominoes, tops[i] and bottoms[i] represent the top and bottom halves of the ith domino. (a domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)
may rotate the ith domino, so that tops[i] and bottoms[i] swap values.
the minimum number of rotations so that all the values in tops are the same, or all the values in bottoms are the same.
it cannot be done, return -1.
two strings s and t, your goal is to convert s into t in k moves or less.
the ith (1 <= i <= k) move you can:
any index j (1-indexed) from s, such that 1 <= j <= s.length and j has not been chosen in any previous move, and shift the character at that index i times.
nothing.
a character means replacing it by the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). shifting a character by i means applying the shift operations i times.
that any index j can be picked at most once.
true if it's possible to convert s into t in no more than k moves, otherwise return false.
the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.
node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.
happy string is a string that:
only of letters of the set ['a', 'b', 'c'].
!= s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).
example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings and strings "aa", "baa" and "ababbc" are not happy strings.
two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.
the kth string of this list or return an empty string if there are less than k happy strings of length n.
are n persons on a social media website. you are given an integer array ages where ages[i] is the age of the ith person.
person x will not send a friend request to a person y (x != y) if any of the following conditions is true:
<= 0.5 * age[x] + 7
> age[x]
> 100 && age[x] < 100
x will send a friend request to y.
that if x sends a request to y, y will not necessarily send a request to x. also, a person will not send a friend request to themself.
the total number of friend requests made.
is a tree (i.e. a connected, undirected graph with no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges.
are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node. you are also given a 2d integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.
good path is a simple path that satisfies the following conditions:
starting node and the ending node have the same value.
nodes between the starting node and the ending node have values less than or equal to the starting node (i.e. the starting node's value should be the maximum value along the path).
the number of distinct good paths.
that a path and its reverse are counted as the same path. for example, 0 -> 1 is considered to be the same as 1 -> 0. a single node is also considered as a valid path.
school is trying to take an annual photo of all the students. the students are asked to stand in a single file line in non-decreasing order by height. let this ordering be represented by the integer array expected where expected[i] is the expected height of the ith student in line.
are given an integer array heights representing the current order that the students are standing in. each heights[i] is the height of the ith student in line (0-indexed).
the number of indices where heights[i] != expected[i].
the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].
are given an array start where start = [startx, starty] represents your initial position (startx, starty) in a 2d space. you are also given the array target where target = [targetx, targety] represents your target position (targetx, targety).
cost of going from a position (x1, y1) to any other position in the space (x2, y2) is |x2 - x1| + |y2 - y1|.
are also some special roads. you are given a 2d array specialroads where specialroads[i] = [x1i, y1i, x2i, y2i, costi] indicates that the ith special road can take you from (x1i, y1i) to (x2i, y2i) with a cost equal to costi. you can use each special road any number of times.
the minimum cost required to go from (startx, starty) to (targetx, targety).
minimum absolute difference of an array a is defined as the minimum value of |a[i] - a[j]|, where 0 <= i < j < a.length and a[i] != a[j]. if all elements of a are the same, the minimum absolute difference is -1.
example, the minimum absolute difference of the array [5,2,3,7,2] is |2 - 3| = 1. note that it is not 0 because a[i] and a[j] must be different.
are given an integer array nums and the array queries where queries[i] = [li, ri]. for each query i, compute the minimum absolute difference of the subarray nums[li...ri] containing the elements of nums between the 0-based indices li and ri (inclusive).
an array ans where ans[i] is the answer to the ith query.
subarray is a contiguous sequence of elements in an array.
value of |x| is defined as:
if x >= 0.
if x < 0.
are given a 0-indexed array arr consisting of n positive integers, and a positive integer k.
array arr is called k-increasing if arr[i-k] <= arr[i] holds for every index i, where k <= i <= n-1.
example, arr = [4, 1, 5, 2, 6, 2] is k-increasing for k = 2 because:
<= arr[2] (4 <= 5)
<= arr[3] (1 <= 2)
<= arr[4] (5 <= 6)
<= arr[5] (2 <= 2)
the same arr is not k-increasing for k = 1 (because arr[0] > arr[1]) or k = 3 (because arr[0] > arr[3]).
one operation, you can choose an index i and change arr[i] into any positive integer.
the minimum number of operations required to make the array k-increasing for the given k.
are given a string time in the form of hh:mm, where some of the digits in the string are hidden (represented by ?).
valid times are those inclusively between 00:00 and 23:59.
the latest valid time you can get from time by replacing the hidden digits.
are given a positive integer array grades which represents the grades of students in a university. you would like to enter all these students into a competition in ordered non-empty groups, such that the ordering meets the following conditions:
sum of the grades of students in the ith group is less than the sum of the grades of students in the (i + 1)th group, for all groups (except the last).
total number of students in the ith group is less than the total number of students in the (i + 1)th group, for all groups (except the last).
the maximum number of groups that can be formed.
the root of an n-ary tree, return the preorder traversal of its nodes' values.
input serialization is represented in their level order traversal. each group of children is separated by the null value (see examples)
are given an integer array nums. the range of a subarray of nums is the difference between the largest and smallest element in the subarray.
the sum of all subarray ranges of nums.
subarray is a contiguous non-empty sequence of elements within an array.
an array of integers arr and an integer k. find the least number of unique integers after removing exactly k elements.
a function that reverses a string. the input string is given as an array of characters s.
must do this by modifying the input array in-place with o(1) extra memory.
define the string base to be the infinite wraparound string of "abcdefghijklmnopqrstuvwxyz", so base will look like this:

a string s, return the number of unique non-empty substrings of s are present in base.
a string s of '(' , ')' and lowercase english characters.
task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.
a parentheses string is valid if and only if:
is the empty string, contains only lowercase characters, or
can be written as ab (a concatenated with b), where a and b are valid strings, or
can be written as (a), where a is a valid string.
your implementation of the circular double-ended queue (deque).
the mycirculardeque class:
k) initializes the deque with a maximum size of k.
insertfront() adds an item at the front of deque. returns true if the operation is successful, or false otherwise.
insertlast() adds an item at the rear of deque. returns true if the operation is successful, or false otherwise.
deletefront() deletes an item from the front of deque. returns true if the operation is successful, or false otherwise.
deletelast() deletes an item from the rear of deque. returns true if the operation is successful, or false otherwise.
getfront() returns the front item from the deque. returns -1 if the deque is empty.
getrear() returns the last item from deque. returns -1 if the deque is empty.
isempty() returns true if the deque is empty, or false otherwise.
isfull() returns true if the deque is full, or false otherwise.
a string text, you want to use the characters of text to form as many instances of the word "balloon" as possible.
can use each character in text at most once. return the maximum number of instances that can be formed.
has an undirected tree with n nodes labeled from 0 to n - 1. the tree is represented as a 2d integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.
wants bob to find the root of the tree. she allows bob to make several guesses about her tree. in one guess, he does the following:
two distinct integers u and v such that there exists an edge [u, v] in the tree.
tells alice that u is the parent of v in the tree.
guesses are represented by a 2d integer array guesses where guesses[j] = [uj, vj] indicates bob guessed uj to be the parent of vj.
being lazy, does not reply to each of bob's guesses, but just says that at least k of his guesses are true.
the 2d integer arrays edges, guesses and the integer k, return the number of possible nodes that can be the root of alice's tree. if there is no such tree, return 0.
an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.
are given an m x n integer array grid where grid[i][j] could be:
representing the starting square. there is exactly one starting square.
representing the ending square. there is exactly one ending square.
representing empty squares we can walk over.
representing obstacles that we cannot walk over.
the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.
an array of integers nums, you start with an initial positive value startvalue.
each iteration, you calculate the step by step sum of startvalue plus elements in nums (from left to right).
the minimum positive value of startvalue such that the step by step sum is never less than 1.
a binary string s without leading zeros, return true if s contains at most one contiguous segment of ones. otherwise, return false.
an integer array arr, partition the array into (contiguous) subarrays of length at most k. after partitioning, each subarray has their values changed to become the maximum value of that subarray.
the largest sum of the given array after partitioning. test cases are generated so that the answer fits in a 32-bit integer.
are given a string num, representing a large integer, and an integer k.
call some integer wonderful if it is a permutation of the digits in num and is greater in value than num. there can be many wonderful integers. however, we only care about the smallest-valued ones.
example, when num = "5489355142":
1st smallest wonderful integer is "5489355214".
2nd smallest wonderful integer is "5489355241".
3rd smallest wonderful integer is "5489355412".
4th smallest wonderful integer is "5489355421".
the minimum number of adjacent digit swaps that needs to be applied to num to reach the kth smallest wonderful integer.
tests are generated in such a way that kth smallest wonderful integer exists.
are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty (0-indexed).
is at least one empty seat, and at least one person sitting.
wants to sit in the seat such that the distance between him and the closest person to him is maximized.
that maximum distance to the closest person.
are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: "xi==yi" or "xi!=yi".here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.
true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.
are given two 2d integer arrays, items1 and items2, representing two sets of items. each array items has the following properties:
= [valuei, weighti] where valuei represents the value and weighti represents the weight of the ith item.
value of each item in items is unique.
a 2d integer array ret where ret[i] = [valuei, weighti], with weighti being the sum of weights of all items with value valuei.
ret should be returned in ascending order by value.
are given an integer array ranks and a character array suits. you have 5 cards where the ith card has a rank of ranks[i] and a suit of suits[i].
following are the types of poker hands you can make from best to worst:
five cards of the same suit.
of a kind": three cards of the same rank.
two cards of the same rank.
card": any single card.
a string representing the best type of poker hand you can make with the given cards.
that the return values are case-sensitive.
are given an encoded string s. to decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:
the character read is a letter, that letter is written onto the tape.
the character read is a digit d, the entire current tape is repeatedly written d - 1 more times in total.
an integer k, return the kth letter (1-indexed) in the decoded string.
the root of a binary tree, replace the value of each node in the tree with the sum of all its cousins' values.
nodes of a binary tree are cousins if they have the same depth with different parents.
the root of the modified tree.
that the depth of a node is the number of edges in the path from the root node to it.
a string n representing an integer, return the closest integer (not including itself), which is a palindrome. if there is a tie, return the smaller one.
closest is defined as the absolute difference minimized between two integers.
an array of strings words, return the words that can be typed using letters of the alphabet on only one row of american keyboard like the image below.
the american keyboard:
first row consists of the characters "qwertyuiop",
second row consists of the characters "asdfghjkl", and
third row consists of the characters "zxcvbnm".
are given a 0-indexed string pattern of length n consisting of the characters 'i' meaning increasing and 'd' meaning decreasing.
0-indexed string num of length n + 1 is created using the following conditions:
consists of the digits '1' to '9', where each digit is used at most once.
pattern[i] == 'i', then num[i] < num[i + 1].
pattern[i] == 'd', then num[i] > num[i + 1].
the lexicographically smallest possible string num that meets the conditions.
the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.
are given two strings word1 and word2. you want to construct a string merge in the following way: while either word1 or word2 are non-empty, choose one of the following options:
word1 is non-empty, append the first character in word1 to merge and delete it from word1.
example, if word1 = "abc" and merge = "dv", then after choosing this operation, word1 = "bc" and merge = "dva".
word2 is non-empty, append the first character in word2 to merge and delete it from word2.
example, if word2 = "abc" and merge = "", then after choosing this operation, word2 = "bc" and merge = "a".
the lexicographically largest merge you can construct.
string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. for example, "abcd" is lexicographically larger than "abcc" because the first position they differ is at the fourth character, and d is greater than c.
are given two 0-indexed strings s and target. you can take some letters from s and rearrange them to form new strings.
the maximum number of copies of target that can be formed by taking letters from s and rearranging them.
are given a string num consisting of digits only.
the largest palindromic integer (in the form of a string) that can be formed using digits taken from num. it should not contain leading zeroes.

do not need to use all the digits of num, but you must use at least one digit.
digits can be reordered.
are given two 0-indexed integer arrays nums1 and nums2 of equal length n and a positive integer k. you must choose a subsequence of indices from nums1 of length k.
chosen indices i0, i1, ..., ik - 1, your score is defined as:
sum of the selected elements from nums1 multiplied with the minimum of the selected elements from nums2.
can defined simply as: (nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1]).
the maximum possible score.
subsequence of indices of an array is a set that can be derived from the set {0, 1, ..., n-1} by deleting some or no elements.
are given an integer array of unique positive integers nums. consider the following graph:
are nums.length nodes, labeled nums[0] to nums[nums.length - 1],
is an undirected edge between nums[i] and nums[j] if nums[i] and nums[j] share a common factor greater than 1.
the size of the largest connected component in the graph.
an array arr that represents a permutation of numbers from 1 to n.
have a binary string of size n that initially has all its bits set to zero. at each step i (assuming both the binary string and arr are 1-indexed) from 1 to n, the bit at position arr[i] is set to 1.
are also given an integer m. find the latest step at which there exists a group of ones of length m. a group of ones is a contiguous substring of 1's such that it cannot be extended in either direction.
the latest step at which there exists a group of ones of length exactly m. if no such group exists, return -1.
an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.
the sum of the three integers.
may assume that each input would have exactly one solution.
are given a 0-indexed binary string floor, which represents the colors of tiles on a floor:
= '0' denotes that the ith tile of the floor is colored black.
the other hand, floor[i] = '1' denotes that the ith tile of the floor is colored white.
are also given numcarpets and carpetlen. you have numcarpets black carpets, each of length carpetlen tiles. cover the tiles with the given carpets such that the number of white tiles still visible is minimum. carpets may overlap one another.
the minimum number of white tiles still visible.
are playing a solitaire game with three piles of stones of sizes a, b, and c respectively. each turn you choose two different non-empty piles, take one stone from each, and add 1 point to your score. the game stops when there are fewer than two non-empty piles (meaning there are no more available moves).
three integers a, b, and c, return the maximum score you can get.
are given a 0-indexed array nums consisiting of positive integers. you can do the following operation on the array any number of times:
an index i such that 0 <= i < n - 1 and replace either of nums[i] or nums[i+1] with their gcd value.
the minimum number of operations to make all elements of nums equal to 1. if it is impossible, return -1.
gcd of two integers is the greatest common divisor of the two integers.
schema
weather

column name | type |

id | int |
recorddate | date |
temperature | int |

is the primary key for this table.
table contains information about the temperature on a certain day.
an sql query to find all dates' id with higher temperatures compared to its previous dates (yesterday).
the result table in any order.
query result format is in the following example.
an integer array arr and a mapping function fn, return a new array with a transformation applied to each element.
returned array should be created such that returnedarray[i] = fn(arr[i], i).
solve it without the built-in array.map method.
friend is typing his name into a keyboard. sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.
examine the typed characters of the keyboard. return true if it is possible that it was your friends name, with some characters (possibly none) being long pressed.
a string formula representing a chemical formula, return the count of each atom.
atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.
or more digits representing that element's count may follow if the count is greater than 1. if the count is 1, no digits will follow.
example, "h2o" and "h2o2" are possible, but "h1o2" is impossible.
formulas are concatenated together to produce another formula.
example, "h2o2he3mg4" is also a formula.
formula placed in parentheses, and a count (optionally added) is also a formula.
example, "(h2o2)" and "(h2o2)3" are formulas.
the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.
test cases are generated so that all the values in the output fit in a 32-bit integer.
are given a positive integer k. you are also given:
2d integer array rowconditions of size n where rowconditions[i] = [abovei, belowi], and
2d integer array colconditions of size m where colconditions[i] = [lefti, righti].
two arrays contain integers from 1 to k.
have to build a k x k matrix that contains each of the numbers from 1 to k exactly once. the remaining cells should have the value 0.
matrix should also satisfy the following conditions:
number abovei should appear in a row that is strictly above the row at which the number belowi appears for all i from 0 to n - 1.
number lefti should appear in a column that is strictly left of the column at which the number righti appears for all i from 0 to m - 1.
any matrix that satisfies the conditions. if no answer exists, return an empty matrix.
an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.
k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:
<= i, j < nums.length
!= j
- nums[j]| == k
that |val| denotes the absolute value of val.
are given a 0-indexed array nums of size n consisting of non-negative integers.
need to apply n - 1 operations to this array where, in the ith operation (0-indexed), you will apply the following on the ith element of nums:
nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0. otherwise, you skip this operation.
performing all the operations, shift all the 0's to the end of the array.
example, the array [1,0,2,0,0,1] after shifting all its 0's to the end, is [1,2,1,0,0,0].
the resulting array.
that the operations are applied sequentially, not all at once.
a 0-indexed integer array nums of size n, find the maximum difference between nums[i] and nums[j] (i.e., nums[j] - nums[i]), such that 0 <= i < j < n and nums[i] < nums[j].
the maximum difference. if no such i and j exists, return -1.
are given an array of n strings strs, all of the same length.
strings can be arranged such that there is one on each line, making a grid.
example, strs = ["abc", "bce", "cae"] can be arranged as follows:



want to delete the columns that are not sorted lexicographically. in the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted, while column 1 ('b', 'c', 'a') is not, so you would delete column 1.
the number of columns that you will delete.
are given a 0-indexed array of positive integers tasks, representing tasks that need to be completed in order, where tasks[i] represents the type of the ith task.
are also given a positive integer space, which represents the minimum number of days that must pass after the completion of a task before another task of the same type can be performed.
day, until all tasks have been completed, you must either:
the next task from tasks, or
a break.
the minimum number of days needed to complete all tasks.
are given a string s formed by digits and '#'. we want to map s to english lowercase characters as follows:
('a' to 'i') are represented by ('1' to '9') respectively.
('j' to 'z') are represented by ('10#' to '26#') respectively.
the string formed after mapping.
test cases are generated so that a unique mapping will always exist.
are given a stream of n videos, each represented by a distinct number from 1 to n that you need to "upload" to a server. you need to implement a data structure that calculates the length of the longest uploaded prefix at various points in the upload process.
consider i to be an uploaded prefix if all videos in the range 1 to i (inclusive) have been uploaded to the server. the longest uploaded prefix is the maximum value of i that satisfies this definition.

the luprefix class:
n) initializes the object for a stream of n videos.
upload(int video) uploads video to the server.
longest() returns the length of the longest uploaded prefix defined above.
is a country of n cities numbered from 0 to n - 1. in this country, there is a road connecting every pair of cities.
are m friends numbered from 0 to m - 1 who are traveling through the country. each one of them will take a path consisting of some cities. each path is represented by an integer array that contains the visited cities in order. the path may contain a city more than once, but the same city will not be listed consecutively.
an integer n and a 2d integer array paths where paths[i] is an integer array representing the path of the ith friend, return the length of the longest common subpath that is shared by every friend's path, or 0 if there is no common subpath at all.
subpath of a path is a contiguous sequence of cities within that path.
have a pointer at index 0 in an array of size arrlen. at each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (the pointer should not be placed outside the array at any time).
two integers steps and arrlen, return the number of ways such that your pointer is still at index 0 after exactly steps steps. since the answer may be too large, return it modulo 109 + 7.
are given a series of video clips from a sporting event that lasted time seconds. these video clips can be overlapping with each other and have varying lengths.
video clip is described by an array clips where clips[i] = [starti, endi] indicates that the ith clip started at starti and ended at endi.
can cut these clips into segments freely.
example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].
the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time]. if the task is impossible, return -1.
schema
customer

column name | type |

id | int |
name | varchar |
referee_id | int |

is the primary key column for this table.
row of this table indicates the id of a customer, their name, and the id of the customer who referred them.
an sql query to report the names of the customer that are not referred by the customer with id = 2.
the result table in any order.
query result format is in the following example.
are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.
nodes initial are initially infected by malware. whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. this spread of malware will continue until no more nodes can be infected in this manner.
m(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.
will remove exactly one node from initial, completely removing it and any connections from this node to any other node.
the node that, if removed, would minimize m(initial). if multiple nodes could be removed to minimize m(initial), return such a node with the smallest index.
are given an m x n integer grid accounts where accounts[i][j] is the amount of money the ith customer has in the jth bank. return the wealth that the richest customer has.
customer's wealth is the amount of money they have in all their bank accounts. the richest customer is the customer that has the maximum wealth.
an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing.
the length of the shortest subarray to remove.
subarray is a contiguous subsequence of the array.
are given two string arrays, queries and dictionary. all words in each array comprise of lowercase english letters and have the same length.
one edit you can take a word from queries, and change any letter in it to any other letter. find all words from queries that, after a maximum of two edits, equal some word from dictionary.
a list of all words from queries, that match with some word from dictionary after a maximum of two edits. return the words in the same order they appear in queries.
three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound.
integer is powerful if it can be represented as xi + yj for some integers i >= 0 and j >= 0.
may return the answer in any order. in your answer, each value should occur at most once.
an array of integers arr, return true if the number of occurrences of each value in the array is unique or false otherwise.
are given an n x n grid representing a field of cherries, each cell is one of three possible integers.
means the cell is empty, so you can pass through,
means the cell contains a cherry that you can pick up and pass through, or
means the cell contains a thorn that blocks your way.
the maximum number of cherries you can collect by following the rules below:
at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1).
reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells.
passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0.
there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected.
an n x n grid containing only values 0 and 1, where 0 represents water and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. if no land or water exists in the grid, return -1.
distance used in this problem is the manhattan distance: the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.
are given an undirected graph. you are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.
connected trio is a set of three nodes where there is an edge between every pair of them.
degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.
the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.
are a total of numcourses courses you have to take, labeled from 0 to numcourses - 1. you are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
the ordering of courses you should take to finish all courses. if there are many valid answers, return any of them. if it is impossible to finish all courses, return an empty array.
string is a valid parentheses string (denoted vps) if and only if it consists of "(" and ")" characters only, and:
is the empty string, or
can be written as ab (a concatenated with b), where a and b are vps's, or
can be written as (a), where a is a vps.
can similarly define the nesting depth depth(s) of any vps s as follows:
= 0
+ b) = max(depth(a), depth(b)), where a and b are vps's
+ a + ")") = 1 + depth(a), where a is a vps.
example, "", "()()", and "()(()())" are vps's (with nesting depths 0, 1, and 2), and ")(" and "(()" are not vps's.
a vps seq, split it into two disjoint subsequences a and b, such that a and b are vps's (and a.length + b.length = seq.length).
choose any such a and b such that max(depth(a), depth(b)) is the minimum possible value.
an answer array (of length seq.length) that encodes such a choice of a and b: answer[i] = 0 if seq[i] is part of a, else answer[i] = 1. note that even though multiple answers may exist, you may return any of them.
a positive integer n, there exists a 0-indexed array called powers, composed of the minimum number of powers of 2 that sum to n. the array is sorted in non-decreasing order, and there is only one way to form the array.
are also given a 0-indexed 2d integer array queries, where queries[i] = [lefti, righti]. each queries[i] represents a query where you have to find the product of all powers[j] with lefti <= j <= righti.
an array answers, equal in length to queries, where answers[i] is the answer to the ith query. since the answer to the ith query may be too large, each answers[i] should be returned modulo 109 + 7.
a function that checks if a given value is an instance of a given class or superclass. for this problem, an object is considered an instance of a given class if that object has access to that class's methods.
are no constraints on the data types that can be passed to the function. for example, the value or the class could be undefined.
factorial of a positive integer n is the product of all positive integers less than or equal to n.
example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1.
make a clumsy factorial using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply '*', divide '/', add '+', and subtract '-' in this order.
example, clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1.
these operations are still applied using the usual order of operations of arithmetic. we do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.
the division that we use is floor division such that 10 * 9 / 8 = 90 / 8 = 11.
an integer n, return the clumsy factorial of n.
are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. a point on the perimeter of a rectangle is included in the space covered by the rectangle.
integer point inside the space covered by one of the given rectangles should be equally likely to be returned.
that an integer point is a point that has integer coordinates.
the solution class:
rects) initializes the object with the given rectangles rects.
pick() returns a random integer point [u, v] inside the space covered by one of the given rectangles.
are given an integer array deck where deck[i] represents the number written on the ith card.
the cards into one or more groups such that:
group has exactly x cards where x > 1, and
the cards in one group have the same integer written on them.
true if such partition is possible, or false otherwise.
are stacking blocks to form a pyramid. each block has a color, which is represented by a single letter. each row of blocks contains one less block than the row beneath it and is centered on top.
make the pyramid aesthetically pleasing, there are only specific triangular patterns that are allowed. a triangular pattern consists of a single block stacked on top of two blocks. the patterns are given as a list of three-letter strings allowed, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.
example, "abc" represents a triangular pattern with a 'c' block stacked on top of an 'a' (left) and 'b' (right) block. note that this is different from "bac" where 'b' is on the left bottom and 'a' is on the right bottom.
start with a bottom row of blocks bottom, given as a single string, that you must use as the base of the pyramid.
bottom and allowed, return true if you can build the pyramid all the way to the top such that every triangular pattern in the pyramid is in allowed, or false otherwise.
an array of integers nums, sort the array in increasing order based on the frequency of the values. if multiple values have the same frequency, sort them in decreasing order.
the sorted array.
are given two 2d integer arrays nums1 and nums2.
= [idi, vali] indicate that the number with the id idi has a value equal to vali.
= [idi, vali] indicate that the number with the id idi has a value equal to vali.
array contains unique ids and is sorted in ascending order by id.
the two arrays into one array that is sorted in ascending order by id, respecting the following conditions:
ids that appear in at least one of the two arrays should be included in the resulting array.
id should be included only once and its value should be the sum of the values of this id in the two arrays. if the id does not exist in one of the two arrays then its value in that array is considered to be 0.
the resulting array. the returned array must be sorted in ascending order by id.
two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement:
this list is answer = [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers.
the list answer. if there multiple valid answers, return any of them.
are currently designing a dynamic array. you are given a 0-indexed integer array nums, where nums[i] is the number of elements that will be in the array at time i. in addition, you are given an integer k, the maximum number of times you can resize the array (to any size).
size of the array at time t, sizet, must be at least nums[t] because there needs to be enough space in the array to hold all the elements. the space wasted at time t is defined as sizet - nums[t], and the total space wasted is the sum of the space wasted across every time t where 0 <= t < nums.length.
the minimum total space wasted if you can resize the array at most k times.
the array can have any size at the start and does not count towards the number of resizing operations.
are given the root node of a binary search tree (bst) and a value to insert into the tree. return the root node of the bst after the insertion. it is guaranteed that the new value does not exist in the original bst.
that there may exist multiple valid ways for the insertion, as long as the tree remains a bst after insertion. you can return any of them.
an integer array nums, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.
the shortest such subarray and output its length.
are 8 prison cells in a row and each cell is either occupied or vacant.
day, whether the cell is occupied or vacant changes according to the following rules:
a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.
it becomes vacant.
that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.
are given an integer array cells where cells[i] == 1 if the ith cell is occupied and cells[i] == 0 if the ith cell is vacant, and you are given an integer n.
the state of the prison after n days (i.e., n such changes described above).
are given an integer n. we reorder the digits in any order (including the original order) such that the leading digit is not zero.
true if and only if we can do this so that the resulting number is a power of two.
are given an array of positive integers beans, where each integer represents the number of magic beans found in a particular magic bag.
any number of beans (possibly none) from each bag such that the number of beans in each remaining non-empty bag (still containing at least one bean) is equal. once a bean has been removed from a bag, you are not allowed to return it to any of the bags.
the minimum number of magic beans that you have to remove.
are given two positive integers n and target.
integer is considered beautiful if the sum of its digits is less than or equal to target.
the minimum non-negative integer x such that n + x is beautiful. the input will be generated such that it is always possible to make n beautiful.
an array of integers nums, calculate the pivot index of this array.
pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.
the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. this also applies to the right edge of the array.
the leftmost pivot index. if no such index exists, return -1.
are given a 0-indexed integer array nums.
all of the indices are unmarked. you are allowed to make this operation any number of times:
two different unmarked indices i and j such that 2 * nums[i] <= nums[j], then mark i and j.
the maximum possible number of marked indices in nums using the above operation any number of times.
a function createcounter. it should accept an initial integer init. it should return an object with three functions.
three functions are:
increases the current value by 1 and then returns it.
reduces the current value by 1 and then returns it.
sets the current value to init and then returns it.
a string s, find the first non-repeating character in it and return its index. if it does not exist, return -1.
string s is called happy if it satisfies the following conditions:
only contains the letters 'a', 'b', and 'c'.
does not contain any of "aaa", "bbb", or "ccc" as a substring.
contains at most a occurrences of the letter 'a'.
contains at most b occurrences of the letter 'b'.
contains at most c occurrences of the letter 'c'.
three integers a, b, and c, return the longest possible happy string. if there are multiple longest happy strings, return any of them. if there is no such string, return the empty string "".
substring is a contiguous sequence of characters within a string.
an array of functions [f1, f2, f3, ..., fn], return a new function fn that is the function composition of the array of functions.
function composition of [f(x), g(x), h(x)] is fn(x) = f(g(h(x))).
function composition of an empty list of functions is the identity function f(x) = x.
may assume each function in the array accepts one integer as input and returns one integer as output.
a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. if the array is already strictly increasing, return true.
array nums is strictly increasing if nums[i - 1] < nums[i] for each index (1 <= i < nums.length).
are given a 0-indexed string s. you are also given a 0-indexed string querycharacters of length k and a 0-indexed array of integer indices queryindices of length k, both of which are used to describe k queries.
ith query updates the character in s at index queryindices[i] to the character querycharacters[i].
an array lengths of length k where lengths[i] is the length of the longest substring of s consisting of only one repeating character after the ith query is performed.
schema
delivery

column name | type |

delivery_id | int |
customer_id | int |
order_date | date |
customer_pref_delivery_date | date |

is the primary key of this table.
table holds information about food delivery to customers that make orders at some date and specify a preferred delivery date (on the same order date or after it).
the customer's preferred delivery date is the same as the order date, then the order is called immediate; otherwise, it is called scheduled.
first order of a customer is the order with the earliest order date that the customer made. it is guaranteed that a customer has precisely one first order.
an sql query to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.
query result format is in the following example.
an integer array nums, return the number of subarrays filled with 0.
subarray is a contiguous non-empty sequence of elements within an array.
string is a valid parentheses string (denoted vps) if it meets one of the following:
is an empty string "", or a single character not equal to "(" or ")",
can be written as ab (a concatenated with b), where a and b are vps's, or
can be written as (a), where a is a vps.
can similarly define the nesting depth depth(s) of any vps s as follows:
= 0
= 0, where c is a string with a single character not equal to "(" or ")".
+ b) = max(depth(a), depth(b)), where a and b are vps's.
+ a + ")") = 1 + depth(a), where a is a vps.
example, "", "()()", and "()(()())" are vps's (with nesting depths 0, 1, and 2), and ")(" and "(()" are not vps's.
a vps represented as string s, return the nesting depth of s.
a number container system that can do the following:
or replace a number at the given index in the system.
the smallest index for the given number in the system.
the numbercontainers class:
initializes the number container system.
change(int index, int number) fills the container at index with the number. if there is already a number at that index, replace it.
find(int number) returns the smallest index for the given number, or -1 if there is no index that is filled by number in the system.
is an infrastructure of n cities with some number of roads connecting these cities. each roads[i] = [ai, bi] indicates that there is a bidirectional road between cities ai and bi.
network rank of two different cities is defined as the total number of directly connected roads to either city. if a road is directly connected to both cities, it is only counted once.
maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.
the integer n and the array roads, return the maximal network rank of the entire infrastructure.
are given two linked lists: list1 and list2 of sizes n and m respectively.
list1's nodes from the ath node to the bth node, and put list2 in their place.
blue edges and nodes in the following figure indicate the result:
the result list and return its head.
a string s and an integer k, return true if you can use all the characters in s to construct k palindrome strings or false otherwise.
are given a 0-indexed integer array nums and a target element target.
target index is an index i such that nums[i] == target.
a list of the target indices of nums after sorting nums in non-decreasing order. if there are no target indices, return an empty list. the returned list must be sorted in increasing order.
an array of integers arr of even length n and an integer k.
want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k.
true if you can find a way to do that or false otherwise.
alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.
example, the alternating sum of [4,2,5,3] is (4 + 5) - (2 + 3) = 4.
an array nums, return the maximum alternating sum of any subsequence of nums (after reindexing the elements of the subsequence).
subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. for example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.
pow(x, n), which calculates x raised to the power n (i.e., xn).
are given an integer num. you know that danny mittal will sneakily remap one of the 10 possible digits (0 to 9) to another digit.
the difference between the maximum and minimum values danny can make by remapping exactly one digit in num.

danny remaps a digit d1 to another digit d2, danny replaces all occurrences of d1 in num with d2.
can remap a digit to itself, in which case num does not change.
can remap different digits for obtaining minimum and maximum values respectively.
resulting number after remapping can contain leading zeroes.
mentioned "danny mittal" to congratulate him on being in the top 10 in weekly contest 326.
are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.
value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).
view the projection of these cubes onto the xy, yz, and zx planes.
projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. we are viewing the "shadow" when looking at the cubes from the top, the front, and the side.
the total area of all three projections.
a string date representing a gregorian calendar date formatted as yyyy-mm-dd, return the day number of the year.
are given an integer n. there are n rooms numbered from 0 to n - 1.
are given a 2d integer array meetings where meetings[i] = [starti, endi] means that a meeting will be held during the half-closed time interval [starti, endi). all the values of starti are unique.
are allocated to rooms in the following manner:
meeting will take place in the unused room with the lowest number.
there are no available rooms, the meeting will be delayed until a room becomes free. the delayed meeting should have the same duration as the original meeting.
a room becomes unused, meetings that have an earlier original start time should be given the room.
the number of the room that held the most meetings. if there are multiple rooms, return the room with the lowest number.
half-closed interval [a, b) is the interval between a and b including a and not including b.
the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).
a string s of lowercase letters, you need to find the maximum number of non-empty substrings of s that meet the following conditions:
substrings do not overlap, that is for any two substrings s[i..j] and s[x..y], either j < x or i > y is true.
substring that contains a certain character c must also contain all occurrences of c.
the maximum number of substrings that meet the above conditions. if there are multiple solutions with the same number of substrings, return the one with minimum total length. it can be shown that there exists a unique solution of minimum total length.
that you can return the substrings in any order.
are given an m x n integer matrix grid and an array queries of size k.
an array answer of size k such that for each integer queries[i] you start in the top left cell of the matrix and repeat the following process:
queries[i] is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all 4 directions: up, down, left, and right.
you do not get any points, and you end this process.
the process, answer[i] is the maximum number of points you can get. note that for each query you are allowed to visit the same cell multiple times.
the resulting array answer.
schema
requestaccepted

column name | type |

requester_id | int |
accepter_id | int |
accept_date | date |

accepter_id) is the primary key for this table.
table contains the id of the user who sent the request, the id of the user who received the request, and the date when the request was accepted.
an sql query to find the people who have the most friends and the most friends number.
test cases are generated so that only one person has the most friends.
query result format is in the following example.
a 0-indexed integer array nums, find a 0-indexed integer array answer where:
== nums.length.
= |leftsum[i] - rightsum[i]|.

is the sum of elements to the left of the index i in the array nums. if there is no such element, leftsum[i] = 0.
is the sum of elements to the right of the index i in the array nums. if there is no such element, rightsum[i] = 0.
the array answer.
two strings s and t, return the number of distinct

s which equals t.
test cases are generated so that the answer fits on a 32-bit signed integer.
a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
are given an m x n integer matrix grid, where m and n are both even integers, and an integer k.
matrix is composed of several layers, which is shown in the below image, where each color is its own layer:
cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix. to cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the counter-clockwise direction. an example rotation is shown below:
the matrix after applying k cyclic rotations to it.
are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers.
should rearrange the elements of nums such that the modified array follows the given conditions:
consecutive pair of integers have opposite signs.
all integers with the same sign, the order in which they were present in nums is preserved.
rearranged array begins with a positive integer.
the modified array after rearranging the elements to satisfy the aforementioned conditions.
decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. for example, 101 and 1100 are deci-binary, while 112 and 3001 are not.
a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to n.
are given an integer array nums. you are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.
true if you can reach the last index, or false otherwise.
an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 109 + 7.
are given two 0-indexed integer arrays nums and divisors.
divisibility score of divisors[i] is the number of indices j such that nums[j] is divisible by divisors[i].
the integer divisors[i] with the maximum divisibility score. if there is more than one integer with the maximum score, return the minimum of them.
exists an undirected and initially unrooted tree with n nodes indexed from 0 to n - 1. you are given the integer n and a 2d integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.
node has an associated price. you are given an integer array price, where price[i] is the price of the ith node.
price sum of a given path is the sum of the prices of all nodes lying on that path.
tree can be rooted at any node root of your choice. the incurred cost after choosing root is the difference between the maximum and minimum price sum amongst all paths starting at root.
the maximum possible cost amongst all possible root choices.
are given a map of a server center, represented as a m * n integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server. two servers are said to communicate if they are on the same row or on the same column.

the number of servers that communicate with any other server.
are given an integer n.
number from 1 to n is grouped according to the sum of its digits.
the number of groups that have the largest size.
are given a 2d integer array ranges and two integers left and right. each ranges[i] = [starti, endi] represents an inclusive interval between starti and endi.
true if each integer in the inclusive range [left, right] is covered by at least one interval in ranges. return false otherwise.
integer x is covered by an interval ranges[i] = [starti, endi] if starti <= x <= endi.
city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). the edges in the graph are represented as a 2d integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. every vertex pair is connected by at most one edge, and no vertex has an edge to itself. the time taken to traverse any edge is time minutes.
vertex has a traffic signal which changes its color from green to red and vice versa every change minutes. all signals change at the same time. you can enter a vertex at any time, but can leave a vertex only when the signal is green. you cannot wait at a vertex if the signal is green.
second minimum value is defined as the smallest value strictly larger than the minimum value.
example the second minimum value of [2, 3, 4] is 3, and the second minimum value of [2, 2, 4] is 4.
n, edges, time, and change, return the second minimum time it will take to go from vertex 1 to vertex n.

can go through any vertex any number of times, including 1 and n.
can assume that when the journey starts, all signals have just turned green.
are given a string s. you can convert s to a

adding characters in front of it.
the shortest palindrome you can find by performing this transformation.
an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.
the result as a list of indices representing the starting position of each interval (0-indexed). if there are multiple answers, return the lexicographically smallest one.
code that enhances all arrays such that you can call the array.groupby(fn) method on any array and it will return a grouped version of the array.
grouped array is an object where each key is the output of fn(arr[i]) and each value is an array containing all items in the original array with that key.
provided callback fn will accept an item in the array and return a string key.
order of each value list should be the order the items appear in the array. any order of keys is acceptable.
solve it without lodash's _.groupby function.
a string s, remove duplicate letters so that every letter appears once and only once. you must make sure your result is
smallest in lexicographical order
all possible results.
are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.
that x does not have to be an element in nums.
x if the array is special, otherwise, return -1. it can be proven that if nums is special, the value for x is unique.
are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.
example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.
will start at the bus stop source (you are not on any bus initially), and you want to go to the bus stop target. you can travel between bus stops by buses only.
the least number of buses you must take to travel from source to target. return -1 if it is not possible.
an integer array nums, find the

the largest sum, and return its sum.
the root of a binary tree, return the sum of values of nodes with an even-valued grandparent. if there are no nodes with an even-valued grandparent, return 0.
grandparent of a node is the parent of its parent if it exists.
are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.
it is possible, return any [i, j] with i + 1 < j, such that:
arr[1], ..., arr[i] is the first part,
+ 1], arr[i + 2], ..., arr[j - 1] is the second part, and
arr[j + 1], ..., arr[arr.length - 1] is the third part.
three parts have equal binary values.
it is not possible, return [-1, -1].
that the entire part is used when considering what binary value it represents. for example, [1,1,0] represents 6 in decimal, not 3. also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.
two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
other words, return true if one of s1's permutations is the substring of s2.
and bob are opponents in an archery competition. the competition has set the following rules:
first shoots numarrows arrows and then bob shoots numarrows arrows.
points are then calculated as follows:
target has integer scoring sections ranging from 0 to 11 inclusive.
each section of the target with score k (in between 0 to 11), say alice and bob have shot ak and bk arrows on that section respectively. if ak >= bk, then alice takes k points. if ak < bk, then bob takes k points.
if ak == bk == 0, then nobody takes k points.
example, if alice and bob both shot 2 arrows on the section with score 11, then alice takes 11 points. on the other hand, if alice shot 0 arrows on the section with score 11 and bob shot 2 arrows on that same section, then bob takes 11 points.
are given the integer numarrows and an integer array alicearrows of size 12, which represents the number of arrows alice shot on each scoring section from 0 to 11. now, bob wants to maximize the total number of points he can obtain.
the array bobarrows which represents the number of arrows bob shot on each scoring section from 0 to 11. the sum of the values in bobarrows should equal numarrows.
there are multiple ways for bob to earn the maximum total points, return any one of them.
an integer array nums, return the sum of floor(nums[i] / nums[j]) for all pairs of indices 0 <= i, j < nums.length in the array. since the answer may be too large, return it modulo 109 + 7.
floor() function returns the integer part of the division.
two strings s and part, perform the following operation on s until all occurrences of the substring part are removed:
the leftmost occurrence of the substring part and remove it from s.
s after removing all occurrences of part.
substring is a contiguous sequence of characters in a string.
distance of a pair of integers a and b is defined as the absolute difference between a and b.
an integer array nums and an integer k, return the kth smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.
an m x n binary matrix mat, return the distance of the nearest 0 for each cell.
distance between two adjacent cells is 1.
k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)
are given some events [starttime, endtime), after each given event, return an integer k representing the maximum k-booking between all the previous events.
the mycalendarthree class:
initializes the object.
book(int starttime, int endtime) returns an integer k representing the largest integer such that there exists a k-booking in the calendar.
are given an integer n and an integer p in the range [0, n - 1]. representing a 0-indexed array arr of length n where all positions are set to 0's, except position p which is set to 1.
are also given an integer array banned containing some positions from the array. for the ith position in banned, arr[banned[i]] = 0, and banned[i] != p.
can perform multiple operations on arr. in an operation, you can choose a subarray with size k and reverse the subarray. however, the 1 in arr should never go to any of the positions in banned. in other words, after each operation arr[banned[i]] remains 0.
an array ans where for each i from [0, n - 1], ans[i] is the minimum number of reverse operations needed to bring the 1 to position i in arr, or -1 if it is impossible.
subarray is a contiguous non-empty sequence of elements within an array.
values of ans[i] are independent for all i's.
reverse of an array is an array containing the values in reverse order.
are given a 0-indexed array of distinct integers nums.
is an element in nums that has the lowest value and an element that has the highest value. we call them the minimum and maximum respectively. your goal is to remove both these elements from the array.
deletion is defined as either removing an element from the front of the array or removing an element from the back of the array.
the minimum number of deletions it would take to remove both the minimum and maximum element from the array.
the root of a binary tree, return the sum of values of its deepest leaves.
two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.
you must not use any built-in biginteger library or convert the inputs to integer directly.
an array of strings names of size n. you will create n folders in your file system such that, at the ith minute, you will create a folder with the name names[i].
two files cannot have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.
an array of strings of length n where ans[i] is the actual name the system will assign to the ith folder when you create it.
array arr a mountain if the following properties hold:
>= 3
exists some i with 0 < i < arr.length - 1 such that:
< arr[1] < ... < arr[i - 1] < arr[i]
> arr[i + 1] > ... > arr[arr.length - 1]
a mountain array arr, return the index i such that arr[0] < arr[1] < ... < arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].
must solve it in o(log(arr.length)) time complexity.
a binary array nums, you should delete one element from it.
the size of the longest non-empty subarray containing only 1's in the resulting array. return 0 if there is no such subarray.
are given a string s consisting of the characters 'a', 'b', and 'c' and a non-negative integer k. each minute, you may take either the leftmost character of s, or the rightmost character of s.
the minimum number of minutes needed for you to take at least k of each character, or return -1 if it is not possible to take k of each character.
a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.
an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. if there is no such subarray, return -1.
subarray is a contiguous part of an array.
a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.
there are fewer than k characters left, reverse all of them. if there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.
conveyor belt has packages that must be shipped from one port to another within days days.
ith package on the conveyor belt has a weight of weights[i]. each day, we load the ship with packages on the conveyor belt (in the order given by weights). we may not load more weight than the maximum weight capacity of the ship.
the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.
two integers num and k, consider a set of positive integers with the following properties:
units digit of each integer is k.
sum of the integers is num.
the minimum possible size of such a set, or -1 if no such set exists.

set can contain multiple instances of the same integer, and the sum of an empty set is considered 0.
units digit of a number is the rightmost digit of the number.
are given two integers n and maxvalue, which are used to describe an ideal array.
0-indexed integer array arr of length n is considered ideal if the following conditions hold:
arr[i] is a value from 1 to maxvalue, for 0 <= i < n.
arr[i] is divisible by arr[i - 1], for 0 < i < n.
the number of distinct ideal arrays of length n. since the answer may be very large, return it modulo 109 + 7.
a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.
the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.
can return the answer in any order.
an array of digits which is sorted in non-decreasing order. you can write numbers using each digits[i] as many times as we want. for example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'.
the number of positive integers that can be generated that are less than or equal to a given integer n.
are given an integer n indicating the number of people in a network. each person is labeled from 0 to n - 1.
are also given a 0-indexed 2d integer array restrictions, where restrictions[i] = [xi, yi] means that person xi and person yi cannot become friends, either directly or indirectly through other people.
no one is friends with each other. you are given a list of friend requests as a 0-indexed 2d integer array requests, where requests[j] = [uj, vj] is a friend request between person uj and person vj.
friend request is successful if uj and vj can be friends. each friend request is processed in the given order (i.e., requests[j] occurs before requests[j + 1]), and upon a successful request, uj and vj become direct friends for all future friend requests.
a boolean array result, where each result[j] is true if the jth friend request is successful or false if it is not.
if uj and vj are already direct friends, the request is still successful.
are given two identical eggs and you have access to a building with n floors labeled from 1 to n.
know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.
each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). if the egg breaks, you can no longer use it. however, if the egg does not break, you may reuse it in future moves.
the minimum number of moves that you need to determine with certainty what the value of f is.
have n chips, where the position of the ith chip is position[i].
need to move all the chips to the same position. in one step, we can change the position of the ith chip from position[i] to:
+ 2 or position[i] - 2 with cost = 0.
+ 1 or position[i] - 1 with cost = 1.
the minimum cost needed to move all the chips to the same position.
the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.
the head of a linked list, rotate the list to the right by k places.
an m x n grid of characters board and a string word, return true if word exists in the grid.
word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. the same letter cell may not be used more than once.
an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. if target exists, then return its index. otherwise, return -1.
must write an algorithm with o(log n) runtime complexity.
message containing letters from a-z can be encoded into numbers using the following mapping:
-> "1"
-> "2"

-> "26"
decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). for example, "11106" can be mapped into:
with the grouping (1 1 10 6)
with the grouping (11 10 6)
that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'f' since "6" is different from "06".
addition to the mapping above, an encoded message may contain the '*' character, which can represent any digit from '1' to '9' ('0' is excluded). for example, the encoded message "1*" may represent any of the encoded messages "11", "12", "13", "14", "15", "16", "17", "18", or "19". decoding "1*" is equivalent to decoding any of the encoded messages it can represent.
a string s consisting of digits and '*' characters, return the number of ways to decode it.
the answer may be very large, return it modulo 109 + 7.
a string s and an array of strings words, return the number of words[i] that is a subsequence of s.
subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
example, "ace" is a subsequence of "abcde".
a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.
that operands in the returned expressions should not contain leading zeros.
an array of integers nums and an integer k. a continuous subarray is called nice if there are k odd numbers on it.
the number of nice sub-arrays.
are given an array nums that consists of non-negative integers. let us define rev(x) as the reverse of the non-negative integer x. for example, rev(123) = 321, and rev(120) = 21. a pair of indices (i, j) is nice if it satisfies all of the following conditions:
<= i < j < nums.length
+ rev(nums[j]) == nums[j] + rev(nums[i])
the number of nice pairs of indices. since that number can be too large, return it modulo 109 + 7.
a string s and a dictionary of strings worddict, add spaces in s to construct a sentence where each word is a valid dictionary word. return all such possible sentences in any order.
that the same word in the dictionary may be reused multiple times in the segmentation.
an integer n, return the smallest prime palindrome greater than or equal to n.
integer is prime if it has exactly two divisors: 1 and itself. note that 1 is not a prime number.
example, 2, 3, 5, 7, 11, and 13 are all primes.
integer is a palindrome if it reads the same from left to right as it does from right to left.
example, 101 and 12321 are palindromes.
test cases are generated so that the answer always exists and is in the range [2, 2 * 108].
schema
employee

column name | type |

id | int |
salary | int |

is the primary key column for this table.
row of this table contains information about the salary of an employee.
an sql query to report the second highest salary from the employee table. if there is no second highest salary, the query should report null.
query result format is in the following example.
are given a string s, which contains stars *.
one operation, you can:
a star in s.
the closest non-star character to its left, as well as remove the star itself.
the string after all stars have been removed.

input will be generated such that the operation is always possible.
can be shown that the resulting string will always be unique.
a positive integer n, return the punishment number of n.
punishment number of n is defined as the sum of the squares of all integers i such that:
<= i <= n
decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.
is a caretaker of n gardens and she wants to plant flowers to maximize the total beauty of all her gardens.
are given a 0-indexed integer array flowers of size n, where flowers[i] is the number of flowers already planted in the ith garden. flowers that are already planted cannot be removed. you are then given another integer newflowers, which is the maximum number of flowers that alice can additionally plant. you are also given the integers target, full, and partial.
garden is considered complete if it has at least target flowers. the total beauty of the gardens is then determined as the sum of the following:
number of complete gardens multiplied by full.
minimum number of flowers in any of the incomplete gardens multiplied by partial. if there are no incomplete gardens, then this value will be 0.
the maximum total beauty that alice can obtain after planting at most newflowers flowers.
the coordinates of two rectilinear rectangles in a 2d plane, return the total area covered by the two rectangles.
first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).
second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).
schema
employee

column name | type |

empid | int |
name | varchar |
supervisor | int |
salary | int |

is the primary key column for this table.
row of this table indicates the name and the id of an employee in addition to their salary and the id of their manager.
bonus

column name | type |

empid | int |
bonus | int |

is the primary key column for this table.
is a foreign key to empid from the employee table.
row of this table contains the id of an employee and their respective bonus.
an sql query to report the name and bonus amount of each employee with a bonus less than 1000.
the result table in any order.
query result format is in the following example.
xor total of an array is defined as the bitwise xor of all its elements, or 0 if the array is empty.
example, the xor total of the array [2,5,6] is 2 xor 5 xor 6 = 1.
an array nums, return the sum of all xor totals for every subset of nums.
subsets with the same elements should be counted multiple times.
array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b.
a string s consisting only of characters 'a', 'b', and 'c'. you are asked to apply the following algorithm on the string any number of times:
a non-empty prefix from the string s where all the characters in the prefix are equal.
a non-empty suffix from the string s where all the characters in this suffix are equal.
prefix and the suffix should not intersect at any index.
characters from the prefix and suffix must be the same.
both the prefix and the suffix.
the minimum length of s after performing the above operation any number of times (possibly zero times).
two version numbers, version1 and version2, compare them.
numbers consist of one or more revisions joined by a dot '.'. each revision consists of digits and may contain leading zeros. every revision contains at least one character. revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. for example 2.5.33 and 0.1 are valid version numbers.
compare version numbers, compare their revisions in left-to-right order. revisions are compared using their integer value ignoring any leading zeros. this means that revisions 1 and 001 are considered equal. if a version number does not specify a revision at an index, then treat the revision as 0. for example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1.
the following:
version1 < version2, return -1.
version1 > version2, return 1.
return 0.
are n bulbs that are initially off. you first turn on all the bulbs, then you turn off every second bulb.
the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). for the ith round, you toggle every i bulb. for the nth round, you only toggle the last bulb.
the number of bulbs that are on after n rounds.
letter value of a letter is its position in the alphabet starting from 0 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.).
numerical value of some string of lowercase english letters s is the concatenation of the letter values of each letter in s, which is then converted into an integer.
example, if s = "acb", we concatenate each letter's letter value, resulting in "021". after converting it, we get 21.
are given three strings firstword, secondword, and targetword, each consisting of lowercase english letters 'a' through 'j' inclusive.
true if the summation of the numerical values of firstword and secondword equals the numerical value of targetword, or false otherwise.
an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list.
interval [a, b) is covered by the interval [c, d) if and only if c <= a and b <= d.
the number of remaining intervals.
an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. you may return the answer in any order.
an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. since the answer can be very large, return it modulo 1337.
are given the head of a linked list with n nodes.
each node in the list, find the value of the next greater node. that is, for each node, find the value of the first node that is next to it and has a strictly larger value than it.
an integer array answer where answer[i] is the value of the next greater node of the ith node (1-indexed). if the ith node does not have a next greater node, set answer[i] = 0.
an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
must solve this problem without using the library's sort function.
are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.
the maximum profit you can achieve. you may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.
you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
are given a 0-indexed 2d matrix grid of size m x n, where (r, c) represents:
land cell if grid[r][c] = 0, or
water cell containing grid[r][c] fish, if grid[r][c] > 0.
fisher can start at any water cell (r, c) and can do the following operations any number of times:
all the fish at cell (r, c), or
to any adjacent water cell.
the maximum number of fish the fisher can catch if he chooses his starting cell optimally, or 0 if no water cell exists.
adjacent cell of the cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) or (r - 1, c) if it exists.
a date string in the form day month year, where:
is in the set {"1st", "2nd", "3rd", "4th", ..., "30th", "31st"}.
is in the set {"jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"}.
is in the range [1900, 2100].
the date string to the format yyyy-mm-dd, where:
denotes the 4 digit year.
denotes the 2 digit month.
denotes the 2 digit day.
a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.
the strings s1 and s2 of size n and the string evil, return the number of good strings.
good string has size n, it is alphabetically greater than or equal to s1, it is alphabetically smaller than or equal to s2, and it does not contain the string evil as a substring. since the answer can be a huge number, return this modulo 109 + 7.
are given a string s consisting only of uppercase english letters.
can apply some operations to this string where, in one operation, you can remove any occurrence of one of the substrings "ab" or "cd" from s.
the minimum possible length of the resulting string that you can obtain.
that the string concatenates after removing the substring and could produce new "ab" or "cd" substrings.
are asked to cut off all the trees in a forest for a golf event. the forest is represented as an m x n matrix. in this matrix:
means the cell cannot be walked through.
represents an empty cell that can be walked through.
number greater than 1 represents a tree in a cell that can be walked through, and this number is the tree's height.
one step, you can walk in any of the four directions: north, east, south, and west. if you are standing in a cell with a tree, you can choose whether to cut it off.
must cut off the trees in order from shortest to tallest. when you cut off a tree, the value at its cell becomes 1 (an empty cell).
from the point (0, 0), return the minimum steps you need to walk to cut off all the trees. if you cannot cut off all the trees, return -1.
the input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.
are given an array nums consisting of non-negative integers. you are also given a queries array, where queries[i] = [xi, mi].
answer to the ith query is the maximum bitwise xor value of xi and any element of nums that does not exceed mi. in other words, the answer is max(nums[j] xor xi) for all j such that nums[j] <= mi. if all elements in nums are larger than mi, then the answer is -1.
an integer array answer where answer.length == queries.length and answer[i] is the answer to the ith query.
are given two sorted arrays of distinct integers nums1 and nums2.
valid path is defined as follows:
array nums1 or nums2 to traverse (from index-0).
the current array from left to right.
you are reading any value that is present in nums1 and nums2 you are allowed to change your path to the other array. (only one repeated value is considered in the valid path).
score is defined as the sum of uniques values in a valid path.
the maximum score you can obtain of all possible valid paths. since the answer may be too large, return it modulo 109 + 7.
an integer array nums (0-indexed) and two integers target and start, find an index i such that nums[i] == target and abs(i - start) is minimized. note that abs(x) is the absolute value of x.
abs(i - start).
is guaranteed that target exists in nums.
the heads of two singly linked-lists heada and headb, return the node at which the two lists intersect. if the two linked lists have no intersection at all, return null.
example, the following two linked lists begin to intersect at node c1:
test cases are generated such that there are no cycles anywhere in the entire linked structure.
that the linked lists must retain their original structure after the function returns.
judge:
inputs to the judge are given as follows (your program is not given these inputs):
- the value of the node where the intersection occurs. this is 0 if there is no intersected node.
- the first linked list.
- the second linked list.
- the number of nodes to skip ahead in lista (starting from the head) to get to the intersected node.
- the number of nodes to skip ahead in listb (starting from the head) to get to the intersected node.
judge will then create the linked structure based on these inputs and pass the two heads, heada and headb to your program. if you correctly return the intersected node, then your solution will be accepted.
an integer array arr and an integer k, modify the array by repeating it k times.
example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].
the maximum sub-array sum in the modified array. note that the length of the sub-array can be 0 and its sum in that case is 0.
the answer can be very large, return the answer modulo 109 + 7.
are given a 0-indexed array nums that consists of n distinct positive integers. apply m operations to this array, where in the ith operation you replace the number operations[i][0] with operations[i][1].
is guaranteed that in the ith operation:
exists in nums.
does not exist in nums.
the array obtained after applying all the operations.
an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.
are given an integer array nums. two players are playing a game with this array: player 1 and player 2.
1 and player 2 take turns, with player 1 starting first. both players start the game with a score of 0. at each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. the player adds the chosen number to their score. the game ends when there are no more elements in the array.
true if player 1 can win the game. if the scores of both players are equal, then player 1 is still the winner, and you should also return true. you may assume that both players are playing optimally.
are given an integer array arr. sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.
the array after sorting it.
schema
accounts

column name | type |

account_id | int |
income | int |

is the primary key for this table.
row contains information about the monthly income for one bank account.
an sql query to report the number of bank accounts of each salary category. the salary categories are:
salary": all the salaries strictly less than $20000.
salary": all the salaries in the inclusive range [$20000, $50000].
salary": all the salaries strictly greater than $50000.
result table must contain all three categories. if there are no accounts in a category, then report 0.
the result table in any order.
query result format is in the following example.
a first in first out (fifo) queue using only two stacks. the implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).
the myqueue class:
push(int x) pushes element x to the back of the queue.
pop() removes the element from the front of the queue and returns it.
peek() returns the element at the front of the queue.
empty() returns true if the queue is empty, false otherwise.

must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.
on your language, the stack may not be supported natively. you may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.
want to schedule a list of jobs in d days. jobs are dependent (i.e to work on the ith job, you have to finish all the jobs j where 0 <= j < i).
have to finish at least one task every day. the difficulty of a job schedule is the sum of difficulties of each day of the d days. the difficulty of a day is the maximum difficulty of a job done on that day.
are given an integer array jobdifficulty and an integer d. the difficulty of the ith job is jobdifficulty[i].
the minimum difficulty of a job schedule. if you cannot find a schedule for the jobs return -1.
wrote down many positive integers in a string called num. however, you realized that you forgot to add commas to seperate the different numbers. you remember that the list of integers was non-decreasing and that no integer had leading zeros.
the number of possible lists of integers that you could have written down to get the string num. since the answer may be large, return it modulo 109 + 7.
an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
may assume that each input would have exactly one solution, and you may not use the same element twice.
can return the answer in any order.
are given an array target that consists of distinct integers and another integer array arr that can have duplicates.
one operation, you can insert any integer at any position in arr. for example, if arr = [1,4,1,2], you can add 3 in the middle and make it [1,4,3,1,2]. note that you can insert the integer at the very beginning or end of the array.
the minimum number of operations needed to make target a subsequence of arr.
subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. for example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.
an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:
matches any single character.
matches zero or more of the preceding element.
matching should cover the entire input string (not partial).
the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).
are given a string, message, and a positive integer, limit.
must split message into one or more parts based on limit. each resulting part should have the suffix "<a/b>", where "b" is to be replaced with the total number of parts and "a" is to be replaced with the index of the part, starting from 1 and going up to b. additionally, the length of each resulting part (including its suffix) should be equal to limit, except for the last part whose length can be at most limit.
resulting parts should be formed such that when their suffixes are removed and they are all concatenated in order, they should be equal to message. also, the result should contain as few parts as possible.
the parts message would be split into as an array of strings. if it is impossible to split message as required, return an empty array.
a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.
letters in english are 'a', 'e', 'i', 'o', and 'u'.
a binary string s, return the minimum number of character swaps to make it alternating, or -1 if it is impossible.
string is called alternating if no two adjacent characters are equal. for example, the strings "010" and "1010" are alternating, while the string "0100" is not.
two characters may be swapped, even if they are not adjacent.
are given an m x n matrix of characters box representing a side-view of a box. each cell of the box is one of the following:
stone '#'
stationary obstacle '*'
'.'
box is rotated 90 degrees clockwise, causing some of the stones to fall due to gravity. each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. gravity does not affect the obstacles' positions, and the inertia from the box's rotation does not affect the stones' horizontal positions.
is guaranteed that each stone in box rests on an obstacle, another stone, or the bottom of the box.
an n x m matrix representing the box after the rotation described above.
schema
signups

column name | type |

user_id | int |
time_stamp | datetime |

is the primary key for this table.
row contains information about the signup time for the user with id user_id.
confirmations

column name | type |

user_id | int |
time_stamp | datetime |
action | enum |

time_stamp) is the primary key for this table.
is a foreign key with a reference to the signups table.
is an enum of the type ('confirmed', 'timeout')
row of this table indicates that the user with id user_id requested a confirmation message at time_stamp and that confirmation message was either confirmed ('confirmed') or expired without confirming ('timeout').
confirmation rate of a user is the number of 'confirmed' messages divided by the total number of requested confirmation messages. the confirmation rate of a user that did not request any confirmation messages is 0. round the confirmation rate to two decimal places.
an sql query to find the confirmation rate of each user.
the result table in any order.
query result format is in the following example.
code that enhances all arrays such that you can call the array.last() method on any array and it will return the last element. if there are no elements in the array, it should return -1.
an integer array nums of unique elements, return all possible

power set).
solution set must not contain duplicate subsets. return the solution in any order.
integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.
example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.
an integer array nums, return the number of arithmetic subarrays of nums.
subarray is a contiguous subsequence of the array.
an integer n, add a dot (".") as the thousands separator and return it in string format.
matlab, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.
are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.
reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.
the reshape operation with given parameters is possible and legal, output the new reshaped matrix; otherwise, output the original matrix.
an integer n, your task is to count how many strings of length n can be formed under the following rules:
character is a lower case vowel ('a', 'e', 'i', 'o', 'u')
vowel 'a' may only be followed by an 'e'.
vowel 'e' may only be followed by an 'a' or an 'i'.
vowel 'i' may not be followed by another 'i'.
vowel 'o' may only be followed by an 'i' or a 'u'.
vowel 'u' may only be followed by an 'a'.
the answer may be too large, return it modulo 10^9 + 7.
the root of a binary tree, return its maximum depth.
binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
are given a string text. you can swap two of the characters in the text.
the length of the longest substring with repeated characters.
are given a rectangular cake of size h x w and two arrays of integers horizontalcuts and verticalcuts where:
is the distance from the top of the rectangular cake to the ith horizontal cut and similarly, and
is the distance from the left of the rectangular cake to the jth vertical cut.
the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalcuts and verticalcuts. since the answer can be a large number, return this modulo 109 + 7.
a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.
number in candidates may only be used once in the combination.
the solution set must not contain duplicate combinations.
are given a strictly increasing integer array rungs that represents the height of rungs on a ladder. you are currently on the floor at height 0, and you want to reach the last rung.
are also given an integer dist. you can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is at most dist. you are able to insert rungs at any positive integer height if a rung is not already there.
the minimum number of rungs that must be added to the ladder in order for you to climb to the last rung.
a string path, which is an absolute path (starting with a slash '/') to a file or directory in a unix-style file system, convert it to the simplified canonical path.
a unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. for this problem, any other format of periods such as '...' are treated as file/directory names.
canonical path should have the following format:
path starts with a single slash '/'.
two directories are separated by a single slash '/'.
path does not end with a trailing '/'.
path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')
the simplified canonical path.
an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.
good subarray is a subarray where:
length is at least two, and
sum of the elements of the subarray is a multiple of k.
that:
subarray is a contiguous part of the array.
integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.
are a professional robber planning to rob houses along a street. each house has a certain amount of money stashed. all houses at this place are arranged in a circle. that means the first house is the neighbor of the last one. meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.
an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.
are given an integer array prices representing the daily price history of a stock, where prices[i] is the stock price on the ith day.
smooth descent period of a stock consists of one or more contiguous days such that the price on each day is lower than the price on the preceding day by exactly 1. the first day of the period is exempted from this rule.
the number of smooth descent periods.
sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.
an array of numbers arr, return true if the array can be rearranged to form an arithmetic progression. otherwise, return false.
is a tree (i.e., a connected, undirected graph with no cycles) structure country network consisting of n cities numbered from 0 to n - 1 and exactly n - 1 roads. the capital city is city 0. you are given a 2d integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi.
is a meeting for the representatives of each city. the meeting is in the capital city.
is a car in each city. you are given an integer seats that indicates the number of seats in each car.
representative can use the car in their city to travel or change the car and ride with another representative. the cost of traveling between two cities is one liter of fuel.
the minimum number of liters of fuel to reach the capital city.
sentence is a list of words that are separated by a single space with no leading or trailing spaces.
example, "hello world", "hello", "hello world hello world" are all sentences.
consist of only uppercase and lowercase english letters. uppercase and lowercase english letters are considered different.
sentence is circular if:
last character of a word is equal to the first character of the next word.
last character of the last word is equal to the first character of the first word.
example, "leetcode exercises sound delightful", "eetcode", "leetcode eats soul" are all circular sentences. however, "leetcode is cool", "happy leetcode", "leetcode" and "i like leetcode" are not circular sentences.
a string sentence, return true if it is circular. otherwise, return false.
an array of strings strs, group the anagrams together. you can return the answer in any order.
anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
are given two string arrays words1 and words2.
string b is a subset of string a if every letter in b occurs in a including multiplicity.
example, "wrr" is a subset of "warrior" but is not a subset of "world".
string a from words1 is universal if for every string b in words2, b is a subset of a.
an array of all the universal strings in words1. you may return the answer in any order.
two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.
one step, you can delete exactly one character in either string.
a function createhelloworld. it should return a new function that always returns "hello world".
are given an array of events where events[i] = [startdayi, enddayi]. every event i starts at startdayi and ends at enddayi.
can attend an event i at any day d where starttimei <= d <= endtimei. you can only attend one event at any time d.
the maximum number of events you can attend.
are given a 0-indexed string num of length n consisting of digits.
true if for every index i in the range 0 <= i < n, the digit i occurs num[i] times in num, otherwise return false.
are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'.
would like to reformat the phone number in a certain manner. firstly, remove all spaces and dashes. then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. the final digits are then grouped as follows:
digits: a single block of length 2.
digits: a single block of length 3.
digits: two blocks of length 2 each.
blocks are then joined by dashes. notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.
the phone number after formatting.
a string s and a dictionary of strings worddict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.
that the same word in the dictionary may be reused multiple times in the segmentation.
a string s, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times. the occurrences may overlap.
any duplicated substring that has the longest possible length. if s does not have a duplicated substring, the answer is "".
are given an array of binary strings strs and two integers m and n.
the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.
set x is a subset of a set y if all elements of x are also elements of y.
are given an m x n binary matrix grid.
move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's).
row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.
the highest possible score after making any number of moves (including zero moves).
are given an array of unique integers salary where salary[i] is the salary of the ith employee.
the average salary of employees excluding the minimum and maximum salary. answers within 10-5 of the actual answer will be accepted.
have the task of delivering some boxes from storage to their ports using only one ship. however, this ship has a limit on the number of boxes and the total weight that it can carry.
are given an array boxes, where boxes[i] = [portsi, weighti], and three integers portscount, maxboxes, and maxweight.
is the port where you need to deliver the ith box and weightsi is the weight of the ith box.
is the number of ports.
and maxweight are the respective box and weight limits of the ship.
boxes need to be delivered in the order they are given. the ship will follow these steps:
ship will take some number of boxes from the boxes queue, not violating the maxboxes and maxweight constraints.
each loaded box in order, the ship will make a trip to the port the box needs to be delivered to and deliver it. if the ship is already at the correct port, no trip is needed, and the box can immediately be delivered.
ship then makes a return trip to storage to take more boxes from the queue.
ship must end at storage after all the boxes have been delivered.
the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.
a function fn and a time in milliseconds t, return a debounced version of that function.
debounced function is a function whose execution is delayed by t milliseconds and whose execution is cancelled if it is called again within that window of time. the debounced function should also recieve the passed parameters.
example, let's say t = 50ms, and the function was called at 30ms, 60ms, and 100ms. the first 2 function calls would be cancelled, and the 3rd function call would be executed at 150ms. if instead t = 35ms, the 1st call would be cancelled, the 2nd would be executed at 95ms, and the 3rd would be executed at 135ms.
above diagram shows how debounce will transform events. each rectangle represents 100ms and the debounce time is 400ms. each color represents a different set of inputs.
solve it without using lodash's _.debounce() function.
are given an array of points in the x-y plane points where points[i] = [xi, yi].
the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes. if there is not any such rectangle, return 0.
square triple (a,b,c) is a triple where a, b, and c are integers and a2 + b2 = c2.
an integer n, return the number of square triples such that 1 <= a, b, c <= n.
four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise.
allowed operation on some point (x, y) is to convert it to either (x, x + y) or (x + y, y).
schema
employees

column name | type |

employee_id | int |
name | varchar |

is the primary key for this table.
row of this table indicates the name of the employee whose id is employee_id.
salaries

column name | type |

employee_id | int |
salary | int |

is the primary key for this table.
row of this table indicates the salary of the employee whose id is employee_id.
an sql query to report the ids of all the employees with missing information. the information of an employee is missing if:
employee's name is missing, or
employee's salary is missing.
the result table ordered by employee_id in ascending order.
query result format is in the following example.
are given a string of length 5 called time, representing the current time on a digital clock in the format "hh:mm". the earliest possible time is "00:00" and the latest possible time is "23:59".
the string time, the digits represented by the ? symbol are unknown, and must be replaced with a digit from 0 to 9.
an integer answer, the number of valid clock times that can be created by replacing every ? with a digit from 0 to 9.
die simulator generates a random number from 1 to 6 for each roll. you introduced a constraint to the generator such that it cannot roll the number i more than rollmax[i] (1-indexed) consecutive times.
an array of integers rollmax and an integer n, return the number of distinct sequences that can be obtained with exact n rolls. since the answer may be too large, return it modulo 109 + 7.
sequences are considered different if at least one element differs from each other.
maximum tree is a tree where every node has a value greater than any other value in its subtree.
are given the root of a maximum binary tree and an integer val.
as in the previous problem, the given tree was constructed from a list a (root = construct(a)) recursively with the following construct(a) routine:
a is empty, return null.
let a[i] be the largest element of a. create a root node with the value a[i].
left child of root will be construct([a[0], a[1], ..., a[i - 1]]).
right child of root will be construct([a[i + 1], a[i + 2], ..., a[a.length - 1]]).
root.
that we were not given a directly, only a root node root = construct(a).
b is a copy of a with the value val appended to it. it is guaranteed that b has unique values.
construct(b).
are given an m x n matrix grid consisting of positive integers.
the following operation until grid becomes empty:
the element with the greatest value from each row. if multiple such elements exist, delete any of them.
the maximum of deleted elements to the answer.
that the number of columns decreases by one after each operation.
the answer after performing the operations described above.
are given a 0-indexed array of strings words and a 2d array of integers queries.
query queries[i] = [li, ri] asks us to find the number of strings present in the range li to ri (both inclusive) of words that start and end with a vowel.
an array ans of size queries.length, where ans[i] is the answer to the ith query.
that the vowel letters are 'a', 'e', 'i', 'o', and 'u'.
are given the root of a binary tree where each node has a value 0 or 1. each root-to-leaf path represents a binary number starting with the most significant bit.
example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13.
all leaves in the tree, consider the numbers represented by the path from the root to that leaf. return the sum of these numbers.
test cases are generated so that the answer fits in a 32-bits integer.
are given a 2d integer grid of size m x n and an integer x. in one operation, you can add x to or subtract x from any element in the grid.
uni-value grid is a grid where all the elements of it are equal.
the minimum number of operations to make the grid uni-value. if it is not possible, return -1.
the head of a linked list and an integer val, remove all the nodes of the linked list that has node.val == val, and return the new head.
two arrays nums1 and nums2.
the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length.
subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, [2,3,5] is a subsequence of [1,2,3,4,5] while [1,5,3] is not).
a m * n matrix of ones and zeros, return how many square submatrices have all ones.
are given a 0-indexed integer array nums of length n.
can perform the following operation as many times as you want:
an index i that you havenât picked before, and pick a prime p strictly less than nums[i], then subtract p from nums[i].
true if you can make nums a strictly increasing array using the above operation and false otherwise.
strictly increasing array is an array whose each element is strictly greater than its preceding element.
an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.
we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])
and bob continue their games with piles of stones. there are a number of piles arranged in a row, and each pile has a positive integer number of stones piles[i]. the objective of the game is to end with the most stones.
and bob take turns, with alice starting first. initially, m = 1.
each player's turn, that player can take all the stones in the first x remaining piles, where 1 <= x <= 2m. then, we set m = max(m, x).
game continues until all the stones have been taken.
alice and bob play optimally, return the maximum number of stones alice can get.
are given two jugs with capacities jug1capacity and jug2capacity liters. there is an infinite amount of water supply available. determine whether it is possible to measure exactly targetcapacity liters using these two jugs.
targetcapacity liters of water are measurable, you must have targetcapacity liters of water contained within one or both buckets by the end.
allowed:
any of the jugs with water.
any of the jugs.
water from one jug into another till the other jug is completely full, or the first jug itself is empty.
are given an array arr of positive integers. you are also given the array queries where queries[i] = [lefti, righti].
each query i compute the xor of elements from lefti to righti (that is, arr[lefti] xor arr[lefti + 1] xor ... xor arr[righti] ).
an array answer where answer[i] is the answer to the ith query.
k x k magic square is a k x k grid filled with integers such that every row sum, every column sum, and both diagonal sums are all equal. the integers in the magic square do not have to be distinct. every 1 x 1 grid is trivially a magic square.
an m x n integer grid, return the size (i.e., the side length k) of the largest magic square that can be found within this grid.
are given two integer arrays nums1 and nums2 both of the same length. the advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i].
any permutation of nums1 that maximizes its advantage with respect to nums2.
an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.
subarray of an array is a consecutive sequence of zero or more values taken out of that array.
the maximum length of a subarray with positive product.
an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.
an integer array nums with possible duplicates, randomly output the index of a given target number. you can assume that the given target number must exist in the array.
the solution class:
nums) initializes the object with the array nums.
pick(int target) picks a random index i from nums where nums[i] == target. if there are multiple valid i's, then each index should have an equal probability of returning.
schema
world

column name | type |

name | varchar |
continent | varchar |
area | int |
population | int |
gdp | bigint |

is the primary key column for this table.
row of this table gives information about the name of a country, the continent to which it belongs, its area, the population, and its gdp value.
country is big if:
has an area of at least three million (i.e., 3000000 km2), or
has a population of at least twenty-five million (i.e., 25000000).
an sql query to report the name, population, and area of the big countries.
the result table in any order.
query result format is in the following example.
are given an array points representing integer coordinates of some points on a 2d-plane, where points[i] = [xi, yi].
cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.
the minimum cost to make all points connected. all points are connected if there is exactly one simple path between any two points.
are given an integer array nums of length n.
arrk to be an array obtained by rotating nums by k positions clock-wise. we define the rotation function f on nums as follow:
= 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].
the maximum value of f(0), f(1), ..., f(n-1).
test cases are generated so that the answer fits in a 32-bit integer.
two strings s and p, return an array of all the start indices of p's anagrams in s. you may return the answer in any order.
anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
are n friends that are playing a game. the friends are sitting in a circle and are numbered from 1 to n in clockwise order. more formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.
rules of the game are as follows:
friend receives the ball.
that, 1st friend passes it to the friend who is k steps away from them in the clockwise direction.
that, the friend who receives the ball should pass it to the friend who is 2 * k steps away from them in the clockwise direction.
that, the friend who receives the ball should pass it to the friend who is 3 * k steps away from them in the clockwise direction, and so on and so forth.
other words, on the ith turn, the friend holding the ball should pass it to the friend who is i * k steps away from them in the clockwise direction.
game is finished when some friend receives the ball for the second time.
losers of the game are friends who did not receive the ball in the entire game.
the number of friends, n, and an integer k, return the array answer, which contains the losers of the game in the ascending order.
are given an integer n and an integer start.
an array nums where nums[i] = start + 2 * i (0-indexed) and n == nums.length.
the bitwise xor of all elements of nums.
the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)
that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)
the answer may be large, return the answer modulo 10^9 + 7.
are given k identical eggs and you have access to a building with n floors labeled from 1 to n.
know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.
move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). if the egg breaks, you can no longer use it. however, if the egg does not break, you may reuse it in future moves.
the minimum number of moves that you need to determine with certainty what the value of f is.
is an undirected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.
are given a 2d integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. you are also given an integer array restricted which represents restricted nodes.
the maximum number of nodes you can reach from node 0 without visiting a restricted node.
that node 0 will not be a restricted node.
are given an n x n binary matrix grid. you are allowed to change at most one 0 to be 1.
the size of the largest island in grid after applying this operation.
island is a 4-directionally connected group of 1s.
are given an integer num. you can swap two digits at most once to get the maximum valued number.
the maximum valued number you can get.
four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:
<= i, j, k, l < n
+ nums2[j] + nums3[k] + nums4[l] == 0
are n tasks assigned to you. the task times are represented as an integer array tasks of length n, where the ith task takes tasks[i] hours to finish. a work session is when you work for at most sessiontime consecutive hours and then take a break.
should finish the given tasks in a way that satisfies the following conditions:
you start a task in a work session, you must complete it in the same work session.
can start a new task immediately after finishing the previous one.
may complete the tasks in any order.
tasks and sessiontime, return the minimum number of work sessions needed to finish all the tasks following the conditions above.
tests are generated such that sessiontime is greater than or equal to the maximum element in tasks[i].
are given an m x n matrix m initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means m[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.
and return the number of maximum integers in the matrix after performing all the operations.
a string s, rearrange the characters of s so that any two adjacent characters are not the same.
any possible rearrangement of s or return "" if not possible.
are given an integer hoursbefore, the number of hours you have to travel to your meeting. to arrive at your meeting, you have to travel through n roads. the road lengths are given as an integer array dist of length n, where dist[i] describes the length of the ith road in kilometers. in addition, you are given an integer speed, which is the speed (in km/h) you will travel at.
you travel road i, you must rest and wait for the next integer hour before you can begin traveling on the next road. note that you do not have to rest after traveling the last road because you are already at the meeting.
example, if traveling a road takes 1.4 hours, you must wait until the 2 hour mark before traveling the next road. if traveling a road takes exactly 2 hours, you do not need to wait.
you are allowed to skip some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. note that this means you may finish traveling future roads at different hour marks.
example, suppose traveling the first road takes 1.4 hours and traveling the second road takes 0.6 hours. skipping the rest after the first road will mean you finish traveling the second road right at the 2 hour mark, letting you start traveling the third road immediately.
the minimum number of skips required to arrive at the meeting on time, or -1 if it is impossible.
a tic-tac-toe board as a string array board, return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.
board is a 3 x 3 array that consists of characters ' ', 'x', and 'o'. the ' ' character represents an empty square.
are the rules of tic-tac-toe:
take turns placing characters into empty squares ' '.
first player always places 'x' characters, while the second player always places 'o' characters.
and 'o' characters are always placed into empty squares, never filled ones.
game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
game also ends if all squares are non-empty.
more moves can be played if the game is over.
are given an array of n strings strs, all of the same length.
may choose any deletion indices, and we delete all the characters in those indices for each string.
example, if we have strs = ["abcdef","uvwxyz"] and deletion indices {0, 2, 3}, then the final array after deletions is ["bef", "vyz"].
we chose a set of deletion indices answer such that after deletions, the final array has every string (row) in lexicographic order. (i.e., (strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1]), and (strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1]), and so on). return the minimum possible value of answer.length.
are given a string text. you should split it to k substrings (subtext1, subtext2, ..., subtextk) such that:
is a non-empty string.
concatenation of all the substrings is equal to text (i.e., subtext1 + subtext2 + ... + subtextk == text).
== subtextk - i + 1 for all valid values of i (i.e., 1 <= i <= k).
the largest possible value of k.
the array restaurants where restaurants[i] = [idi, ratingi, veganfriendlyi, pricei, distancei]. you have to filter the restaurants using three filters.
veganfriendly filter will be either true (meaning you should only include restaurants with veganfriendlyi set to true) or false (meaning you can include any restaurant). in addition, you have the filters maxprice and maxdistance which are the maximum value for price and distance of restaurants you should consider respectively.
the array of restaurant ids after filtering, ordered by rating from highest to lowest. for restaurants with the same rating, order them by id from highest to lowest. for simplicity veganfriendlyi and veganfriendly take value 1 when it is true, and 0 when it is false.
build a table of n rows (1-indexed). we start by writing 0 in the 1st row. now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.
example, for n = 3, the 1st row is 0, the 2nd row is 01, and the 3rd row is 0110.
two integer n and k, return the kth (1-indexed) symbol in the nth row of a table of n rows.
are given an integer array nums that is sorted in non-decreasing order.
if it is possible to split nums into one or more subsequences such that both of the following conditions are true:
subsequence is a consecutive increasing sequence (i.e. each integer is exactly one more than the previous integer).
subsequences have a length of 3 or more.
true if you can split nums according to the above conditions, or false otherwise.
subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).
the root of a binary tree, return the inorder traversal of its nodes' values.
is a broken calculator that has the integer startvalue on its display initially. in one operation, you can:
the number on display by 2, or
1 from the number on display.
two integers startvalue and target, return the minimum number of operations needed to display target on the calculator.
are several squares being dropped onto the x-axis of a 2d plane.
are given a 2d integer array positions where positions[i] = [lefti, sidelengthi] represents the ith square with a side length of sidelengthi that is dropped with its left edge aligned with x-coordinate lefti.
square is dropped one at a time from a height above any landed squares. it then falls downward (negative y direction) until it either lands on the top side of another square or on the x-axis. a square brushing the left/right side of another square does not count as landing on it. once it lands, it freezes in place and cannot be moved.
each square is dropped, you must record the height of the current tallest stack of squares.
an integer array ans where ans[i] represents the height described above after dropping the ith square.
schema
queries

column name | type |

query_name | varchar |
result | varchar |
position | int |
rating | int |

is no primary key for this table, it may have duplicate rows.
table contains information collected from some queries on a database.
position column has a value from 1 to 500.
rating column has a value from 1 to 5. query with rating less than 3 is a poor query.
define query quality as:
average of the ratio between query rating and its position.
also define poor query percentage as:
percentage of all queries with rating less than 3.
an sql query to find each query_name, the quality and poor_query_percentage.
quality and poor_query_percentage should be rounded to 2 decimal places.
the result table in any order.
query result format is in the following example.
company has n employees with a unique id for each employee from 0 to n - 1. the head of the company is the one with headid.
employee has one direct manager given in the manager array where manager[i] is the direct manager of the i-th employee, manager[headid] = -1. also, it is guaranteed that the subordination relationships have a tree structure.
head of the company wants to inform all the company employees of an urgent piece of news. he will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.
i-th employee needs informtime[i] minutes to inform all of his direct subordinates (i.e., after informtime[i] minutes, all his direct subordinates can start spreading the news).
the number of minutes needed to inform all the employees about the urgent news.
a string s, you can transform every letter individually to be lowercase or uppercase to create another string.
a list of all possible strings we could create. return the output in any order.
s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2.
two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar.
the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).
are given the head of a linked list.
every node which has a node with a strictly greater value anywhere to the right side of it.
the head of the modified linked list.
are given an m x n binary grid grid where 1 represents land and 0 represents water. an island is a maximal 4-directionally (horizontal or vertical) connected group of 1's.
grid is said to be connected if we have exactly one island, otherwise is said disconnected.
one day, we are allowed to change any single land cell (1) into a water cell (0).
the minimum number of days to disconnect the grid.
is an 8 x 8 chessboard containing n pieces (rooks, queens, or bishops). you are given a string array pieces of length n, where pieces[i] describes the type (rook, queen, or bishop) of the ith piece. in addition, you are given a 2d integer array positions also of length n, where positions[i] = [ri, ci] indicates that the ith piece is currently at the 1-based coordinate (ri, ci) on the chessboard.
making a move for a piece, you choose a destination square that the piece will travel toward and stop on.
rook can only travel horizontally or vertically from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), or (r, c-1).
queen can only travel horizontally, vertically, or diagonally from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), (r, c-1), (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1).
bishop can only travel diagonally from (r, c) to the direction of (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1).
must make a move for every piece on the board simultaneously. a move combination consists of all the moves performed on all the given pieces. every second, each piece will instantaneously travel one square towards their destination if they are not already at it. all pieces start traveling at the 0th second. a move combination is invalid if, at a given time, two or more pieces occupy the same square.
the number of valid move combinations.

two pieces will start in the same square.
may choose the square a piece is already on as its destination.
two pieces are directly adjacent to each other, it is valid for them to move past each other and swap positions in one second.
have a 1-indexed binary string of length n where all the bits are 0 initially. we will flip all the bits of this binary string (i.e., change them from 0 to 1) one by one. you are given a 1-indexed integer array flips where flips[i] indicates that the bit at index i will be flipped in the ith step.
binary string is prefix-aligned if, after the ith step, all the bits in the inclusive range [1, i] are ones and all the other bits are zeros.
the number of times the binary string is prefix-aligned during the flipping process.
are given two lists of closed intervals, firstlist and secondlist, where firstlist[i] = [starti, endi] and secondlist[j] = [startj, endj]. each list of intervals is pairwise disjoint and in sorted order.
the intersection of these two interval lists.
closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.
intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. for example, the intersection of [1, 3] and [2, 4] is [2, 3].
are given an integer array nums of length n which represents a permutation of all the integers in the range [0, n - 1].
number of global inversions is the number of the different pairs (i, j) where:
<= i < j < n
> nums[j]
number of local inversions is the number of indices i where:
<= i < n - 1
> nums[i + 1]
true if the number of global inversions is equal to the number of local inversions.
is a safe protected by a password. the password is a sequence of n digits where each digit can be in the range [0, k - 1].
safe has a peculiar way of checking the password. when you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit.
example, the correct password is "345" and you enter in "012345":
typing 0, the most recent 3 digits is "0", which is incorrect.
typing 1, the most recent 3 digits is "01", which is incorrect.
typing 2, the most recent 3 digits is "012", which is incorrect.
typing 3, the most recent 3 digits is "123", which is incorrect.
typing 4, the most recent 3 digits is "234", which is incorrect.
typing 5, the most recent 3 digits is "345", which is correct and the safe unlocks.
any string of minimum length that will unlock the safe at some point of entering it.
are given two strings order and s. all the characters of order are unique and were sorted in some custom order previously.
the characters of s so that they match the order that order was sorted. more specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.
any permutation of s that satisfies this property.
are given a 0-indexed m x n binary matrix land where a 0 represents a hectare of forested land and a 1 represents a hectare of farmland.
keep the land organized, there are designated rectangular areas of hectares that consist entirely of farmland. these rectangular areas are called groups. no two groups are adjacent, meaning farmland in one group is not four-directionally adjacent to another farmland in a different group.
can be represented by a coordinate system where the top left corner of land is (0, 0) and the bottom right corner of land is (m-1, n-1). find the coordinates of the top left and bottom right corner of each group of farmland. a group of farmland with a top left corner at (r1, c1) and a bottom right corner at (r2, c2) is represented by the 4-length array [r1, c1, r2, c2].
a 2d array containing the 4-length arrays described above for each group of farmland in land. if there are no groups of farmland, return an empty array. you may return the answer in any order.
have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps.
the browserhistory class:
homepage) initializes the object with the homepage of the browser.
visit(string url) visits url from the current page. it clears up all the forward history.
back(int steps) move steps back in history. if you can only return x steps in the history and steps > x, you will return only x steps. return the current url after moving back in history at most steps.
forward(int steps) move steps forward in history. if you can only forward x steps in the history and steps > x, you will forward only x steps. return the current url after forwarding in history at most steps.








browserhistory = new browserhistory("leetcode.com");
// you are in "leetcode.com". visit "google.com"
// you are in "google.com". visit "facebook.com"
// you are in "facebook.com". visit "youtube.com"
// you are in "youtube.com", move back to "facebook.com" return "facebook.com"
// you are in "facebook.com", move back to "google.com" return "google.com"
// you are in "google.com", move forward to "facebook.com" return "facebook.com"
// you are in "facebook.com". visit "linkedin.com"
// you are in "linkedin.com", you cannot move forward any steps.
// you are in "linkedin.com", move back two steps to "facebook.com" then to "google.com". return "google.com"
// you are in "google.com", you can move back only one step to "leetcode.com". return "leetcode.com"

<= homepage.length <= 20
<= url.length <= 20
<= steps <= 100
and url consist of '.' or lower case english letters.
most 5000 calls will be made to visit, back, and forward.
have two fruit baskets containing n fruits each. you are given two 0-indexed integer arrays basket1 and basket2 representing the cost of fruit in each basket. you want to make both baskets equal. to do so, you can use the following operation as many times as you want:
two indices i and j, and swap the ith fruit of basket1 with the jth fruit of basket2.
cost of the swap is min(basket1[i],basket2[j]).
baskets are considered equal if sorting them according to the fruit cost makes them exactly the same baskets.
the minimum cost to make both the baskets equal or -1 if impossible.
are given a positive integer num consisting of exactly four digits. split num into two new integers new1 and new2 by using the digits found in num. leading zeros are allowed in new1 and new2, and all the digits found in num must be used.
example, given num = 2932, you have the following digits: two 2's, one 9 and one 3. some of the possible pairs [new1, new2] are [22, 93], [23, 92], [223, 9] and [2, 329].
the minimum possible sum of new1 and new2.
are playing a game with integers. you start with the integer 1 and you want to reach the integer target.
one move, you can either:
the current integer by one (i.e., x = x + 1).
the current integer (i.e., x = 2 * x).
can use the increment operation any number of times, however, you can only use the double operation at most maxdoubles times.
the two integers target and maxdoubles, return the minimum number of moves needed to reach target starting with 1.
are given an integer array heights representing the heights of buildings, some bricks, and some ladders.
start your journey from building 0 and move to the next building by possibly using bricks or ladders.
moving from building i to building i+1 (0-indexed),
the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.
the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.
the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.
are given a 2d integer array ranges where ranges[i] = [starti, endi] denotes that all integers between starti and endi (both inclusive) are contained in the ith range.
are to split ranges into two (possibly empty) groups such that:
range belongs to exactly one group.
two overlapping ranges must belong to the same group.
ranges are said to be overlapping if there exists at least one integer that is present in both ranges.
example, [1, 3] and [2, 5] are overlapping because 2 and 3 occur in both ranges.
the total number of ways to split ranges into two groups. since the answer may be very large, return it modulo 109 + 7.
a directed acyclic graph (dag) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.
graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).
are given an integer array rolls of length n and an integer k. you roll a k sided dice numbered from 1 to k, n times, where the result of the ith roll is rolls[i].
the length of the shortest sequence of rolls that cannot be taken from rolls.
sequence of rolls of length len is the result of rolling a k sided dice len times.
that the sequence taken does not have to be consecutive as long as it is in order.
are given a 0-indexed 2d integer array grid of size m x n that represents a map of the items in a shop. the integers in the grid represent the following:
represents a wall that you cannot pass through.
represents an empty cell that you can freely move to and from.
other positive integers represent the price of an item in that cell. you may also freely move to and from these item cells.
takes 1 step to travel between adjacent grid cells.
are also given integer arrays pricing and start where pricing = [low, high] and start = [row, col] indicates that you start at the position (row, col) and are interested only in items with a price in the range of [low, high] (inclusive). you are further given an integer k.
are interested in the positions of the k highest-ranked items whose prices are within the given price range. the rank is determined by the first of these criteria that is different:
defined as the length of the shortest path from the start (shorter distance has a higher rank).
(lower price has a higher rank, but it must be in the price range).
row number (smaller row number has a higher rank).
column number (smaller column number has a higher rank).
the k highest-ranked items within the price range sorted by their rank (highest to lowest). if there are fewer than k reachable items within the price range, return all of them.
a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:
% answer[j] == 0, or
% answer[i] == 0
there are multiple solutions, return any of them.
an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.
subarray is a contiguous non-empty sequence of elements within an array.
are given an integer total indicating the amount of money you have. you are also given two integers cost1 and cost2 indicating the price of a pen and pencil respectively. you can spend part or all of your money to buy multiple quantities (or none) of each kind of writing utensil.
the number of distinct ways you can buy some number of pens and pencils.
a function fn and a time in milliseconds t, return a throttled version of that function.
throttled function is first called without delay and then, for a time interval of t milliseconds, can't be executed but should store the latest function arguments provided to call fn with them after the end of the delay.
instance, t = 50ms, and the function was called at 30ms, 40ms, and 60ms. the first function call would block calling functions for the following t milliseconds. the second function call would save arguments, and the third call arguments should overwrite currently stored arguments from the second call because the second and third calls are called before 80ms. once the delay has passed, the throttled function should be called with the latest arguments provided during the delay period, and it should also create another delay period of 80ms + t.
above diagram shows how throttle will transform events. each rectangle represents 100ms and the throttle time is 400ms. each color represents a different set of inputs.
are given a string s consisting only of characters 'a' and 'b'.
can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.
the minimum number of deletions needed to make s balanced.
is an integer array nums that consists of n unique elements, but you have forgotten it. however, you do remember every pair of adjacent elements in nums.
are given a 2d integer array adjacentpairs of size n - 1 where each adjacentpairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums.
is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentpairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. the pairs can appear in any order.
the original array nums. if there are multiple solutions, return any of them.
an integer n, return the least number of perfect square numbers that sum to n.
perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. for example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.
are given a string s and an integer repeatlimit. construct a new string repeatlimitedstring using the characters of s such that no letter appears more than repeatlimit times in a row. you do not have to use all characters from s.
the lexicographically largest repeatlimitedstring possible.
string a is lexicographically larger than a string b if in the first position where a and b differ, string a has a letter that appears later in the alphabet than the corresponding letter in b. if the first min(a.length, b.length) characters do not differ, then the longer string is the lexicographically larger one.
are given an integer array pref of size n. find and return the array arr of size n that satisfies:
= arr[0] ^ arr[1] ^ ... ^ arr[i].
that ^ denotes the bitwise-xor operation.
can be proven that the answer is unique.
an alien language, surprisingly, they also use english lowercase letters, but possibly in a different order. the order of the alphabet is some permutation of lowercase letters.
a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographically in this alien language.
are given a string expression representing a lisp-like expression to return the integer value of.
syntax for these expressions is given as follows.
expression is either an integer, let expression, add expression, mult expression, or an assigned variable. expressions always evaluate to a single integer.
integer could be positive or negative.)
let expression takes the form "(let v1 e1 v2 e2 ... vn en expr)", where let is always the string "let", then there are one or more pairs of alternating variables and expressions, meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; and then the value of this let expression is the value of the expression expr.
add expression takes the form "(add e1 e2)" where add is always the string "add", there are always two expressions e1, e2 and the result is the addition of the evaluation of e1 and the evaluation of e2.
mult expression takes the form "(mult e1 e2)" where mult is always the string "mult", there are always two expressions e1, e2 and the result is the multiplication of the evaluation of e1 and the evaluation of e2.
this question, we will use a smaller subset of variable names. a variable starts with a lowercase letter, then zero or more lowercase letters or digits. additionally, for your convenience, the names "add", "let", and "mult" are protected and will never be used as variable names.
there is the concept of scope. when an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. it is guaranteed that every expression is legal. please see the examples for more details on the scope.
schema
activity

column name | type |

player_id | int |
device_id | int |
event_date | date |
games_played | int |

event_date) is the primary key of this table.
table shows the activity of players of some games.
row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.
an sql query to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. in other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players.
query result format is in the following example.
are given an integer array arr.
split arr into some number of chunks (i.e., partitions), and individually sort each chunk. after concatenating them, the result should equal the sorted array.
the largest number of chunks we can make to sort the array.
the root of a binary search tree (bst) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.
the tree has more than one mode, return them in any order.
a bst is defined as follows:
left subtree of a node contains only nodes with keys less than or equal to the node's key.
right subtree of a node contains only nodes with keys greater than or equal to the node's key.
the left and right subtrees must also be binary search trees.
an n x n binary matrix grid, return the length of the shortest clear path in the matrix. if there is no clear path, return -1.
clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:
the visited cells of the path are 0.
the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
length of a clear path is the number of visited cells of this path.
is an exam room with n seats in a single row labeled from 0 to n - 1.
a student enters the room, they must sit in the seat that maximizes the distance to the closest person. if there are multiple such seats, they sit in the seat with the lowest number. if no one is in the room, then the student sits at seat number 0.
a class that simulates the mentioned exam room.
the examroom class:
n) initializes the object of the exam room with the number of the seats n.
seat() returns the label of the seat at which the next student will set.
leave(int p) indicates that the student sitting at seat p will leave the room. it is guaranteed that there will be a student sitting at seat p.
is played by two players a and b on a 3 x 3 grid. the rules of tic-tac-toe are:
take turns placing characters into empty squares ' '.
first player a always places 'x' characters, while the second player b always places 'o' characters.
and 'o' characters are always placed into empty squares, never on filled ones.
game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
game also ends if all squares are non-empty.
more moves can be played if the game is over.
a 2d integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (a or b). in case the game ends in a draw return "draw". if there are still movements to play return "pending".
can assume that moves is valid (i.e., it follows the rules of tic-tac-toe), the grid is initially empty, and a will play first.
define a function countuniquechars(s) that returns the number of unique characters on s.
example, calling countuniquechars(s) if s = "leetcode" then "l", "t", "c", "o", "d" are the unique characters since they appear only once in s, therefore countuniquechars(s) = 5.
a string s, return the sum of countuniquechars(t) where t is a substring of s. the test cases are generated such that the answer fits in a 32-bit integer.
that some substrings can be repeated so in this case you have to count the repeated ones too.
two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.
complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.
example, the integer 5 is "101" in binary and its complement is "010" which is the integer 2.
an integer n, return its complement.
are some stones in different positions on the x-axis. you are given an integer array stones, the positions of the stones.
a stone an endpoint stone if it has the smallest or largest position. in one move, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone.
particular, if the stones are at say, stones = [1,2,5], you cannot move the endpoint stone at position 5, since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone.
game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).
an integer array answer of length 2 where:
is the minimum number of moves you can play, and
is the maximum number of moves you can play.
an integer n, return a binary string representing its representation in base -2.
that the returned string should not have leading zeros unless the string is "0".
a data structure that follows the constraints of a least recently used (lru) cache.
the lrucache class:
capacity) initialize the lru cache with positive size capacity.
get(int key) return the value of the key if the key exists, otherwise return -1.
put(int key, int value) update the value of the key if the key exists. otherwise, add the key-value pair to the cache. if the number of keys exceeds the capacity from this operation, evict the least recently used key.
functions get and put must each run in o(1) average time complexity.
are given an array books where books[i] = [thicknessi, heighti] indicates the thickness and height of the ith book. you are also given an integer shelfwidth.
want to place these books in order onto bookcase shelves that have a total width shelfwidth.
choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to shelfwidth, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. we repeat this process until there are no more books to place.
that at each step of the above process, the order of the books we place is the same order as the given sequence of books.
example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.
the minimum possible height that the total bookshelf can be after placing shelves in this manner.
schema
employee

column name | type |

id | int |
name | varchar |
salary | int |
departmentid | int |

is the primary key column for this table.
is a foreign key of the id from the department table.
row of this table indicates the id, name, and salary of an employee. it also contains the id of their department.
department

column name | type |

id | int |
name | varchar |

is the primary key column for this table. it is guaranteed that department name is not null.
row of this table indicates the id of a department and its name.
an sql query to find employees who have the highest salary in each of the departments.
the result table in any order.
query result format is in the following example.
two integers n and k, return the kth lexicographically smallest integer in the range [1, n].
the array queries of positive integers between 1 and m, you have to process all queries[i] (from i=0 to i=queries.length-1) according to the following rules:
the beginning, you have the permutation p=[1,2,3,...,m].
the current i, find the position of queries[i] in the permutation p (indexing from 0) and then move this at the beginning of the permutation p. notice that the position of queries[i] in p is the result for queries[i].
an array containing the result for the given queries.
the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.
doing so, return the head of the final linked list. you may return any such answer.
that in the examples below, all sequences are serializations of listnode objects.)
1:
head = [1,2,-3,3,1]
[3,1]
the answer [1,2,1] would also be accepted.
2:
head = [1,2,3,-3,4]
[1,2,4]
3:
head = [1,2,3,-3,-2]
[1]

given linked list will contain between 1 and 1000 nodes.
node in the linked list has -1000 <= node.val <= 1000.
a string s, return the number of palindromic substrings in it.
string is a palindrome when it reads the same backward as forward.
substring is a contiguous sequence of characters within the string.
array is monotonic if it is either monotone increasing or monotone decreasing.
array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. an array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].
an integer array nums, return true if the given array is monotonic, or false otherwise.
are given two non-negative integers num1 and num2.
one operation, if num1 >= num2, you must subtract num2 from num1, otherwise subtract num1 from num2.
example, if num1 = 5 and num2 = 4, subtract num2 from num1, thus obtaining num1 = 1 and num2 = 4. however, if num1 = 4 and num2 = 5, after one operation, num1 = 4 and num2 = 1.
the number of operations required to make either num1 = 0 or num2 = 0.
are given nums, an array of positive integers of size 2 * n. you must perform n operations on this array.
the ith operation (1-indexed), you will:
two elements, x and y.
a score of i * gcd(x, y).
x and y from nums.
the maximum score you can receive after performing n operations.
function gcd(x, y) is the greatest common divisor of x and y.
an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word.
substring is a contiguous sequence of characters within a string.
are given two 0-indexed arrays, nums1 and nums2, consisting of non-negative integers. there exists another array, nums3, which contains the bitwise xor of all pairings of integers between nums1 and nums2 (every integer in nums1 is paired with every integer in nums2 exactly once).
the bitwise xor of all integers in nums3.
are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.
a pair (u, v) which consists of one element from the first array and one element from the second array.
the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.
schema
sales

column name | type |

sale_id | int |
product_id | int |
year | int |
quantity | int |
price | int |

year) is the primary key of this table.
is a foreign key to product table.
row of this table shows a sale on the product product_id in a certain year.
that the price is per unit.
product

column name | type |

product_id | int |
product_name | varchar |

is the primary key of this table.
row of this table indicates the product name of each product.
an sql query that reports the product_name, year, and price for each sale_id in the sales table.
the resulting table in any order.
query result format is in the following example.
an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.
schema
employee

column name | type |

id | int |
name | varchar |
salary | int |
departmentid | int |

is the primary key column for this table.
is a foreign key of the id from the department table.
row of this table indicates the id, name, and salary of an employee. it also contains the id of their department.
department

column name | type |

id | int |
name | varchar |

is the primary key column for this table.
row of this table indicates the id of a department and its name.
company's executives are interested in seeing who earns the most money in each of the company's departments. a high earner in a department is an employee who has a salary in the top three unique salaries for that department.
an sql query to find the employees who are high earners in each of the departments.
the result table in any order.
query result format is in the following example.
3 positives numbers a, b and c. return the minimum flips required in some bits of a and b to make ( a or b == c ). (bitwise or operation).
operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.
an integer array nums, return the sum of divisors of the integers in that array that have exactly four divisors. if there is no such integer in the array, return 0.
are given a string s of length n containing only four kinds of characters: 'q', 'w', 'e', and 'r'.
string is said to be balanced if each of its characters appears n / 4 times where n is the length of the string.
the minimum length of the substring that can be replaced with any other string of the same length to make s balanced. if s is already balanced, return 0.
define the usage of capitals in a word to be right when one of the following cases holds:
letters in this word are capitals, like "usa".
letters in this word are not capitals, like "leetcode".
the first letter in this word is capital, like "google".
a string word, return true if the usage of capitals in it is right.
are given an array of network towers towers, where towers[i] = [xi, yi, qi] denotes the ith network tower with location (xi, yi) and quality factor qi. all the coordinates are integral coordinates on the x-y plane, and the distance between the two coordinates is the euclidean distance.
are also given an integer radius where a tower is reachable if the distance is less than or equal to radius. outside that distance, the signal becomes garbled, and the tower is not reachable.
signal quality of the ith tower at a coordinate (x, y) is calculated with the formula âqi / (1 + d)â, where d is the distance between the tower and the coordinate. the network quality at a coordinate is the sum of the signal qualities from all the reachable towers.
the array [cx, cy] representing the integral coordinate (cx, cy) where the network quality is maximum. if there are multiple coordinates with the same network quality, return the lexicographically minimum non-negative coordinate.

coordinate (x1, y1) is lexicographically smaller than (x2, y2) if either:
< x2, or
== x2 and y1 < y2.
is the greatest integer less than or equal to val (the floor function).
tribonacci sequence tn is defined as follows:
= 0, t1 = 1, t2 = 1, and tn+3 = tn + tn+1 + tn+2 for n >= 0.
n, return the value of tn.
the function f(s) be the frequency of the lexicographically smallest character in a non-empty string s. for example, if s = "dcce" then f(s) = 2 because the lexicographically smallest character is 'c', which has a frequency of 2.
are given an array of strings words and another array of query strings queries. for each query queries[i], count the number of words in words such that f(queries[i]) < f(w) for each w in words.
an integer array answer, where each answer[i] is the answer to the ith query.
an object, return a valid json string of that object. you may assume the object only inludes strings, integers, arrays, objects, booleans, and null. the returned string should not include extra spaces. the order of keys should be the same as the order returned by object.keys().
solve it without using the built-in json.stringify method.
are given three positive integers: n, index, and maxsum. you want to construct an array nums (0-indexed) that satisfies the following conditions:
== n
is a positive integer where 0 <= i < n.
- nums[i+1]) <= 1 where 0 <= i < n-1.
sum of all the elements of nums does not exceed maxsum.
is maximized.
nums[index] of the constructed array.
that abs(x) equals x if x >= 0, and -x otherwise.
schema
stadium

column name | type |

id | int |
visit_date | date |
people | int |

is the primary key for this table.
row of this table contains the visit date and visit id to the stadium with the number of people during the visit.
two rows will have the same visit_date, and as the id increases, the dates increase as well.
an sql query to display the records with three or more rows with consecutive id's, and the number of people is greater than or equal to 100 for each.
the result table ordered by visit_date in ascending order.
query result format is in the following example.
are given a nested list of integers nestedlist. each element is either an integer or a list whose elements may also be integers or other lists. implement an iterator to flatten it.
the nestediterator class:
nestedlist) initializes the iterator with the nested list nestedlist.
next() returns the next integer in the nested list.
hasnext() returns true if there are still some integers in the nested list and false otherwise.
code will be tested with the following pseudocode:
iterator with nestedlist
= []
iterator.hasnext()
iterator.next() to the end of res
res
res matches the expected flattened list, then your code will be judged as correct.
an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index.
to the definition of h-index on wikipedia: the h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.
are given an n x n binary matrix grid where 1 represents land and 0 represents water.
island is a 4-directionally connected group of 1's not connected to any other 1's. there are exactly two islands in grid.
may change 0's to 1's to connect the two islands to form one island.
the smallest number of 0's you must flip to connect the two islands.
a binary tree, find the lowest common ancestor (lca) of two given nodes in the tree.
to the definition of lca on wikipedia: âthe lowest common ancestor is defined between two nodes p and q as the lowest node in t that has both p and q as descendants (where we allow a node to be a descendant of itself).â
a string s which represents an expression, evaluate this expression and return its value.
integer division should truncate toward zero.
may assume that the given expression is always valid. all intermediate results will be in the range of [-231, 231 - 1].
you are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().
are given a string s, an integer k, a letter letter, and an integer repetition.
the lexicographically smallest subsequence of s of length k that has the letter letter appear at least repetition times. the test cases are generated so that the letter appears in s at least repetition times.
subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
string a is lexicographically smaller than a string b if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.
are given the array paths, where paths[i] = [cityai, citybi] means there exists a direct path going from cityai to citybi. return the destination city, that is, the city without any path outgoing to another city.
is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.
are given an array points containing the coordinates of points on a 2d plane, sorted by the x-values, where points[i] = [xi, yi] such that xi < xj for all 1 <= i < j <= points.length. you are also given an integer k.
the maximum value of the equation yi + yj + |xi - xj| where |xi - xj| <= k and 1 <= i < j <= points.length.
is guaranteed that there exists at least one pair of points that satisfy the constraint |xi - xj| <= k.
is a computer that can run an unlimited number of tasks at the same time. you are given a 2d integer array tasks where tasks[i] = [starti, endi, durationi] indicates that the ith task should run for a total of durationi seconds (not necessarily continuous) within the inclusive time range [starti, endi].
may turn on the computer only when it needs to run a task. you can also turn it off if it is idle.
the minimum time during which the computer should be turned on to complete all tasks.
a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 < numbers.length.
the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.
tests are generated such that there is exactly one solution. you may not use the same element twice.
solution must use only constant extra space.
is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), some houses that have been painted last summer should not be painted again.
neighborhood is a maximal group of continuous houses that are painted with the same color.
example: houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods [{1}, {2,2}, {3,3}, {2}, {1,1}].
an array houses, an m x n matrix cost and an integer target where:
is the color of the house i, and 0 if the house is not painted yet.
is the cost of paint the house i with the color j + 1.
the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. if it is not possible, return -1.
want to build n new buildings in a city. the new buildings will be built in a line and are labeled from 1 to n.
there are city restrictions on the heights of the new buildings:
height of each building must be a non-negative integer.
height of the first building must be 0.
height difference between any two adjacent buildings cannot exceed 1.
there are city restrictions on the maximum height of specific buildings. these restrictions are given as a 2d integer array restrictions where restrictions[i] = [idi, maxheighti] indicates that building idi must have a height less than or equal to maxheighti.
is guaranteed that each building will appear at most once in restrictions, and building 1 will not be in restrictions.
the maximum possible height of the tallest building.
are given a string s, and an array of pairs of indices in the string pairs where pairs[i] = [a, b] indicates 2 indices(0-indexed) of the string.
can swap the characters at any pair of indices in the given pairs any number of times.
the lexicographically smallest string that s can be changed to after using the swaps.
is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. you are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c.
city's skyline is the outer contour formed by all the building when viewing the side of the city from a distance. the skyline from each cardinal direction north, east, south, and west may be different.
are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). the height of a 0-height building can also be increased. however, increasing the height of a building should not affect the city's skyline from any cardinal direction.
the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.
the randomizedset class:
initializes the randomizedset object.
insert(int val) inserts an item val into the set if not present. returns true if the item was not present, false otherwise.
remove(int val) removes an item val from the set if present. returns true if the item was present, false otherwise.
getrandom() returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). each element must have the same probability of being returned.
must implement the functions of the class such that each function works in average o(1) time complexity.
a root node reference of a bst and a key, delete the node with the given key in the bst. return the root node reference (possibly updated) of the bst.
the deletion can be divided into two stages:
for a node to remove.
the node is found, delete the node.
an integer array nums of size n, return the minimum number of moves required to make all array elements equal.
one move, you can increment n - 1 elements of the array by 1.
are given hours, a list of the number of hours worked per day for a given employee.
day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than 8.
well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.
the length of the longest well-performing interval.
we have a file system that stores both files and directories. an example of one system is represented in the following picture:
we have dir as the only directory in the root. dir contains two subdirectories, subdir1 and subdir2. subdir1 contains a file file1.ext and subdirectory subsubdir1. subdir2 contains a subdirectory subsubdir2, which contains a file file2.ext.
text form, it looks like this (with â¶ representing the tab character):

subdir1
â¶ file1.ext
â¶ subsubdir1
subdir2
â¶ subsubdir2
â¶ â¶ file2.ext
we were to write this representation in code, it will look like this: "dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext". note that the '\n' and '\t' are the new-line and tab characters.
file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by '/'s. using the above example, the absolute path to file2.ext is "dir/subdir2/subsubdir2/file2.ext". each directory name consists of letters, digits, and/or spaces. each file name is of the form name.extension, where name and extension consist of letters, digits, and/or spaces.
a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. if there is no file in the system, return 0.
that the testcases are generated such that the file system is valid and no file or directory name has length 0.
are given two arrays rowsum and colsum of non-negative integers where rowsum[i] is the sum of the elements in the ith row and colsum[j] is the sum of the elements of the jth column of a 2d matrix. in other words, you do not know the elements of the matrix, but you do know the sums of each row and column.
any matrix of non-negative integers of size rowsum.length x colsum.length that satisfies the rowsum and colsum requirements.
a 2d array representing any matrix that fulfills the requirements. it's guaranteed that at least one matrix that fulfills the requirements exists.
are given an integer array nums of even length n and an integer limit. in one move, you can replace any integer from nums with another integer between 1 and limit, inclusive.
array nums is complementary if for all indices i (0-indexed), nums[i] + nums[n - 1 - i] equals the same number. for example, the array [1,2,3,4] is complementary because for all indices i, nums[i] + nums[n - 1 - i] = 5.
the minimum number of moves required to make nums complementary.
is a hidden integer array arr that consists of n non-negative integers.
was encoded into another integer array encoded of length n - 1, such that encoded[i] = arr[i] xor arr[i + 1]. for example, if arr = [1,0,2,1], then encoded = [1,2,3].
are given the encoded array. you are also given an integer first, that is the first element of arr, i.e. arr[0].
the original array arr. it can be proved that the answer exists and is unique.
an api that generates fancy sequences using the append, addall, and multall operations.
the fancy class:
initializes the object with an empty sequence.
append(val) appends an integer val to the end of the sequence.
addall(inc) increments all existing values in the sequence by an integer inc.
multall(m) multiplies all existing values in the sequence by an integer m.
getindex(idx) gets the current value at index idx (0-indexed) of the sequence modulo 109 + 7. if the index is greater or equal than the length of the sequence, return -1.
a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.
next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. if it doesn't exist, return -1 for this number.
an array of points on the x-y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. answers within 10-5 of the actual answer will be accepted.
are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. this child pointer may or may not point to a separate doubly linked list, also containing these special nodes. these child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below.
the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. let curr be a node with a child list. the nodes in the child list should appear after curr and before curr.next in the flattened list.
the head of the flattened list. the nodes in the list must have all of their child pointers set to null.
is a robot starting at the position (0, 0), the origin, on a 2d plane. given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.
are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. valid moves are 'r' (right), 'l' (left), 'u' (up), and 'd' (down).
true if the robot returns to the origin after it finishes all of its moves, or false otherwise.
the way that the robot is "facing" is irrelevant. 'r' will always make the robot move to the right once, 'l' will always make it move left, etc. also, assume that the magnitude of the robot's movement is the same for each move.
a string s, find the longest palindromic subsequence's length in s.
subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.
an integer number n, return the difference between the product of its digits and the sum of its digits.
are given a string s consisting of n characters which are either 'x' or 'o'.
move is defined as selecting three consecutive characters of s and converting them to 'o'. note that if a move is applied to the character 'o', it will stay the same.
the minimum number of moves required so that all the characters of s are converted to 'o'.
an integer array nums, a reducer function fn, and an initial value init, return a reduced array.
reduced array is created by applying the following operation: val = fn(init, nums[0]), val = fn(val, nums[1]), val = fn(val, nums[2]), ... until every element in the array has been processed. the final value of val is returned.
the length of the array is 0, it should return init.
solve it without using the built-in array.reduce method.
are given an integer n. you have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines. the ith element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0.
the order of the largest axis-aligned plus sign of 1's contained in grid. if there is none, return 0.
axis-aligned plus sign of 1's of order k has some center grid[r][c] == 1 along with four arms of length k - 1 going up, down, left, and right, and made of 1's. note that there could be 0's or 1's beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1's.
are n cars traveling at different speeds in the same direction along a one-lane road. you are given an array cars of length n, where cars[i] = [positioni, speedi] represents:
is the distance between the ith car and the beginning of the road in meters. it is guaranteed that positioni < positioni+1.
is the initial speed of the ith car in meters per second.
simplicity, cars can be considered as points moving along the number line. two cars collide when they occupy the same position. once a car collides with another car, they unite and form a single car fleet. the cars in the formed fleet will have the same position and the same speed, which is the initial speed of the slowest car in the fleet.
an array answer, where answer[i] is the time, in seconds, at which the ith car collides with the next car, or -1 if the car does not collide with the next car. answers within 10-5 of the actual answers are accepted.
schema
logins

column name | type |

user_id | int |
time_stamp | datetime |

time_stamp) is the primary key for this table.
row contains information about the login time for the user with id user_id.
an sql query to report the latest login for all users in the year 2020. do not include the users who did not login in 2020.
the result table in any order.
query result format is in the following example.
is a forest with an unknown number of rabbits. we asked n rabbits "how many rabbits have the same color as you?" and collected the answers in an integer array answers where answers[i] is the answer of the ith rabbit.
the array answers, return the minimum number of rabbits that could be in the forest.
are given a 0-indexed positive integer array nums and a positive integer k.
pair of numbers (num1, num2) is called excellent if the following conditions are satisfied:
the numbers num1 and num2 exist in the array nums.
sum of the number of set bits in num1 or num2 and num1 and num2 is greater than or equal to k, where or is the bitwise or operation and and is the bitwise and operation.
the number of distinct excellent pairs.
pairs (a, b) and (c, d) are considered distinct if either a != c or b != d. for example, (1, 2) and (2, 1) are distinct.
that a pair (num1, num2) such that num1 == num2 can also be excellent if you have at least one occurrence of num1 in the array.
are given an integer array ranks representing the ranks of some mechanics. ranksi is the rank of the ith mechanic. a mechanic with a rank r can repair n cars in r * n2 minutes.
are also given an integer cars representing the total number of cars waiting in the garage to be repaired.
the minimum time taken to repair all the cars.
all the mechanics can repair the cars simultaneously.
are n cities numbered from 0 to n-1. given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distancethreshold.
the city with the smallest number of cities that are reachable through some path and whose distance is at most distancethreshold, if there are multiple such cities, return the city with the greatest number.
that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.
are given a 0-indexed array nums comprising of n non-negative integers.
one operation, you must:
an integer i such that 1 <= i < n and nums[i] > 0.
nums[i] by 1.
nums[i - 1] by 1.
the minimum possible value of the maximum integer of nums after performing any number of operations.
are given two strings s and sub. you are also given a 2d character array mappings where mappings[i] = [oldi, newi] indicates that you may perform the following operation any number of times:
a character oldi of sub with newi.
character in sub cannot be replaced more than once.
true if it is possible to make sub a substring of s by replacing zero or more characters according to mappings. otherwise, return false.
substring is a contiguous non-empty sequence of characters within a string.
two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise.
is a stream of n (idkey, value) pairs arriving in an arbitrary order, where idkey is an integer between 1 and n and value is a string. no two pairs have the same id.
a stream that returns the values in increasing order of their ids by returning a chunk (list) of values after each insertion. the concatenation of all the chunks should result in a list of the sorted values.
the orderedstream class:
n) constructs the stream to take n values.
insert(int idkey, string value) inserts the pair (idkey, value) into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order.


"insert", "insert", "insert", "insert", "insert"]
[3, "ccccc"], [1, "aaaaa"], [2, "bbbbb"], [5, "eeeee"], [4, "ddddd"]]

[], ["aaaaa"], ["bbbbb", "ccccc"], [], ["ddddd", "eeeee"]]


note that the values ordered by id is ["aaaaa", "bbbbb", "ccccc", "ddddd", "eeeee"].
os = new orderedstream(5);
"ccccc"); // inserts (3, "ccccc"), returns [].
"aaaaa"); // inserts (1, "aaaaa"), returns ["aaaaa"].
"bbbbb"); // inserts (2, "bbbbb"), returns ["bbbbb", "ccccc"].
"eeeee"); // inserts (5, "eeeee"), returns [].
"ddddd"); // inserts (4, "ddddd"), returns ["ddddd", "eeeee"].
concatentating all the chunks returned:
[] + ["aaaaa"] + ["bbbbb", "ccccc"] + [] + ["ddddd", "eeeee"] = ["aaaaa", "bbbbb", "ccccc", "ddddd", "eeeee"]
the resulting order is the same as the order above.

<= n <= 1000
<= id <= n
== 5
consists only of lowercase letters.
call to insert will have a unique id.
n calls will be made to insert.
are given a 2d integer array intervals, where intervals[i] = [lefti, righti] describes the ith interval starting at lefti and ending at righti (inclusive). the size of an interval is defined as the number of integers it contains, or more formally righti - lefti + 1.
are also given an integer array queries. the answer to the jth query is the size of the smallest interval i such that lefti <= queries[j] <= righti. if no such interval exists, the answer is -1.
an array containing the answers to the queries.
valid cut in a circle can be:
cut that is represented by a straight line that touches two points on the edge of the circle and passes through its center, or
cut that is represented by a straight line that touches one point on the edge of the circle and its center.
valid and invalid cuts are shown in the figures below.
the integer n, return the minimum number of cuts needed to divide a circle into n equal slices.
are n seats and n students in a room. you are given an array seats of length n, where seats[i] is the position of the ith seat. you are also given the array students of length n, where students[j] is the position of the jth student.
may perform the following move any number of times:
or decrease the position of the ith student by 1 (i.e., moving the ith student from position x to x + 1 or x - 1)
the minimum number of moves required to move each student to a seat such that no two students are in the same seat.
that there may be multiple seats or students in the same position at the beginning.
is a party where n friends numbered from 0 to n - 1 are attending. there is an infinite number of chairs in this party that are numbered from 0 to infinity. when a friend arrives at the party, they sit on the unoccupied chair with the smallest number.
example, if chairs 0, 1, and 5 are occupied when a friend comes, they will sit on chair number 2.
a friend leaves the party, their chair becomes unoccupied at the moment they leave. if another friend arrives at that same moment, they can sit in that chair.
are given a 0-indexed 2d integer array times where times[i] = [arrivali, leavingi], indicating the arrival and leaving times of the ith friend respectively, and an integer targetfriend. all arrival times are distinct.
the chair number that the friend numbered targetfriend will sit on.
are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. you can only see the k numbers in the window. each time the sliding window moves right by one position.
the max sliding window.
are given a network of n nodes, labeled from 1 to n. you are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.
will send a signal from a given node k. return the minimum time it takes for all the n nodes to receive the signal. if it is impossible for all the n nodes to receive the signal, return -1.
are given two 0-indexed integer arrays nums and removequeries, both of length n. for the ith query, the element in nums at the index removequeries[i] is removed, splitting nums into different segments.
segment is a contiguous sequence of positive integers in nums. a segment sum is the sum of every element in a segment.
an integer array answer, of length n, where answer[i] is the maximum segment sum after applying the ith removal.
the same index will not be removed more than once.
schema
users

column name | type |

user_id | int |
name | varchar |
mail | varchar |

is the primary key for this table.
table contains information of the users signed up in a website. some e-mails are invalid.
an sql query to find the users who have valid emails.
valid e-mail has a prefix name and a domain where:
prefix name is a string that may contain letters (upper or lower case), digits, underscore '_', period '.', and/or dash '-'. the prefix name must start with a letter.
domain is '@leetcode.com'.
the result table in any order.
query result format is in the following example.
are given an integer array nums and an integer k.
one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.
the maximum number of operations you can perform on the array.
are given a 0-indexed integer array nums and two integers key and k. a k-distant index is an index i of nums for which there exists at least one index j such that |i - j| <= k and nums[j] == key.
a list of all k-distant indices sorted in increasing order.
two integers tomatoslices and cheeseslices. the ingredients of different burgers are as follows:
burger: 4 tomato slices and 1 cheese slice.
burger: 2 tomato slices and 1 cheese slice.
[total_jumbo, total_small] so that the number of remaining tomatoslices equal to 0 and the number of remaining cheeseslices equal to 0. if it is not possible to make the remaining tomatoslices and cheeseslices equal to 0 return [].
a list of 24-hour clock time points in "hh:mm" format, return the minimum minutes difference between any two time-points in the list.
a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.
the allone class:
initializes the object of the data structure.
key) increments the count of the string key by 1. if key does not exist in the data structure, insert it with count 1.
key) decrements the count of the string key by 1. if the count of key is 0 after the decrement, remove it from the data structure. it is guaranteed that key exists in the data structure before the decrement.
returns one of the keys with the maximal count. if no element exists, return an empty string "".
returns one of the keys with the minimum count. if no element exists, return an empty string "".
that each function must run in o(1) average time complexity.
an integer array nums, return the maximum result of nums[i] xor nums[j], where 0 <= i <= j < n.
an integer n (in base 10) and a base k, return the sum of the digits of n after converting n from base 10 to base k.
converting, each digit should be interpreted as a base 10 number, and the sum should be returned in base 10.
a skiplist without using any built-in libraries.
skiplist is a data structure that takes o(log(n)) time to add, erase and search. comparing with treap and red-black tree which has the same function and performance, the code length of skiplist can be comparatively short and the idea behind skiplists is just simple linked lists.
example, we have a skiplist containing [30,40,50,60,70,90] and we want to add 80 and 45 into it. the skiplist works this way:

kalinin [cc by-sa 3.0], via wikimedia commons
can see there are many layers in the skiplist. each layer is a sorted linked list. with the help of the top layers, add, erase and search can be faster than o(n). it can be proven that the average time complexity for each operation is o(log(n)) and space complexity is o(n).
more about skiplist: https://en.wikipedia.org/wiki/skip_list
the skiplist class:
initializes the object of the skiplist.
search(int target) returns true if the integer target exists in the skiplist or false otherwise.
add(int num) inserts the value num into the skiplist.
erase(int num) removes the value num from the skiplist and returns true. if num does not exist in the skiplist, do nothing and return false. if there exist multiple num values, removing any one of them is fine.
that duplicates may exist in the skiplist, your code needs to handle this situation.
are given a string array words and a string s, where words[i] and s comprise only of lowercase english letters.
the number of strings in words that are a prefix of s.
prefix of a string is a substring that occurs at the beginning of the string. a substring is a contiguous sequence of characters within a string.
are visiting a farm that has a single row of fruit trees arranged from left to right. the trees are represented by an integer array fruits where fruits[i] is the type of fruit the ith tree produces.
want to collect as much fruit as possible. however, the owner has some strict rules that you must follow:
only have two baskets, and each basket can only hold a single type of fruit. there is no limit on the amount of fruit each basket can hold.
from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. the picked fruits must fit in one of your baskets.
you reach a tree with fruit that cannot fit in your baskets, you must stop.
the integer array fruits, return the maximum number of fruits you can pick.
have n robots. you are given two 0-indexed integer arrays, chargetimes and runningcosts, both of length n. the ith robot costs chargetimes[i] units to charge and costs runningcosts[i] units to run. you are also given an integer budget.
total cost of running k chosen robots is equal to max(chargetimes) + k * sum(runningcosts), where max(chargetimes) is the largest charge cost among the k robots and sum(runningcosts) is the sum of running costs among the k robots.
the maximum number of consecutive robots you can run such that the total cost does not exceed budget.
are given an array prices where prices[i] is the price of a given stock on the ith day.
the maximum profit you can achieve. you may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:
you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
is a street with n * 2 plots, where there are n plots on each side of the street. the plots on each side are numbered from 1 to n. on each plot, a house can be placed.
the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street. since the answer may be very large, return it modulo 109 + 7.
that if a house is placed on the ith plot on one side of the street, a house can also be placed on the ith plot on the other side of the street.
is an m x n grid, where (0, 0) is the top-left cell and (m - 1, n - 1) is the bottom-right cell. you are given an integer array startpos where startpos = [startrow, startcol] indicates that initially, a robot is at the cell (startrow, startcol). you are also given an integer array homepos where homepos = [homerow, homecol] indicates that its home is at the cell (homerow, homecol).
robot needs to go to its home. it can move one cell in four directions: left, right, up, or down, and it can not move outside the boundary. every move incurs some cost. you are further given two 0-indexed integer arrays: rowcosts of length m and colcosts of length n.
the robot moves up or down into a cell whose row is r, then this move costs rowcosts[r].
the robot moves left or right into a cell whose column is c, then this move costs colcosts[c].
the minimum total cost for this robot to return home.
you have n integers labeled 1 through n. a permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:
is divisible by i.
is divisible by perm[i].
an integer n, return the number of the beautiful arrangements that you can construct.
an array of integers nums, half of the integers in nums are odd, and the other half are even.
the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.
any answer array that satisfies this condition.
are given two binary trees root1 and root2.
that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. you need to merge the two trees into a new binary tree. the merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. otherwise, the not null node will be used as the node of the new tree.
the merged tree.
the merging process must start from the root nodes of both trees.
are given an integer array prices where prices[i] is the price of the ith item in a shop.
is a special discount for items in the shop. if you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum index such that j > i and prices[j] <= prices[i]. otherwise, you will not receive any discount at all.
an integer array answer where answer[i] is the final price you will pay for the ith item of the shop, considering the special discount.
an m x n matrix board where each cell is a battleship 'x' or empty '.', return the number of the battleships on board.
can only be placed horizontally or vertically on board. in other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. at least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).
sentence is a string of single-space separated words where each word consists only of lowercase letters.
word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.
two sentences s1 and s2, return a list of all the uncommon words. you may return the answer in any order.
the root of an n-ary tree, return the postorder traversal of its nodes' values.
input serialization is represented in their level order traversal. each group of children is separated by the null value (see examples)
an array of positive integers arr, return the sum of all possible odd-length subarrays of arr.
subarray is a contiguous subsequence of the array.
are given a 0-indexed 2d array grid of size 2 x n, where grid[r][c] represents the number of points at position (r, c) on the matrix. two robots are playing a game on this matrix.
robots initially start at (0, 0) and want to reach (1, n-1). each robot may only move to the right ((r, c) to (r, c + 1)) or down ((r, c) to (r + 1, c)).
the start of the game, the first robot moves from (0, 0) to (1, n-1), collecting all the points from the cells on its path. for all cells (r, c) traversed on the path, grid[r][c] is set to 0. then, the second robot moves from (0, 0) to (1, n-1), collecting the points on its path. note that their paths may intersect with one another.
first robot wants to minimize the number of points collected by the second robot. in contrast, the second robot wants to maximize the number of points it collects. if both robots play optimally, return the number of points collected by the second robot.
are given two non-empty linked lists representing two non-negative integers. the digits are stored in reverse order, and each of their nodes contains a single digit. add the two numbers and return the sum as a linked list.
may assume the two numbers do not contain any leading zero, except the number 0 itself.
a project, you have a list of required skills req_skills, and a list of people. the ith person people[i] contains a list of skills that the person has.
a sufficient team: a set of people such that for every required skill in req_skills, there is at least one person in the team who has that skill. we can represent these teams by the index of each person.
example, team = [0, 1, 3] represents the people with skills people[0], people[1], and people[3].
any sufficient team of the smallest possible size, represented by the index of each person. you may return the answer in any order.
is guaranteed an answer exists.
the root of a binary tree, return all root-to-leaf paths in any order.
leaf is a node with no children.
are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.
nodes initial are initially infected by malware. whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. this spread of malware will continue until no more nodes can be infected in this manner.
m(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. we will remove exactly one node from initial.
the node that, if removed, would minimize m(initial). if multiple nodes could be removed to minimize m(initial), return such a node with the smallest index.
that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.
are given a 0-indexed string array words.
strings are similar if they consist of the same characters.
example, "abca" and "cba" are similar since both consist of characters 'a', 'b', and 'c'.
"abacba" and "bcfd" are not similar since they do not consist of the same characters.
the number of pairs (i, j) such that 0 <= i < j <= word.length - 1 and the two strings words[i] and words[j] are similar.
are given a 0-indexed integer array nums whose length is a power of 2.
the following algorithm on nums:
n be the length of nums. if n == 1, end the process. otherwise, create a new 0-indexed integer array newnums of length n / 2.
every even index i where 0 <= i < n / 2, assign the value of newnums[i] as min(nums[2 * i], nums[2 * i + 1]).
every odd index i where 0 <= i < n / 2, assign the value of newnums[i] as max(nums[2 * i], nums[2 * i + 1]).
the array nums with newnums.
the entire process starting from step 1.
the last number that remains in nums after applying the algorithm.
are given a positive integer array nums.
element sum is the sum of all the elements in nums.
digit sum is the sum of all the digits (not necessarily distinct) that appear in nums.
the absolute difference between the element sum and digit sum of nums.
that the absolute difference between two integers x and y is defined as |x - y|.
the root of a binary tree, determine if it is a valid binary search tree (bst).
valid bst is defined as follows:
left

a node contains only nodes with keys less than the node's key.
right subtree of a node contains only nodes with keys greater than the node's key.
the left and right subtrees must also be binary search trees.
a long library corridor, there is a line of seats and decorative plants. you are given a 0-indexed string corridor of length n consisting of letters 's' and 'p' where each 's' represents a seat and each 'p' represents a plant.
room divider has already been installed to the left of index 0, and another to the right of index n - 1. additional room dividers can be installed. for each position between indices i - 1 and i (1 <= i <= n - 1), at most one divider can be installed.
the corridor into non-overlapping sections, where each section has exactly two seats with any number of plants. there may be multiple ways to perform the division. two ways are different if there is a position with a room divider installed in the first way but not in the second way.
the number of ways to divide the corridor. since the answer may be very large, return it modulo 109 + 7. if there is no way, return 0.
are given an integer array nums. in one operation, you can replace any element in nums with any integer.
is considered continuous if both of the following conditions are fulfilled:
elements in nums are unique.
difference between the maximum element and the minimum element in nums equals nums.length - 1.
example, nums = [4, 2, 5, 3] is continuous, but nums = [1, 2, 3, 5, 6] is not continuous.
the minimum number of operations to make nums continuous.
are given a 0-indexed binary string target of length n. you have another binary string s of length n that is initially set to all zeros. you want to make s equal to target.
one operation, you can pick an index i where 0 <= i < n and flip all bits in the inclusive range [i, n - 1]. flip means changing '0' to '1' and '1' to '0'.
the minimum number of operations needed to make s equal to target.
an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. you spend 1 second to walk over one edge of the tree. return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.
edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. additionally, there is a boolean array hasapple, where hasapple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.
schema
department

column name | type |

id | int |
revenue | int |
month | varchar |

month) is the primary key of this table.
table has information about the revenue of each department per month.
month has values in ["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"].
an sql query to reformat the table such that there is a department id column and a revenue column for each month.
the result table in any order.
query result format is in the following example.
an algorithm to determine if a number n is happy.
happy number is a number defined by the following process:
with any positive integer, replace the number by the sum of the squares of its digits.
the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
numbers for which this process ends in 1 are happy.
true if n is a happy number, and false if not.
a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.
circular array means the end of the array connects to the beginning of the array. formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].
subarray may only include each element of the fixed buffer nums at most once. formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.
are given two string arrays positive_feedback and negative_feedback, containing the words denoting positive and negative feedback, respectively. note that no word is both positive and negative.
every student has 0 points. each positive word in a feedback report increases the points of a student by 3, whereas each negative word decreases the points by 1.
are given n feedback reports, represented by a 0-indexed string array report and a 0-indexed integer array student_id, where student_id[i] represents the id of the student who has received the feedback report report[i]. the id of each student is unique.
an integer k, return the top k students after ranking them in non-increasing order by their points. in case more than one student has the same points, the one with the lower id ranks higher.
have a chat log of n messages. you are given two string arrays messages and senders where messages[i] is a message sent by senders[i].
message is list of words that are separated by a single space with no leading or trailing spaces. the word count of a sender is the total number of words sent by the sender. note that a sender may send more than one message.
the sender with the largest word count. if there is more than one sender with the largest word count, return the one with the lexicographically largest name.

letters come before lowercase letters in lexicographical order.
and "alice" are distinct.
are given two positive 0-indexed integer arrays nums1 and nums2, both of length n.
sum of squared difference of arrays nums1 and nums2 is defined as the sum of (nums1[i] - nums2[i])2 for each 0 <= i < n.
are also given two positive integers k1 and k2. you can modify any of the elements of nums1 by +1 or -1 at most k1 times. similarly, you can modify any of the elements of nums2 by +1 or -1 at most k2 times.
the minimum sum of squared difference after modifying array nums1 at most k1 times and modifying array nums2 at most k2 times.
you are allowed to modify the array elements to become negative integers.
task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.
an array nums of integers, a move consists of choosing any element and decreasing it by 1.
array a is a zigzag array if either:
even-indexed element is greater than adjacent elements, ie. a[0] > a[1] < a[2] > a[3] < a[4] > ...
every odd-indexed element is greater than adjacent elements, ie. a[0] < a[1] > a[2] < a[3] > a[4] < ...
the minimum number of moves to transform the given array nums into a zigzag array.
are given a 0-indexed integer array costs where costs[i] is the cost of hiring the ith worker.
are also given two integers k and candidates. we want to hire exactly k workers according to the following rules:
will run k sessions and hire exactly one worker in each session.
each hiring session, choose the worker with the lowest cost from either the first candidates workers or the last candidates workers. break the tie by the smallest index.
example, if costs = [3,2,7,7,1,2] and candidates = 2, then in the first hiring session, we will choose the 4th worker because they have the lowest cost [3,2,7,7,1,2].
the second hiring session, we will choose 1st worker because they have the same lowest cost as 4th worker but they have the smallest index [3,2,7,7,2]. please note that the indexing may be changed in the process.
there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. break the tie by the smallest index.
worker can only be chosen once.
the total cost to hire exactly k workers.
are given a 0-indexed string expression of the form "<num1>+<num2>" where <num1> and <num2> represent positive integers.
a pair of parentheses to expression such that after the addition of parentheses, expression is a valid mathematical expression and evaluates to the smallest possible value. the left parenthesis must be added to the left of '+' and the right parenthesis must be added to the right of '+'.
expression after adding a pair of parentheses such that expression evaluates to the smallest possible value. if there are multiple answers that yield the same result, return any of them.
input has been generated such that the original value of expression, and the value of expression after adding any pair of parentheses that meets the requirements fits within a signed 32-bit integer.
an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). the subsequence must be strictly increasing.
continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].
image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). if one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).
an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.
a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.
are given an array nums consisting of positive integers.
have to take each integer in the array, reverse its digits, and add it to the end of the array. you should apply this operation to the original integers in nums.
the number of distinct integers in the final array.
schema
products

column name | type |

product_id | int |
store1 | int |
store2 | int |
store3 | int |

is the primary key for this table.
row in this table indicates the product's price in 3 different stores: store1, store2, and store3.
the product is not available in a store, the price will be null in that store's column.
an sql query to rearrange the products table so that each row has (product_id, store, price). if a product is not available in a store, do not include a row with that product_id and store combination in the result table.
the result table in any order.
query result format is in the following example.
two integer arrays arr1 and arr2, return the minimum number of operations (possibly zero) needed to make arr1 strictly increasing.
one operation, you can choose two indices 0 <= i < arr1.length and 0 <= j < arr2.length and do the assignment arr1[i] = arr2[j].
there is no way to make arr1 strictly increasing, return -1.
and bob take turns playing a game, with alice starting first.
there is a number n on the chalkboard. on each player's turn, that player makes a move consisting of:
any x with 0 < x < n and n % x == 0.
the number n on the chalkboard with n - x.
if a player cannot make a move, they lose the game.
true if and only if alice wins the game, assuming both players play optimally.
an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].
schema
employees

column name | type |

employee_id | int |
name | varchar |
manager_id | int |
salary | int |

is the primary key for this table.
table contains information about the employees, their salary, and the id of their manager. some employees do not have a manager (manager_id is null).
an sql query to report the ids of the employees whose salary is strictly less than $30000 and whose manager left the company. when a manager leaves the company, their information is deleted from the employees table, but the reports still have their manager_id set to the manager that left.
the result table ordered by employee_id.
query result format is in the following example.
a reference of a node in a connected undirected graph.
a deep copy (clone) of the graph.
node in the graph contains a value (int) and a list (list[node]) of its neighbors.
node {
int val;
list<node> neighbors;

case format:
simplicity, each node's value is the same as the node's index (1-indexed). for example, the first node with val == 1, the second node with val == 2, and so on. the graph is represented in the test case using an adjacency list.
adjacency list is a collection of unordered lists used to represent a finite graph. each list describes the set of neighbors of a node in the graph.
given node will always be the first node with val = 1. you must return the copy of the given node as a reference to the cloned graph.
are given a string s that consists of the digits '1' to '9' and two integers k and minlength.
partition of s is called beautiful if:
is partitioned into k non-intersecting substrings.
substring has a length of at least minlength.
substring starts with a prime digit and ends with a non-prime digit. prime digits are '2', '3', '5', and '7', and the rest of the digits are non-prime.
the number of beautiful partitions of s. since the answer may be very large, return it modulo 109 + 7.
substring is a contiguous sequence of characters within a string.
are given two strings s and t. in one step, you can append any character to either s or t.
the minimum number of steps to make s and t anagrams of each other.
anagram of a string is a string that contains the same characters with a different (or the same) ordering.
all functions to have the callpolyfill method. the method accepts an object obj as it's first parameter and any number of additional arguments. the obj becomes the this context for the function. the additional arguments are passed to the function (that the callpolyfill method belongs on).
example if you had the function:
tax(price, taxrate) {
totalcost = price * (1 + taxrate);
cost of ${this.item} is ${totalcost}`);

this function like tax(10, 0.1) will log "the cost of undefined is 11". this is because the this context was not defined.
calling the function like tax.callpolyfill({item: "salad"}, 10, 0.1) will log "the cost of salad is 11". the this context was appropriately set, and the function logged an appropriate output.
solve this without using the built-in function.call method.
an integer n, return true if it is a power of four. otherwise, return false.
integer n is a power of four, if there exists an integer x such that n == 4x.
are given a 0-indexed integer array nums representing the contents of a pile, where nums[0] is the topmost element of the pile.
one move, you can perform either of the following:
the pile is not empty, remove the topmost element of the pile.
there are one or more removed elements, add any one of them back onto the pile. this element becomes the new topmost element.
are also given an integer k, which denotes the total number of moves to be made.
the maximum value of the topmost element of the pile possible after exactly k moves. in case it is not possible to obtain a non-empty pile after k moves, return -1.
are given a string s consisting only of lowercase english letters.
one move, you can select any two adjacent characters of s and swap them.
the minimum number of moves needed to make s a palindrome.
that the input will be generated such that s can always be converted to a palindrome.
2n balls of k distinct colors. you will be given an integer array balls of size k where balls[i] is the number of balls of color i.
the balls will be shuffled uniformly at random, then we will distribute the first n balls to the first box and the remaining n balls to the other box (please read the explanation of the second example carefully).
note that the two boxes are considered different. for example, if we have two balls of colors a and b, and two boxes [] and (), then the distribution [a] (b) is considered different than the distribution [b] (a) (please read the explanation of the first example carefully).
the probability that the two boxes have the same number of distinct balls. answers within 10-5 of the actual value will be accepted as correct.
are given an integer array nums. in one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1.
the minimum number of moves to make every value in nums unique.
test cases are generated so that the answer fits in a 32-bit integer.
are given a 0-indexed integer array nums.
low score of nums is the minimum value of |nums[i] - nums[j]| over all 0 <= i < j < nums.length.
high score of nums is the maximum value of |nums[i] - nums[j]| over all 0 <= i < j < nums.length.
score of nums is the sum of the high and low scores of nums.
minimize the score of nums, we can change the value of at most two elements of nums.
the minimum possible score after changing the value of at most two elements of nums.
that |x| denotes the absolute value of x.
schema
person

column name | type |

id | int |
email | varchar |

is the primary key column for this table.
row of this table contains an email. the emails will not contain uppercase letters.
an sql query to delete all the duplicate emails, keeping only one unique email with the smallest id. note that you are supposed to write a delete statement and not a select one.
running your script, the answer shown is the person table. the driver will first compile and run your piece of code and then show the person table. the final order of the person table does not matter.
query result format is in the following example.
an integer array nums and an integer k, return the number of subarrays of nums where the least common multiple of the subarray's elements is k.
subarray is a contiguous non-empty sequence of elements within an array.
least common multiple of an array is the smallest positive integer that is divisible by all the array elements.
are given a 2d integer array groups of length n. you are also given an integer array nums.
are asked if you can choose n disjoint subarrays from the array nums such that the ith subarray is equal to groups[i] (0-indexed), and if i > 0, the (i-1)th subarray appears before the ith subarray in nums (i.e. the subarrays must be in the same order as groups).
true if you can do this task, and false otherwise.
that the subarrays are disjoint if and only if there is no index k such that nums[k] belongs to more than one subarray. a subarray is a contiguous sequence of elements within an array.
an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied.
subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.
a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.
may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)
may also assume each line in the text file must not contain leading or trailing white spaces.

that file.txt has the following content:

456 7890
456-7890
script should output the following valid phone numbers:

456-7890
are given an integer array values where values[i] represents the value of the ith sightseeing spot. two sightseeing spots i and j have a distance j - i between them.
score of a pair (i < j) of sightseeing spots is values[i] + values[j] + i - j: the sum of the values of the sightseeing spots, minus the distance between them.
the maximum score of a pair of sightseeing spots.
a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.
you can only move either down or right at any point in time.
two numbers, hour and minutes, return the smaller angle (in degrees) formed between the hour and the minute hand.
within 10-5 of the actual value will be accepted as correct.
has n balloons arranged on a rope. you are given a 0-indexed string colors where colors[i] is the color of the ith balloon.
wants the rope to be colorful. she does not want two consecutive balloons to be of the same color, so she asks bob for help. bob can remove some balloons from the rope to make it colorful. you are given a 0-indexed integer array neededtime where neededtime[i] is the time (in seconds) that bob needs to remove the ith balloon from the rope.
the minimum time bob needs to make the rope colorful.
are given a string s consisting of only lowercase english letters. in one operation, you can:
the entire string s, or
the first i letters of s if the first i letters of s are equal to the following i letters in s, for any i in the range 1 <= i <= s.length / 2.
example, if s = "ababc", then in one operation, you could delete the first two letters of s to get "abc", since the first two letters of s and the following two letters of s are both equal to "ab".
the maximum number of operations needed to delete all of s.
was given the above mysterious function func. he has an integer array arr and an integer target and he wants to find the values l and r that make the value |func(arr, l, r) - target| minimum possible.
the minimum possible value of |func(arr, l, r) - target|.
that func should be called with the values l and r where 0 <= l, r < arr.length.
an array nums sorted in non-decreasing order, return the maximum between the number of positive integers and the number of negative integers.
other words, if the number of positive integers in nums is pos and the number of negative integers is neg, then return the maximum of pos and neg.
that 0 is neither positive nor negative.
an integer array nums, find a

has the largest product, and return the product.
test cases are generated so that the answer will fit in a 32-bit integer.
are given two strings a and b that consist of lowercase letters. in one operation, you can change any character in a or b to any lowercase letter.
goal is to satisfy one of the following three conditions:
letter in a is strictly less than every letter in b in the alphabet.
letter in b is strictly less than every letter in a in the alphabet.
a and b consist of only one distinct letter.
the minimum number of operations needed to achieve your goal.
are given a string s consisting only of letters 'a' and 'b'. in a single step you can remove one palindromic subsequence from s.
the minimum number of steps to make the given string empty.
string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. note that a subsequence does not necessarily need to be contiguous.
string is called palindrome if is one that reads the same backward as well as forward.
an integer num, return a string of its base 7 representation.
is a binary tree rooted at 0 consisting of n nodes. the nodes are labeled from 0 to n - 1. you are given a 0-indexed integer array parents representing the tree, where parents[i] is the parent of node i. since node 0 is the root, parents[0] == -1.
node has a score. to find the score of a node, consider if the node and the edges connected to it were removed. the tree would become one or more non-empty subtrees. the size of a subtree is the number of the nodes in it. the score of the node is the product of the sizes of all those subtrees.
the number of nodes that have the highest score.
two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.
integer division should truncate toward zero, which means losing its fractional part. for example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.
the quotient after dividing dividend by divisor.
assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [â231, 231 â 1]. for this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.
a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.
example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. these are the only nodes with twins for n = 4.
twin sum is defined as the sum of a node and its twin.
the head of a linked list with even length, return the maximum twin sum of the linked list.
an integer array nums, return the number of all the arithmetic subsequences of nums.
sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.
example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.
example, [1, 1, 2, 5, 7] is not an arithmetic sequence.
subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.
example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].
test cases are generated so that the answer fits in 32-bit integer.
an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.
are given a string s of lowercase english letters and a 2d integer array shifts where shifts[i] = [starti, endi, directioni]. for every i, shift the characters in s from the index starti to the index endi (inclusive) forward if directioni = 1, or shift the characters backward if directioni = 0.
a character forward means replacing it with the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). similarly, shifting a character backward means replacing it with the previous letter in the alphabet (wrapping around so that 'a' becomes 'z').
the final string after all such shifts to s are applied.
are given a binary string binary. a subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of "0").
the number of unique good subsequences of binary.
example, if binary = "001", then all the good subsequences are ["0", "0", "1"], so the unique good subsequences are "0" and "1". note that subsequences "00", "01", and "001" are not good because they have leading zeros.
the number of unique good subsequences of binary. since the answer may be very large, return it modulo 109 + 7.
subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.
an array of integers arr, return the number of subarrays with an odd sum.
the answer can be very large, return it modulo 109 + 7.
n points on a 2d plane where points[i] = [xi, yi], return the widest vertical area between two points such that no points are inside the area.
vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). the widest vertical area is the one with the maximum width.
that points on the edge of a vertical area are not considered included in the area.
define the conversion array conver of an array arr as follows:
= arr[i] + max(arr[0..i]) where max(arr[0..i]) is the maximum value of arr[j] over 0 <= j <= i.
also define the score of an array arr as the sum of the values of the conversion array of arr.
a 0-indexed integer array nums of length n, return an array ans of length n where ans[i] is the score of the prefix nums[0..i].
is a directed graph of n colored nodes and m edges. the nodes are numbered from 0 to n - 1.
are given a string colors where colors[i] is a lowercase english letter representing the color of the ith node in this graph (0-indexed). you are also given a 2d array edges where edges[j] = [aj, bj] indicates that there is a directed edge from node aj to node bj.
valid path in the graph is a sequence of nodes x1 -> x2 -> x3 -> ... -> xk such that there is a directed edge from xi to xi+1 for every 1 <= i < k. the color value of the path is the number of nodes that are colored the most frequently occurring color along that path.
the largest color value of any valid path in the given graph, or -1 if the graph contains a cycle.
an m x n matrix, return true if the matrix is toeplitz. otherwise, return false.
matrix is toeplitz if every diagonal from top-left to bottom-right has the same elements.
are given a string allowed consisting of distinct characters and an array of strings words. a string is consistent if all characters in the string appear in the string allowed.
the number of consistent strings in the array words.
an array of positive integers nums, return the number of distinct prime factors in the product of the elements of nums.
that:
number greater than 1 is called prime if it is divisible by only 1 and itself.
integer val1 is a factor of another integer val2 if val2 / val1 is an integer.
are given an integer mass, which represents the original mass of a planet. you are further given an integer array asteroids, where asteroids[i] is the mass of the ith asteroid.
can arrange for the planet to collide with the asteroids in any arbitrary order. if the mass of the planet is greater than or equal to the mass of the asteroid, the asteroid is destroyed and the planet gains the mass of the asteroid. otherwise, the planet is destroyed.
true if all asteroids can be destroyed. otherwise, return false.
a 0-indexed 8 x 8 chessboard, there can be multiple black queens ad one white king.
are given a 2d integer array queens where queens[i] = [xqueeni, yqueeni] represents the position of the ith black queen on the chessboard. you are also given an integer array king of length 2 where king = [xking, yking] represents the position of the white king.
the coordinates of the black queens that can directly attack the king. you may return the answer in any order.
schema
transactions

column name | type |

id | int |
country | varchar |
state | enum |
amount | int |
trans_date | date |

is the primary key of this table.
table has information about incoming transactions.
state column is an enum of type ["approved", "declined"].
an sql query to find for each month and country, the number of transactions and their total amount, the number of approved transactions and their total amount.
the result table in any order.
query result format is in the following example.
a string s, return the last substring of s in lexicographical order.
are n projects numbered from 0 to n - 1. you are given an integer array milestones where each milestones[i] denotes the number of milestones the ith project has.
can work on the projects following these two rules:
week, you will finish exactly one milestone of one project. you must work every week.
cannot work on two milestones from the same project for two consecutive weeks.
all the milestones of all the projects are finished, or if the only milestones that you can work on will cause you to violate the above rules, you will stop working. note that you may not be able to finish every project's milestones due to these constraints.
the maximum number of weeks you would be able to work on the projects without violating the rules mentioned above.
a string s consisting of words and spaces, return the length of the last word in the string.
word is a maximal

of non-space characters only.
is a donuts shop that bakes donuts in batches of batchsize. they have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. you are given an integer batchsize and an integer array groups, where groups[i] denotes that there is a group of groups[i] customers that will visit the shop. each customer will get exactly one donut.
a group visits the shop, all customers of the group must be served before serving any of the following groups. a group will be happy if they all get fresh donuts. that is, the first customer of the group does not receive a donut that was left over from the previous group.
can freely rearrange the ordering of the groups. return the maximum possible number of happy groups after rearranging the groups.
are given an integer matrix iswater of size m x n that represents a map of land and water cells.
iswater[i][j] == 0, cell (i, j) is a land cell.
iswater[i][j] == 1, cell (i, j) is a water cell.
must assign each cell a height in a way that follows these rules:
height of each cell must be non-negative.
the cell is a water cell, its height must be 0.
two adjacent cells must have an absolute height difference of at most 1. a cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).
an assignment of heights such that the maximum height in the matrix is maximized.
an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. if there are multiple solutions, return any of them.
is a restaurant with a single chef. you are given an array customers, where customers[i] = [arrivali, timei]:
is the arrival time of the ith customer. the arrival times are sorted in non-decreasing order.
is the time needed to prepare the order of the ith customer.
a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. the customer waits till the chef finishes preparing his order. the chef does not prepare food for more than one customer at a time. the chef prepares food for customers in the order they were given in the input.
the average waiting time of all customers. solutions within 10-5 from the actual answer are considered accepted.
are given the root of a binary tree with n nodes, where each node is uniquely assigned a value from 1 to n. you are also given a sequence of n values voyage, which is the desired pre-order traversal of the binary tree.
node in the binary tree can be flipped by swapping its left and right subtrees. for example, flipping node 1 will have the following effect:
the smallest number of nodes so that the pre-order traversal of the tree matches voyage.
a list of the values of all flipped nodes. you may return the answer in any order. if it is impossible to flip the nodes in the tree to make the pre-order traversal match voyage, return the list [-1].
manages a company and has rented some floors of a building as office space. alice has decided some of these floors should be special floors, used for relaxation only.
are given two integers bottom and top, which denote that alice has rented all the floors from bottom to top (inclusive). you are also given the integer array special, where special[i] denotes a special floor that alice has designated for relaxation.
the maximum number of consecutive floors without a special floor.
a list of words, list of single letters (might be repeating) and score of every character.
the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two or more times).
is not necessary to use all characters in letters and each letter can only be used once. score of letters 'a', 'b', 'c', ... ,'z' is given by score[0], score[1], ... , score[25] respectively.
two positive integers num1 and num2, find the positive integer x such that:
has the same number of set bits as num2, and
value x xor num1 is minimal.
that xor is the bitwise xor operation.
the integer x. the test cases are generated such that x is uniquely determined.
number of set bits of an integer is the number of 1's in its binary representation.
n x n matrix is valid if every row and every column contains all the integers from 1 to n (inclusive).
an n x n integer matrix matrix, return true if the matrix is valid. otherwise, return false.
a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses


have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum capacity.
the dinnerplates class:
capacity) initializes the object with the maximum capacity of the stacks capacity.
push(int val) pushes the given integer val into the leftmost stack with a size less than capacity.
pop() returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns -1 if all the stacks are empty.
popatstack(int index) returns the value at the top of the stack with the given index index and removes it from that stack or returns -1 if the stack with that given index is empty.
a map that allows you to do the following:
a string key to a given value.
the sum of the values that have a key with a prefix equal to a given string.
the mapsum class:
initializes the mapsum object.
insert(string key, int val) inserts the key-val pair into the map. if the key already existed, the original key-value pair will be overridden to the new one.
sum(string prefix) returns the sum of all the pairs' value whose key starts with the prefix.
median is the middle value in an ordered integer list. if the size of the list is even, there is no middle value, and the median is the mean of the two middle values.
example, for arr = [2,3,4], the median is 3.
example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.
the medianfinder class:
initializes the medianfinder object.
addnum(int num) adds the integer num from the data stream to the data structure.
findmedian() returns the median of all elements so far. answers within 10-5 of the actual answer will be accepted.
are given a directed graph with n nodes labeled from 0 to n - 1, where each node has exactly one outgoing edge.
graph is represented by a given 0-indexed integer array edges of length n, where edges[i] indicates that there is a directed edge from node i to node edges[i].
edge score of a node i is defined as the sum of the labels of all the nodes that have an edge pointing to i.
the node with the highest edge score. if multiple nodes have the same edge score, return the node with the smallest index.
are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stonevalue.
each round of the game, alice divides the row into two non-empty rows (i.e. left row and right row), then bob calculates the value of each row which is the sum of the values of all the stones in this row. bob throws away the row which has the maximum value, and alice's score increases by the value of the remaining row. if the value of the two rows are equal, bob lets alice decide which row will be thrown away. the next round starts with the remaining row.
game ends when there is only one stone remaining. alice's is initially zero.
the maximum score that alice can obtain.
schema
products

column name | type |

product_id | int |
product_name | varchar |
product_category | varchar |

is the primary key for this table.
table contains data about the company's products.
orders

column name | type |

product_id | int |
order_date | date |
unit | int |

is no primary key for this table. it may have duplicate rows.
is a foreign key to the products table.
is the number of products ordered in order_date.
an sql query to get the names of products that have at least 100 units ordered in february 2020 and their amount.
result table in any order.
query result format is in the following example.
a 0-indexed integer array nums, return the number of distinct quadruplets (a, b, c, d) such that:
+ nums[b] + nums[c] == nums[d], and
< b < c < d
a function to find the longest common prefix string amongst an array of strings.
there is no common prefix, return an empty string "".
the array nums, for each nums[i] find out how many numbers in the array are smaller than it. that is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].
the answer in an array.
are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.
can apply either of the following two operations any number of times and in any order on s:
a to all odd indices of s (0-indexed). digits post 9 are cycled back to 0. for example, if s = "3456" and a = 5, s becomes "3951".
s to the right by b positions. for example, if s = "3456" and b = 1, s becomes "6345".
the lexicographically smallest string you can obtain by applying the above operations any number of times on s.
string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. for example, "0158" is lexicographically smaller than "0190" because the first position they differ is at the third letter, and '5' comes before '9'.
are given the root of a binary tree with unique values, and an integer start. at minute 0, an infection starts from the node with value start.
minute, a node becomes infected if:
node is currently uninfected.
node is adjacent to an infected node.
the number of minutes needed for the entire tree to be infected.
a string s, return the maximum number of occurrences of any substring under the following rules:
number of unique characters in the substring must be less than or equal to maxletters.
substring size must be between minsize and maxsize inclusive.
the root of a binary search tree, return a balanced binary search tree with the same node values. if there is more than one answer, return any of them.
binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.
are given a 0-indexed integer array nums. in one operation you can replace any element of the array with any two elements that sum to it.
example, consider nums = [5,6,7]. in one operation, we can replace nums[1] with 2 and 4 and convert nums to [5,2,4,7].
the minimum number of operations to make an array that is sorted in non-decreasing order.
would like to make dessert and are preparing to buy the ingredients. you have n ice cream base flavors and m types of toppings to choose from. you must follow these rules when making your dessert:
must be exactly one ice cream base.
can add one or more types of topping or have no toppings at all.
are at most two of each type of topping.
are given three inputs:
an integer array of length n, where each basecosts[i] represents the price of the ith ice cream base flavor.
an integer array of length m, where each toppingcosts[i] is the price of one of the ith topping.
an integer representing your target price for dessert.
want to make a dessert with a total cost as close to target as possible.
the closest possible cost of the dessert to target. if there are multiple, return the lower one.
a bash script to calculate the

each word in a text file words.txt.
simplicity sake, you may assume:
contains only lowercase characters and space ' ' characters.
word must consist of lowercase characters only.
are separated by one or more whitespace characters.

that words.txt has the following content:
day is sunny the the
sunny is is
script should output the following, sorted by descending frequency:
4
3
2
1

worry about handling ties, it is guaranteed that each word's frequency count is unique.
you write it in one-line using unix pipes?
an binary array nums and an integer k, return true if all 1's are at least k places away from each other, otherwise return false.
a class to find the kth largest element in a stream. note that it is the kth largest element in the sorted order, not the kth distinct element.
kthlargest class:
k, int[] nums) initializes the object with the integer k and the stream of integers nums.
add(int val) appends the integer val to the stream and returns the element representing the kth largest element in the stream.
two arrays of unique digits nums1 and nums2, return the smallest number that contains at least one digit from each array.
are given a string s containing lowercase letters and an integer k. you need to :
change some characters of s to other lowercase english letters.
divide s into k non-empty disjoint substrings such that each substring is a palindrome.
the minimal number of characters that you need to change to divide the string.
are playing the bulls and cows game with your friend.
write down a secret number and ask your friend to guess what the number is. when your friend makes a guess, you provide a hint with the following info:
number of "bulls", which are digits in the guess that are in the correct position.
number of "cows", which are digits in the guess that are in your secret number but are located in the wrong position. specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.
the secret number secret and your friend's guess guess, return the hint for your friend's guess.
hint should be formatted as "xayb", where x is the number of bulls and y is the number of cows. note that both secret and guess may contain duplicate digits.
are given an integer array nums and an integer k. you want to find a subsequence of nums of length k that has the largest sum.
any such subsequence as an integer array of length k.
subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
are given a 0-indexed string s of even length n. the string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'.
string is called balanced if and only if:
is the empty string, or
can be written as ab, where both a and b are balanced strings, or
can be written as [c], where c is a balanced string.
may swap the brackets at any two indices any number of times.
the minimum number of swaps to make s balanced.
string is considered beautiful if it satisfies the following conditions:
of the 5 english vowels ('a', 'e', 'i', 'o', 'u') must appear at least once in it.
letters must be sorted in alphabetical order (i.e. all 'a's before 'e's, all 'e's before 'i's, etc.).
example, strings "aeiou" and "aaaaaaeiiiioou" are considered beautiful, but "uaeio", "aeoiu", and "aaaeeeooo" are not beautiful.
a string word consisting of english vowels, return the length of the longest beautiful substring of word. if no such substring exists, return 0.
substring is a contiguous sequence of characters in a string.
a non-negative integer x, return the square root of x rounded down to the nearest integer. the returned integer should be non-negative as well.
must not use any built-in exponent function or operator.
example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.
and bob take turns playing a game, with alice starting first.
are n stones in a pile. on each player's turn, they can remove a stone from the pile and receive points based on the stone's value. alice and bob may value the stones differently.
are given two integer arrays of length n, alicevalues and bobvalues. each alicevalues[i] and bobvalues[i] represents how alice and bob, respectively, value the ith stone.
winner is the person with the most points after all the stones are chosen. if both players have the same amount of points, the game results in a draw. both players will play optimally. both players know the other's values.
the result of the game, and:
alice wins, return 1.
bob wins, return -1.
the game results in a draw, return 0.
an array of strings words representing an english dictionary, return the longest word in words that can be built one character at a time by other words in words.
there is more than one possible answer, return the longest word with the smallest lexicographical order. if there is no answer, return the empty string.
that the word should be built from left to right with each additional character being added to the end of a previous word.
are given an integer array bloomday, an integer m and an integer k.
want to make m bouquets. to make a bouquet, you need to use k adjacent flowers from the garden.
garden consists of n flowers, the ith flower will bloom in the bloomday[i] and then can be used in exactly one bouquet.
the minimum number of days you need to wait to be able to make m bouquets from the garden. if it is impossible to make m bouquets return -1.
demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. the dungeon consists of m x n rooms laid out in a 2d grid. our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.
knight has an initial health point represented by a positive integer. if at any point his health point drops to 0 or below, he dies immediately.
of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).
reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.
the knight's minimum initial health so that he can rescue the princess.
that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.
are given a string s consisting only of the characters '0' and '1'. in one operation, you can change any '0' to '1' or vice versa.
string is called alternating if no two adjacent characters are equal. for example, the string "010" is alternating, while the string "0100" is not.
the minimum number of operations needed to make s alternating.
an array of positive integers nums and a positive integer target, return the minimal length of a

sum is greater than or equal to target. if there is no such subarray, return 0 instead.
are given a 0-indexed m x n matrix grid consisting of positive integers.
can start at any cell in the first column of the matrix, and traverse the grid in the following way:
a cell (row, col), you can move to any of the cells: (row - 1, col + 1), (row, col + 1) and (row + 1, col + 1) such that the value of the cell you move to, should be strictly bigger than the value of the current cell.
the maximum number of moves that you can perform.
a string s containing an out-of-order english representation of digits 0-9, return the digits in ascending order.
schema
teacher

column name | type |

teacher_id | int |
subject_id | int |
dept_id | int |

dept_id) is the primary key for this table.
row in this table indicates that the teacher with teacher_id teaches the subject subject_id in the department dept_id.
an sql query to report the number of unique subjects each teacher teaches in the university.
the result table in any order.
query result format is shown in the following example.
have n packages that you are trying to place in boxes, one package in each box. there are m suppliers that each produce boxes of different sizes (with infinite supply). a package can be placed in a box if the size of the package is less than or equal to the size of the box.
package sizes are given as an integer array packages, where packages[i] is the size of the ith package. the suppliers are given as a 2d integer array boxes, where boxes[j] is an array of box sizes that the jth supplier produces.
want to choose a single supplier and use boxes from them such that the total wasted space is minimized. for each package in a box, we define the space wasted to be size of the box - size of the package. the total wasted space is the sum of the space wasted in all the boxes.
example, if you have to fit packages with sizes [2,3,5] and the supplier offers boxes of sizes [4,8], you can fit the packages of size-2 and size-3 into two boxes of size-4 and the package with size-5 into a box of size-8. this would result in a waste of (4-2) + (4-3) + (8-5) = 6.
the minimum total wasted space by choosing the box supplier optimally, or -1 if it is impossible to fit all the packages inside boxes. since the answer may be large, return it modulo 109 + 7.
an integer array nums, rotate the array to the right by k steps, where k is non-negative.
people repeat letters to represent extra feeling. for example:
-> "heeellooo"
-> "hiiii"
these strings like "heeellooo", we have groups of adjacent letters that are all the same: "h", "eee", "ll", "ooo".
are given a string s and an array of query strings words. a query word is stretchy if it can be made to be equal to s by any number of applications of the following extension operation: choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is three or more.
example, starting with "hello", we could do an extension on the group "o" to get "hellooo", but we cannot get "helloo" since the group "oo" has a size less than three. also, we could do another extension like "ll" -> "lllll" to get "helllllooo". if s = "helllllooo", then the query word "hello" would be stretchy because of these two extension operations: query = "hello" -> "hellooo" -> "helllllooo" = s.
the number of query strings that are stretchy.
a string s, return the
smallest

s that contains all the distinct characters of s exactly once.
are given an array points where points[i] = [xi, yi] is the coordinates of the ith point on a 2d plane. multiple points can have the same coordinates.
are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj.
each query queries[j], compute the number of points inside the jth circle. points on the border of the circle are considered inside.
an array answer, where answer[j] is the answer to the jth query.
pair sum of a pair (a,b) is equal to a + b. the maximum pair sum is the largest pair sum in a list of pairs.
example, if we have pairs (1,5), (2,3), and (4,4), the maximum pair sum would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8.
an array nums of even length n, pair up the elements of nums into n / 2 pairs such that:
element of nums is in exactly one pair, and
maximum pair sum is minimized.
the minimized maximum pair sum after optimally pairing up the elements.
square matrix is said to be an x-matrix if both of the following conditions hold:
the elements in the diagonals of the matrix are non-zero.
other elements are 0.
a 2d integer array grid of size n x n representing a square matrix, return true if grid is an x-matrix. otherwise, return false.
are n couples sitting in 2n seats arranged in a row and want to hold hands.
people and seats are represented by an integer array row where row[i] is the id of the person sitting in the ith seat. the couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1).
the minimum number of swaps so that every couple is sitting side by side. a swap consists of choosing any two people, then they stand up and switch seats.
is an undirected graph with n nodes, numbered from 0 to n - 1.
are given a 0-indexed integer array scores of length n where scores[i] denotes the score of node i. you are also given a 2d integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.
node sequence is valid if it meets the following conditions:
is an edge connecting every pair of adjacent nodes in the sequence.
node appears more than once in the sequence.
score of a node sequence is defined as the sum of the scores of the nodes in the sequence.
the maximum score of a valid node sequence with a length of 4. if no such sequence exists, return -1.
are given a large sample of integers in the range [0, 255]. since the sample is so large, it is represented by an array count where count[k] is the number of times that k appears in the sample.
the following statistics:
the minimum element in the sample.
the maximum element in the sample.
the average of the sample, calculated as the total sum of all elements divided by the total number of elements.

the sample has an odd number of elements, then the median is the middle element once the sample is sorted.
the sample has an even number of elements, then the median is the average of the two middle elements once the sample is sorted.
the number that appears the most in the sample. it is guaranteed to be unique.
the statistics of the sample as an array of floating-point numbers [minimum, maximum, mean, median, mode]. answers within 10-5 of the actual answer will be accepted.
an array of integers arr and two integers k and threshold, return the number of sub-arrays of size k and average greater than or equal to threshold.
is a programming language with only four operations and one variable x:
and x++ increments the value of the variable x by 1.
and x-- decrements the value of the variable x by 1.
the value of x is 0.
an array of strings operations containing a list of operations, return the final value of x after performing all the operations.
website domain "discuss.leetcode.com" consists of various subdomains. at the top level, we have "com", at the next level, we have "leetcode.com" and at the lowest level, "discuss.leetcode.com". when we visit a domain like "discuss.leetcode.com", we will also visit the parent domains "leetcode.com" and "com" implicitly.
count-paired domain is a domain that has one of the two formats "rep d1.d2.d3" or "rep d1.d2" where rep is the number of visits to the domain and d1.d2.d3 is the domain itself.
example, "9001 discuss.leetcode.com" is a count-paired domain that indicates that discuss.leetcode.com was visited 9001 times.
an array of count-paired domains cpdomains, return an array of the count-paired domains of each subdomain in the input. you may return the answer in any order.
an array of integers cost and an integer target, return the maximum integer you can paint under the following rules:
cost of painting a digit (i + 1) is given by cost[i] (0-indexed).
total cost used must be equal to target.
integer does not have 0 digits.
the answer may be very large, return it as a string. if there is no way to paint any integer given the condition, return "0".
are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).
rain starts to fall. at time t, the depth of the water everywhere is t. you can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. you can swim infinite distances in zero time. of course, you must stay within the boundaries of the grid during your swim.
the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).
respect to a given puzzle string, a word is valid if both the following conditions are satisfied:
contains the first letter of puzzle.
each letter in word, that letter is in puzzle.
example, if the puzzle is "abcdefg", then valid words are "faced", "cabbage", and "baggage", while
words are "beefed" (does not include 'a') and "based" (includes 's' which is not in the puzzle).
an array answer, where answer[i] is the number of words in the given word list words that is valid with respect to the puzzle puzzles[i].
an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
target is not found in the array, return [-1, -1].
must write an algorithm with o(log n) runtime complexity.
a data structure that efficiently finds the majority element of a given subarray.
majority element of a subarray is an element that occurs threshold times or more in the subarray.
the majoritychecker class:
arr) initializes the instance of the class with the given array arr.
query(int left, int right, int threshold) returns the element in the subarray arr[left...right] that occurs at least threshold times, or -1 if no such element exists.
are given an array coordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. check if these points make a straight line in the xy plane.
1:
coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
true
2:
coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]
false

<= coordinates.length <= 1000
== 2
<= coordinates[i][0], coordinates[i][1] <= 10^4
contains no duplicate point.
are given a 0-indexed integer array nums consisting of 3 * n elements.
are allowed to remove any subsequence of elements of size exactly n from nums. the remaining 2 * n elements will be divided into two equal parts:
first n elements belonging to the first part and their sum is sumfirst.
next n elements belonging to the second part and their sum is sumsecond.
difference in sums of the two parts is denoted as sumfirst - sumsecond.
example, if sumfirst = 3 and sumsecond = 2, their difference is 1.
if sumfirst = 2 and sumsecond = 3, their difference is -1.
the minimum difference possible between the sums of the two parts after the removal of n elements.
are given an array of n integers, nums, where there are at most 50 unique values in the array. you are also given an array of m customer order quantities, quantity, where quantity[i] is the amount of integers the ith customer ordered. determine if it is possible to distribute nums such that:
ith customer gets exactly quantity[i] integers,
integers the ith customer gets are all equal, and
customer is satisfied.
true if it is possible to distribute nums according to the above conditions.
are given an array of strings words and a string chars.
string is good if it can be formed by characters from chars (each character can only be used once).
the sum of lengths of all good strings in words.
a function fn, return a memoized version of that function.
memoized function is a function that will never be called twice with the same inputs. instead it will return a cached value.
can be any function and there are no constraints on what type of values it accepts. inputs are considered identical if they are === to each other.
an array of strings words and a width maxwidth, format the text such that each line has exactly maxwidth characters and is fully (left and right) justified.
should pack your words in a greedy approach; that is, pack as many words as you can in each line. pad extra spaces ' ' when necessary so that each line has exactly maxwidth characters.
spaces between words should be distributed as evenly as possible. if the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.
the last line of text, it should be left-justified, and no extra space is inserted between words.

word is defined as a character sequence consisting of non-space characters only.
word's length is guaranteed to be greater than 0 and not exceed maxwidth.
input array words contains at least one word.
is a 0-indexed array nums of length n. initially, all elements are uncolored (has a value of 0).
are given a 2d integer array queries where queries[i] = [indexi, colori].
each query, you color the index indexi with the color colori in the array nums.
an array answer of the same length as queries where answer[i] is the number of adjacent elements with the same color after the ith query.
formally, answer[i] is the number of indices j, such that 0 <= j < n - 1 and nums[j] == nums[j + 1] and nums[j] != 0 after the ith query.
an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. if there are multiple answers, you may return any of them.
an array of integers arr and an integer k.
value arr[i] is said to be stronger than a value arr[j] if |arr[i] - m| > |arr[j] - m| where m is the median of the array.
|arr[i] - m| == |arr[j] - m|, then arr[i] is said to be stronger than arr[j] if arr[i] > arr[j].
a list of the strongest k values in the array. return the answer in any arbitrary order.
is the middle value in an ordered integer list. more formally, if the length of the list is n, the median is the element in position ((n - 1) / 2) in the sorted list (0-indexed).
arr = [6, -3, 7, 2, 11], n = 5 and the median is obtained by sorting the array arr = [-3, 2, 6, 7, 11] and the median is arr[m] where m = ((5 - 1) / 2) = 2. the median is 6.
arr = [-7, 22, 17,â3], n = 4 and the median is obtained by sorting the array arr = [-7, 3, 17, 22] and the median is arr[m] where m = ((4 - 1) / 2) = 1. the median is 3.
are given a 0-indexed string s that has lowercase english letters in its even indices and digits in its odd indices.
is a function shift(c, x), where c is a character and x is a digit, that returns the xth character after c.
example, shift('a', 5) = 'f' and shift('x', 0) = 'x'.
every odd index i, you want to replace the digit s[i] with shift(s[i-1], s[i]).
s after replacing all digits. it is guaranteed that shift(s[i-1], s[i]) will never exceed 'z'.
are given a circle represented as (radius, xcenter, ycenter) and an axis-aligned rectangle represented as (x1, y1, x2, y2), where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the rectangle.
true if the circle and rectangle are overlapped otherwise return false. in other words, check if there is any point (xi, yi) that belongs to the circle and the rectangle at the same time.
is a malfunctioning keyboard where some letter keys do not work. all other keys on the keyboard work properly.
a string text of words separated by a single space (no leading or trailing spaces) and a string brokenletters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.
are given an array nums consisting of positive integers and an integer k.
the array into two ordered groups such that each element is in exactly one group. a partition is called great if the sum of elements of each group is greater than or equal to k.
the number of distinct great partitions. since the answer may be too large, return it modulo 109 + 7.
partitions are considered distinct if some element nums[i] is in different groups in the two partitions.
are given an array of integers nums represents the numbers written on a chalkboard.
and bob take turns erasing exactly one number from the chalkboard, with alice starting first. if erasing a number causes the bitwise xor of all the elements of the chalkboard to become 0, then that player loses. the bitwise xor of one element is that element itself, and the bitwise xor of no elements is 0.
if any player starts their turn with the bitwise xor of all the elements of the chalkboard equal to 0, then that player wins.
true if and only if alice wins the game, assuming both players play optimally.
is a knight on an n x n chessboard. in a valid configuration, the knight starts at the top-left cell of the board and visits every cell on the board exactly once.
are given an n x n integer matrix grid consisting of distinct integers from the range [0, n * n - 1] where grid[row][col] indicates that the cell (row, col) is the grid[row][col]th cell that the knight visited. the moves are 0-indexed.
true if grid represents a valid configuration of the knight's movements or false otherwise.
that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. the figure below illustrates all the possible eight moves of a knight from some cell.
the root of a binary search tree and an integer k, return true if there exist two elements in the bst such that their sum is equal to k, or false otherwise.
two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].
may return the answer in any order.
are given a rows x cols matrix grid representing a field of cherries where grid[i][j] represents the number of cherries that you can collect from the (i, j) cell.
have two robots that can collect cherries for you:
#1 is located at the top-left corner (0, 0), and
#2 is located at the top-right corner (0, cols - 1).
the maximum number of cherries collection using both robots by following the rules below:
a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).
any robot passes through a cell, it picks up all cherries, and the cell becomes an empty cell.
both robots stay in the same cell, only one takes the cherries.
robots cannot move outside of the grid at any moment.
robots should reach the bottom row in grid.
are installing a billboard and want it to have the largest height. the billboard will have two steel supports, one on each side. each steel support must be an equal height.
are given a collection of rods that can be welded together. for example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.
the largest possible height of your billboard installation. if you cannot support the billboard, return 0.
an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right].
test cases are generated so that the answer will fit in a 32-bit integer.
a 0-indexed integer array nums of size n containing all numbers from 1 to n, return the number of increasing quadruplets.
quadruplet (i, j, k, l) is increasing if:
<= i < j < k < l < n, and
< nums[k] < nums[j] < nums[l].
is a regular convex polygon with n vertices. the vertices are labeled from 0 to n - 1 in a clockwise direction, and each vertex has exactly one monkey. the following figure shows a convex polygon of 6 vertices.
monkey moves simultaneously to a neighboring vertex. a neighboring vertex for a vertex i can be:
vertex (i + 1) % n in the clockwise direction, or
vertex (i - 1 + n) % n in the counter-clockwise direction.
collision happens if at least two monkeys reside on the same vertex after the movement or intersect on an edge.
the number of ways the monkeys can move so that at least one collision happens. since the answer may be very large, return it modulo 109 + 7.
that each monkey can only move once.
two arrays of strings list1 and list2, find the common strings with the least index sum.
common string is a string that appeared in both list1 and list2.
common string with the least index sum is a common string such that if it appeared at list1[i] and list2[j] then i + j should be the minimum value among all the other common strings.
all the common strings with the least index sum. return the answer in any order.
an integer array arr of distinct integers and an integer k.
game will be played between the first two elements of the array (i.e. arr[0] and arr[1]). in each round of the game, we compare arr[0] with arr[1], the larger integer wins and remains at position 0, and the smaller integer moves to the end of the array. the game ends when an integer wins k consecutive rounds.
the integer which will win the game.
is guaranteed that there will be a winner of the game.
have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftchild[i] and rightchild[i], return true if and only if all the given nodes form exactly one valid binary tree.
node i has no left child then leftchild[i] will equal -1, similarly for the right child.
that the nodes have no values and that we only use the node numbers in this problem.
an integer num, repeatedly add all its digits until the result has only one digit, and return it.
an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. the bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).
true if all the rectangles together form an exact cover of a rectangular region.
are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
the number of combinations that make up that amount. if that amount of money cannot be made up by any combination of the coins, return 0.
may assume that you have an infinite number of each kind of coin.
answer is guaranteed to fit into a signed 32-bit integer.
two strings s and t, return true if s is a subsequence of t, or false otherwise.
subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).
have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: red, yellow, or green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).
n the number of rows of the grid, return the number of ways you can paint this grid. as the answer may grow large, the answer must be computed modulo 109 + 7.
a binary tree where node values are digits from 1 to 9. a path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.
the number of pseudo-palindromic paths going from the root node to leaf nodes.
are given a 0-indexed array of strings garbage where garbage[i] represents the assortment of garbage at the ith house. garbage[i] consists only of the characters 'm', 'p' and 'g' representing one unit of metal, paper and glass garbage respectively. picking up one unit of any type of garbage takes 1 minute.
are also given a 0-indexed integer array travel where travel[i] is the number of minutes needed to go from house i to house i + 1.
are three garbage trucks in the city, each responsible for picking up one type of garbage. each garbage truck starts at house 0 and must visit each house in order; however, they do not need to visit every house.
one garbage truck may be used at any given moment. while one truck is driving or picking up garbage, the other two trucks cannot do anything.
the minimum number of minutes needed to pick up all the garbage.
are participating in an online chess tournament. there is a chess round that starts every 15 minutes. the first round of the day starts at 00:00, and after every 15 minutes, a new round starts.
example, the second round starts at 00:15, the fourth round starts at 00:45, and the seventh round starts at 01:30.
are given two strings logintime and logouttime where:
is the time you will login to the game, and
is the time you will logout from the game.
logouttime is earlier than logintime, this means you have played from logintime to midnight and from midnight to logouttime.
the number of full chess rounds you have played in the tournament.
all the given times follow the 24-hour clock. that means the first round of the day starts at 00:00 and the last round of the day starts at 23:45.
are given two 0-indexed arrays nums1 and nums2 of length n, both of which are permutations of [0, 1, ..., n - 1].
good triplet is a set of 3 distinct values which are present in increasing order by position both in nums1 and nums2. in other words, if we consider pos1v as the index of the value v in nums1 and pos2v as the index of the value v in nums2, then a good triplet will be a set (x, y, z) where 0 <= x, y, z <= n - 1, such that pos1x < pos1y < pos1z and pos2x < pos2y < pos2z.
the total number of good triplets.
an integer array nums and an integer val, remove all occurrences of val in nums in-place. the order of the elements may be changed. then return the number of elements in nums which are not equal to val.
the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:
the array nums such that the first k elements of nums contain the elements which are not equal to val. the remaining elements of nums are not important as well as the size of nums.
k.
judge:
judge will test your solution with the following code:
nums = [...]; // input array
val = ...; // value to remove
expectednums = [...]; // the expected answer with correct length.
it is sorted with no values equaling val.

k = removeelement(nums, val); // calls your implementation

k == expectednums.length;
0, k); // sort the first k elements of nums
(int i = 0; i < actuallength; i++) {
nums[i] == expectednums[i];

all assertions pass, then your solution will be accepted.
schema
employees

column name | type |

id | int |
name | varchar |

is the primary key for this table.
row of this table contains the id and the name of an employee in a company.
employeeuni

column name | type |

id | int |
unique_id | int |

unique_id) is the primary key for this table.
row of this table contains the id and the corresponding unique id of an employee in the company.
an sql query to show the unique id of each user, if a user does not have a unique id replace just show null.
the result table in any order.
query result format is in the following example.
are a professional robber planning to rob houses along a street. each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.
an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.
appeal of a string is the number of distinct characters found in the string.
example, the appeal of "abbca" is 3 because it has 3 distinct characters: 'a', 'b', and 'c'.
a string s, return the total appeal of all of its substrings.
substring is a contiguous sequence of characters within a string.
are given a 0-indexed integer array nums containing distinct numbers, an integer start, and an integer goal. there is an integer x that is initially set to start, and you want to perform operations on x such that it is converted to goal. you can perform the following operation repeatedly on the number x:
0 <= x <= 1000, then for any index i in the array (0 <= i < nums.length), you can set x to any of the following:
+ nums[i]
- nums[i]
^ nums[i] (bitwise-xor)
that you can use each nums[i] any number of times in any order. operations that set x to be out of the range 0 <= x <= 1000 are valid, but no more operations can be done afterward.
the minimum number of operations needed to convert x = start into goal, and -1 if it is not possible.
are given a string s that consists of only digits.
if we can split s into two or more non-empty substrings such that the numerical values of the substrings are in descending order and the difference between numerical values of every two adjacent substrings is equal to 1.
example, the string s = "0090089" can be split into ["0090", "089"] with numerical values [90,89]. the values are in descending order and adjacent values differ by 1, so this way is valid.
example, the string s = "001" can be split into ["0", "01"], ["00", "1"], or ["0", "0", "1"]. however all the ways are invalid because they have numerical values [0,1], [0,1], and [0,0,1] respectively, all of which are not in descending order.
true if it is possible to split s as described above, or false otherwise.
substring is a contiguous sequence of characters in a string.
define str = [s, n] as the string str which consists of the string s concatenated n times.
example, str == ["abc", 3] =="abcabcabc".
define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.
example, s1 = "abc" can be obtained from s2 = "abdbec" based on our definition by removing the bolded underlined characters.
are given two strings s1 and s2 and two integers n1 and n2. you have the two strings str1 = [s1, n1] and str2 = [s2, n2].
the maximum integer m such that str = [str2, m] can be obtained from str1.
are playing a video game where you are defending your city from a group of n monsters. you are given a 0-indexed integer array dist of size n, where dist[i] is the initial distance in kilometers of the ith monster from the city.
monsters walk toward the city at a constant speed. the speed of each monster is given to you in an integer array speed of size n, where speed[i] is the speed of the ith monster in kilometers per minute.
have a weapon that, once fully charged, can eliminate a single monster. however, the weapon takes one minute to charge.the weapon is fully charged at the very start.
lose when any monster reaches your city. if a monster reaches the city at the exact moment the weapon is fully charged, it counts as a loss, and the game ends before you can use your weapon.
the maximum number of monsters that you can eliminate before you lose, or n if you can eliminate all the monsters before they reach the city.
are given an integer array nums and an integer target.
want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.
example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
the number of different expressions that you can build, which evaluates to target.
an n*n grid, there is a snake that spans 2 cells and starts moving from the top left corner at (0, 0) and (0, 1). the grid has empty cells represented by zeros and blocked cells represented by ones. the snake wants to reach the lower right corner at (n-1, n-2) and (n-1, n-1).
one move the snake can:
one cell to the right if there are no blocked cells there. this move keeps the horizontal/vertical position of the snake as it is.
down one cell if there are no blocked cells there. this move keeps the horizontal/vertical position of the snake as it is.
clockwise if it's in a horizontal position and the two cells under it are both empty. in that case the snake moves from (r, c) and (r, c+1) to (r, c) and (r+1, c).
counterclockwise if it's in a vertical position and the two cells to its right are both empty. in that case the snake moves from (r, c) and (r+1, c) to (r, c) and (r, c+1).
the minimum number of moves to reach the target.
there is no way to reach the target, return -1.
are given an array of integers stones where stones[i] is the weight of the ith stone.
are playing a game with the stones. on each turn, we choose the heaviest two stones and smash them together. suppose the heaviest two stones have weights x and y with x <= y. the result of this smash is:
x == y, both stones are destroyed, and
x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
the end of the game, there is at most one stone left.
the weight of the last remaining stone. if there are no stones left, return 0.
are given a binary matrix matrix of size m x n, and you are allowed to rearrange the columns of the matrix in any order.
the area of the largest submatrix within matrix where every element of the submatrix is 1 after reordering the columns optimally.
are given the root of a binary tree.
zigzag path for a binary tree is defined as follow:
any node in the binary tree and a direction (right or left).
the current direction is right, move to the right child of the current node; otherwise, move to the left child.
the direction from right to left or from left to right.
the second and third steps until you can't move in the tree.
length is defined as the number of nodes visited - 1. (a single node has a length of 0).
the longest zigzag path contained in that tree.
is a class with m students and n exams. you are given a 0-indexed m x n integer matrix score, where each row represents one student and score[i][j] denotes the score the ith student got in the jth exam. the matrix score contains distinct integers only.
are also given an integer k. sort the students (i.e., the rows of the matrix) by their scores in the kth (0-indexed) exam from the highest to the lowest.
the matrix after sorting it.
is a special square room with mirrors on each of the four walls. except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.
square room has walls of length p and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor.
the two integers p and q, return the number of the receptor that the ray meets first.
test cases are guaranteed so that the ray will meet a receptor eventually.
schema
scores

column name | type |

id | int |
score | decimal |

is the primary key for this table.
row of this table contains the score of a game. score is a floating point value with two decimal places.
an sql query to rank the scores. the ranking should be calculated according to the following rules:
scores should be ranked from the highest to the lowest.
there is a tie between two scores, both should have the same ranking.
a tie, the next ranking number should be the next consecutive integer value. in other words, there should be no holes between ranks.
the result table ordered by score in descending order.
query result format is in the following example.
a balanced parentheses string s, return the score of the string.
score of a balanced parentheses string is based on the following rule:
has score 1.
has score a + b, where a and b are balanced parentheses strings.
has score 2 * a, where a is a balanced parentheses string.
are given an array of words where each word consists of lowercase english letters.
is a predecessor of wordb if and only if we can insert exactly one letter anywhere in worda without changing the order of the other characters to make it equal to wordb.
example, "abc" is a predecessor of "abac", while "cba" is not a predecessor of "bcad".
word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. a single word is trivially a word chain with k == 1.
the length of the longest possible word chain with words chosen from the given list of words.
two binary search trees root1 and root2, return a list containing all the integers from both trees sorted in ascending order.
are given an array of integers arr and an integer target.
have to find two non-overlapping sub-arrays of arr each with a sum equal target. there can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.
the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.
an integer array nums and two integers k and p, return the number of distinct subarrays which have at most k elements divisible by p.
arrays nums1 and nums2 are said to be distinct if:
are of different lengths, or
exists at least one index i where nums1[i] != nums2[i].
subarray is defined as a non-empty contiguous sequence of elements in an array.
are given a 2d integer array stockprices where stockprices[i] = [dayi, pricei] indicates the price of the stock on day dayi is pricei. a line chart is created from the array by plotting the points on an xy plane with the x-axis representing the day and the y-axis representing the price and connecting adjacent points. one such example is shown below:
the minimum number of lines needed to represent the line chart.
are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [ai, bi] and values[i] represent the equation ai / bi = values[i]. each ai or bi is a string that represents a single variable.
are also given some queries, where queries[j] = [cj, dj] represents the jth query where you must find the answer for cj / dj = ?.
the answers to all queries. if a single answer cannot be determined, return -1.0.
the input is always valid. you may assume that evaluating the queries will not result in division by zero and that there is no contradiction.
string is good if there are no repeated characters.
a string s, return the number of good substrings of length three in s.
that if there are multiple occurrences of the same substring, every occurrence should be counted.
substring is a contiguous sequence of characters in a string.
are given a valid boolean expression as a string expression consisting of the characters '1','0','&' (bitwise and operator),'|' (bitwise or operator),'(', and ')'.
example, "()1|1" and "(1)&()" are not valid while "1", "(((1))|(0))", and "1|(0&(1))" are valid expressions.
the minimum cost to change the final value of the expression.
example, if expression = "1|1|(0&0)&1", its value is 1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1. we want to apply operations so that the new expression evaluates to 0.
cost of changing the final value of an expression is the number of operations performed on the expression. the types of operations are described as follows:
a '1' into a '0'.
a '0' into a '1'.
a '&' into a '|'.
a '|' into a '&'.
'&' does not take precedence over '|' in the order of calculation. evaluate parentheses first, then in left-to-right order.
are given an array of events where events[i] = [startdayi, enddayi, valuei]. the ith event starts at startdayi and ends at enddayi, and if you attend this event, you will receive a value of valuei. you are also given an integer k which represents the maximum number of events you can attend.
can only attend one event at a time. if you choose to attend an event, you must attend the entire event. note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day.
the maximum sum of values that you can receive by attending events.
are given two string arrays creators and ids, and an integer array views, all of length n. the ith video on a platform was created by creator[i], has an id of ids[i], and has views[i] views.
popularity of a creator is the sum of the number of views on all of the creator's videos. find the creator with the highest popularity and the id of their most viewed video.
multiple creators have the highest popularity, find all of them.
multiple videos have the highest view count for a creator, find the lexicographically smallest id.
a 2d array of strings answer where answer[i] = [creatori, idi] means that creatori has the highest popularity and idi is the id of their most popular video. the answer can be returned in any order.
a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. if no such positive integer exists, return -1.
that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.
a 2d integer array matrix, return the transpose of matrix.
transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.
are given two integers m and n that represent the height and width of a rectangular piece of wood. you are also given a 2d integer array prices, where prices[i] = [hi, wi, pricei] indicates you can sell a rectangular piece of wood of height hi and width wi for pricei dollars.
cut a piece of wood, you must make a vertical or horizontal cut across the entire height or width of the piece to split it into two smaller pieces. after cutting a piece of wood into some number of smaller pieces, you can sell pieces according to prices. you may sell multiple pieces of the same shape, and you do not have to sell all the shapes. the grain of the wood makes a difference, so you cannot rotate a piece to swap its height and width.
the maximum money you can earn after cutting an m x n piece of wood.
that you can cut the piece of wood as many times as you want.
are given a 2d integer array items where items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively.
are also given a 0-indexed integer array queries. for each queries[j], you want to determine the maximum beauty of an item whose price is less than or equal to queries[j]. if no such item exists, then the answer to this query is 0.
an array answer of the same length as queries where answer[j] is the answer to the jth query.
an array of integers nums and a positive integer k, check whether it is possible to divide this array into sets of k consecutive numbers.
true if it is possible. otherwise, return false.
string is beautiful if:
consists of the first k letters of the english lowercase alphabet.
does not contain any substring of length 2 or more which is a palindrome.
are given a beautiful string s of length n and a positive integer k.
the lexicographically smallest string of length n, which is larger than s and is beautiful. if there is no such string, return an empty string.
string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b.
example, "abcd" is lexicographically larger than "abcc" because the first position they differ is at the fourth character, and d is greater than c.
two integers representing the numerator and denominator of a fraction, return the fraction in string format.
the fractional part is repeating, enclose the repeating part in parentheses.
multiple answers are possible, return any of them.
is guaranteed that the length of the answer string is less than 104 for all the given inputs.
a string s. in one step you can insert any character at any index of the string.
the minimum number of steps to make s palindrome.
palindrome string is one that reads the same backward as well as forward.
three integer arrays nums1, nums2, and nums3, return a distinct array containing all the values that are present in at least two out of the three arrays. you may return the values in any order.
is a 2d grid of size n x n where each cell of this grid has a lamp that is initially turned off.
are given a 2d array of lamp positions lamps, where lamps[i] = [rowi, coli] indicates that the lamp at grid[rowi][coli] is turned on. even if the same lamp is listed more than once, it is turned on.
a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal.
are also given another 2d array queries, where queries[j] = [rowj, colj]. for the jth query, determine whether grid[rowj][colj] is illuminated or not. after answering the jth query, turn off the lamp at grid[rowj][colj] and its 8 adjacent lamps if they exist. a lamp is adjacent if its cell shares either a side or corner with grid[rowj][colj].
an array of integers ans, where ans[j] should be 1 if the cell in the jth query was illuminated, or 0 if the lamp was not.
company is organizing a meeting and has a list of n employees, waiting to be invited. they have arranged for a large circular table, capable of seating any number of employees.
employees are numbered from 0 to n - 1. each employee has a favorite person and they will attend the meeting only if they can sit next to their favorite person at the table. the favorite person of an employee is not themself.
a 0-indexed integer array favorite, where favorite[i] denotes the favorite person of the ith employee, return the maximum number of employees that can be invited to the meeting.
are given two integer arrays, source and target, both of length n. you are also given an array allowedswaps where each allowedswaps[i] = [ai, bi] indicates that you are allowed to swap the elements at index ai and index bi (0-indexed) of array source. note that you can swap elements at a specific pair of indices multiple times and in any order.
hamming distance of two arrays of the same length, source and target, is the number of positions where the elements are different. formally, it is the number of indices i for 0 <= i <= n-1 where source[i] != target[i] (0-indexed).
the minimum hamming distance of source and target after performing any amount of swap operations on array source.
are given an integer array nums. we call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.
example, if nums = [1, 2, 3, 4]:
3], [1, 2, 3], and [1, 3] are good subsets with products 6 = 2*3, 6 = 2*3, and 3 = 3 respectively.
4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively.
the number of different good subsets in nums modulo 109 + 7.
subset of nums is any array that can be obtained by deleting some (possibly none or all) elements from nums. two subsets are different if and only if the chosen indices to delete are different.
two strings a and b, return the length of the longest uncommon subsequence between a and b. if the longest uncommon subsequence does not exist, return -1.
uncommon subsequence between two strings is a string that is a subsequence of one but not the other.
subsequence of a string s is a string that can be obtained after deleting any number of characters from s.
example, "abc" is a subsequence of "aebdc" because you can delete the underlined characters in "aebdc" to get "abc". other subsequences of "aebdc" include "aebdc", "aeb", and "" (empty string).
an integer array nums, find the maximum possible bitwise or of a subset of nums and return the number of different non-empty subsets with the maximum bitwise or.
array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b. two subsets are considered different if the indices of the elements chosen are different.
bitwise or of an array a is equal to a[0] or a[1] or ... or a[a.length - 1] (0-indexed).
undirected graph of n nodes is defined by edgelist, where edgelist[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi. note that there may be multiple edges between two nodes.
an array queries, where queries[j] = [pj, qj, limitj], your task is to determine for each queries[j] whether there is a path between pj and qj such that each edge on the path has a distance strictly less than limitj .
a boolean array answer, where answer.length == queries.length and the jth value of answer is true if there is a path for queries[j] is true, and false otherwise.
had a 0-indexed array arr consisting of n positive integers. she chose an arbitrary positive integer k and created two new 0-indexed integer arrays lower and higher in the following manner:
= arr[i] - k, for every index i where 0 <= i < n
= arr[i] + k, for every index i where 0 <= i < n
alice lost all three arrays. however, she remembers the integers that were present in the arrays lower and higher, but not the array each integer belonged to. help alice and recover the original array.
an array nums consisting of 2n integers, where exactly n of the integers were present in lower and the remaining in higher, return the original array arr. in case the answer is not unique, return any valid array.
the test cases are generated such that there exists at least one valid array arr.
two positive integers n and k, the binary string sn is formed as follows:
= "0"
= si - 1 + "1" + reverse(invert(si - 1)) for i > 1
+ denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).
example, the first four strings in the above sequence are:
= "0"
= "011"
= "0111001"
= "011100110110001"
the kth bit in sn. it is guaranteed that k is valid for the given n.
product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).
example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) = 16.
an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.
the maximum such product difference.
a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.
two integer arrays nums1 and nums2, sorted in non-decreasing order, return the minimum integer common to both arrays. if there is no common integer amongst nums1 and nums2, return -1.
that an integer is said to be common to nums1 and nums2 if both arrays have at least one occurrence of that integer.
leetcode file system keeps a log each time some user performs a change folder operation.
operations are described below:
: move to the parent folder of the current folder. (if you are already in the main folder, remain in the same folder).
: remain in the same folder.
: move to the child folder named x (this folder is guaranteed to always exist).
are given a list of strings logs where logs[i] is the operation performed by the user at the ith step.
file system starts in the main folder, then the operations in logs are performed.
the minimum number of operations needed to go back to the main folder after the change folder operations.
have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e., 0 <= i < n).
one operation, you can select two indices x and y where 0 <= x, y < n and subtract 1 from arr[x] and add 1 to arr[y] (i.e., perform arr[x] -=1 and arr[y] += 1). the goal is to make all the elements of the array equal. it is guaranteed that all the elements of the array can be made equal using some operations.
an integer n, the length of the array, return the minimum number of operations needed to make all the elements of arr equal.
a string s containing only lowercase english letters and the '?' character, convert all the '?' characters into lowercase letters such that the final string does not contain any consecutive repeating characters. you cannot modify the non '?' characters.
is guaranteed that there are no consecutive repeating characters in the given string except for '?'.
the final string after all the conversions (possibly zero) have been made. if there is more than one solution, return any of them. it can be shown that an answer is always possible with the given constraints.
are given an array of strings names, and an array heights that consists of distinct positive integers. both arrays are of length n.
each index i, names[i] and heights[i] denote the name and height of the ith person.
names sorted in descending order by the people's heights.
are given an integer array nums and an integer goal.
want to choose a subsequence of nums such that the sum of its elements is the closest possible to goal. that is, if the sum of the subsequence's elements is sum, then you want to minimize the absolute difference abs(sum - goal).
the minimum possible value of abs(sum - goal).
that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.
are given an integer array nums and an integer k.
the array into some number of non-empty subarrays. the cost of a split is the sum of the importance value of each subarray in the split.
trimmed(subarray) be the version of the subarray where all numbers which appear only once are removed.
example, trimmed([3,1,2,4,3,4]) = [3,4,3,4].
importance value of a subarray is k + trimmed(subarray).length.
example, if a subarray is [1,2,3,3,3,4,4], then trimmed([1,2,3,3,3,4,4]) = [3,3,3,4,4].the importance value of this subarray will be k + 5.
the minimum possible cost of a split of nums.
subarray is a contiguous non-empty sequence of elements within an array.
have an undirected, connected graph of n nodes labeled from 0 to n - 1. you are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.
the length of the shortest path that visits every node. you may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.
are given a 0-indexed integer array nums, where nums[i] is a digit between 0 and 9 (inclusive).
triangular sum of nums is the value of the only element present in nums after the following process terminates:
nums comprise of n elements. if n == 1, end the process. otherwise, create a new 0-indexed integer array newnums of length n - 1.
each index i, where 0 <= i < n - 1, assign the value of newnums[i] as (nums[i] + nums[i+1]) % 10, where % denotes modulo operator.
the array nums with newnums.
the entire process starting from step 1.
the triangular sum of nums.
are given an array of k linked-lists lists, each linked-list is sorted in ascending order.
all the linked-lists into one sorted linked-list and return it.
is a directed graph of n nodes with each node labeled from 0 to n - 1. the graph is represented by a 0-indexed 2d integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].
node is a terminal node if there are no outgoing edges. a node is a safe node if every possible path starting from that node leads to a terminal node (or another safe node).
an array containing all the safe nodes of the graph. the answer should be sorted in ascending order.
an integer x, return true if x is a

and false otherwise.
is an undirected graph with n nodes numbered from 0 to n - 1 (inclusive). you are given a 0-indexed integer array values where values[i] is the value of the ith node. you are also given a 0-indexed 2d integer array edges, where each edges[j] = [uj, vj, timej] indicates that there is an undirected edge between the nodes uj and vj, and it takes timej seconds to travel between the two nodes. finally, you are given an integer maxtime.
valid path in the graph is any path that starts at node 0, ends at node 0, and takes at most maxtime seconds to complete. you may visit the same node multiple times. the quality of a valid path is the sum of the values of the unique nodes visited in the path (each node's value is added at most once to the sum).
the maximum quality of a valid path.
there are at most four edges connected to each node.
are given an integer array nums consisting of n elements, and an integer k.
a contiguous subarray whose length is equal to k that has the maximum average value and return this value. any answer with a calculation error less than 10-5 will be accepted.
are given a 0-indexed array nums of distinct integers. you want to rearrange the elements in the array such that every element in the rearranged array is not equal to the average of its neighbors.
formally, the rearranged array should have the property such that for every i in the range 1 <= i < nums.length - 1, (nums[i-1] + nums[i+1]) / 2 is not equal to nums[i].
any rearrangement of nums that meets the requirements.
are given a 0-indexed integer array nums.
effective value of three indices i, j, and k is defined as ((nums[i] | nums[j]) & nums[k]).
xor-beauty of the array is the xoring of the effective values of all the possible triplets of indices (i, j, k) where 0 <= i, j, k < n.
the xor-beauty of nums.
that:
| val2 is bitwise or of val1 and val2.
& val2 is bitwise and of val1 and val2.
is only one character 'a' on the screen of a notepad. you can perform one of two operations on this notepad for each step:
all: you can copy all the characters present on the screen (a partial copy is not allowed).
you can paste the characters which are copied last time.
an integer n, return the minimum number of operations to get the character 'a' exactly n times on the screen.
are given an array nums of positive integers. in one operation, you can choose any number from nums and reduce it to exactly half the number. (note that you may choose this reduced number in future operations.)
the minimum number of operations to reduce the sum of nums by at least half.
critical point in a linked list is defined as either a local maxima or a local minima.
node is a local maxima if the current node has a value strictly greater than the previous node and the next node.
node is a local minima if the current node has a value strictly smaller than the previous node and the next node.
that a node can only be a local maxima/minima if there exists both a previous node and a next node.
a linked list head, return an array of length 2 containing [mindistance, maxdistance] where mindistance is the minimum distance between any two distinct critical points and maxdistance is the maximum distance between any two distinct critical points. if there are fewer than two critical points, return [-1, -1].
are n dominoes in a line, and we place each domino vertically upright. in the beginning, we simultaneously push some of the dominoes either to the left or to the right.
each second, each domino that is falling to the left pushes the adjacent domino on the left. similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.
a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.
the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.
are given a string dominoes representing the initial state where:
= 'l', if the ith domino has been pushed to the left,
= 'r', if the ith domino has been pushed to the right, and
= '.', if the ith domino has not been pushed.
a string representing the final state.
a string s consisting only of characters a, b and c.
the number of substrings containing at least one occurrence of all these characters a, b and c.
string "paypalishiring" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)
a h n
p l s i i g
i r
then read line by line: "pahnaplsiigyir"
the code that will take a string and make this conversion given a number of rows:
convert(string s, int numrows);
is a set of n items. you are given two integer arrays values and labels where the value and the label of the ith element are values[i] and labels[i] respectively. you are also given two integers numwanted and uselimit.
a subset s of the n elements such that:
size of the subset s is less than or equal to numwanted.
are at most uselimit items with the same label in s.
score of a subset is the sum of the values in the subset.
the maximum score of a subset s.
two positive integers a and b, return the number of common factors of a and b.
integer x is a common factor of a and b if x divides both a and b.
are given two 0-indexed integer permutations a and b of length n.
prefix common array of a and b is an array c such that c[i] is equal to the count of numbers that are present at or before the index i in both a and b.
the prefix common array of a and b.
sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once.
are given two integers n and k and two integer arrays speed and efficiency both of length n. there are n engineers numbered from 1 to n. speed[i] and efficiency[i] represent the speed and efficiency of the ith engineer respectively.
at most k different engineers out of the n engineers to form a team with the maximum performance.
performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.
the maximum performance of this team. since the answer can be a huge number, return it modulo 109 + 7.
schema
customer

column name | type |

customer_id | int |
name | varchar |
visited_on | date |
amount | int |

visited_on) is the primary key for this table.
table contains data about customer transactions in a restaurant.
is the date on which the customer with id (customer_id) has visited the restaurant.
is the total paid by a customer.
are the restaurant owner and you want to analyze a possible expansion (there will be at least one customer every day).
an sql query to compute the moving average of how much the customer paid in a seven days window (i.e., current day + 6 days before). average_amount should be rounded to two decimal places.
result table ordered by visited_on in ascending order.
query result format is in the following example.
is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
an algorithm to serialize and deserialize a binary tree. there is no restriction on how your serialization/deserialization algorithm should work. you just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.
the input/output format is the same as how leetcode serializes a binary tree. you do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
are given a 0-indexed array nums of length n, consisting of non-negative integers. for each index i from 0 to n - 1, you must determine the size of the minimum sized non-empty subarray of nums starting at i (inclusive) that has the maximum possible bitwise or.
other words, let bij be the bitwise or of the subarray nums[i...j]. you need to find the smallest subarray starting at i, such that bitwise or of this subarray is equal to max(bik) where i <= k <= n - 1.
bitwise or of an array is the bitwise or of all the numbers in it.
an integer array answer of size n where answer[i] is the length of the minimum sized subarray starting at i with maximum bitwise or.
subarray is a contiguous non-empty sequence of elements within an array.
are given two 0-indexed integer arrays player1 and player2, that represent the number of pins that player 1 and player 2 hit in a bowling game, respectively.
bowling game consists of n turns, and the number of pins in each turn is exactly 10.
a player hit xi pins in the ith turn. the value of the ith turn for the player is:
if the player hit 10 pins in any of the previous two turns.
it is xi.
score of the player is the sum of the values of their n turns.

if the score of player 1 is more than the score of player 2,
if the score of player 2 is more than the score of player 1, and
in case of a draw.
string s is called good if there are no two different characters in s that have the same frequency.
a string s, return the minimum number of characters you need to delete to make s good.
frequency of a character in a string is the number of times it appears in the string. for example, in the string "aab", the frequency of 'a' is 2, while the frequency of 'b' is 1.
are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
the fewest number of coins that you need to make up that amount. if that amount of money cannot be made up by any combination of the coins, return -1.
may assume that you have an infinite number of each kind of coin.
are given a m x n matrix grid consisting of non-negative integers where grid[row][col] represents the minimum time required to be able to visit the cell (row, col), which means you can visit the cell (row, col) only when the time you visit it is greater than or equal to grid[row][col].
are standing in the top-left cell of the matrix in the 0th second, and you must move to any adjacent cell in the four directions: up, down, left, and right. each move you make takes 1 second.
the minimum time required in which you can visit the bottom-right cell of the matrix. if you cannot visit the bottom-right cell, then return -1.
are given a 0-indexed 8 x 8 grid board, where board[r][c] represents the cell (r, c) on a game board. on the board, free cells are represented by '.', white cells are represented by 'w', and black cells are represented by 'b'.
move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black). however, a move is only legal if, after changing it, the cell becomes the endpoint of a good line (horizontal, vertical, or diagonal).
good line is a line of three or more cells (including the endpoints) where the endpoints of the line are one color, and the remaining cells in the middle are the opposite color (no cells in the line are free). you can find examples for good lines in the figure below:
two integers rmove and cmove and a character color representing the color you are playing as (white or black), return true if changing cell (rmove, cmove) to color color is a legal move, or false if it is not legal.
a string composed of 'l', 'r', and 'x' characters, like "rxxlrxrxl", a move consists of either replacing one occurrence of "xl" with "lx", or replacing one occurrence of "rx" with "xr". given the starting string start and the ending string end, return true if and only if there exists a sequence of moves to transform one string to the other.
are given an integer n, the number of teams in a tournament that has strange rules:
the current number of teams is even, each team gets paired with another team. a total of n / 2 matches are played, and n / 2 teams advance to the next round.
the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. a total of (n - 1) / 2 matches are played, and (n - 1) / 2 + 1 teams advance to the next round.
the number of matches played in the tournament until a winner is decided.
strings are considered close if you can attain one from the other using the following operations:
1: swap any two existing characters.
example, abcde -> aecdb
2: transform every occurrence of one existing character into another existing character, and do the same with the other character.
example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)
can use the operations on either string as many times as necessary.
two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.
an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. find the two elements that appear only once. you can return the answer in any order.
must write an algorithm that runs in linear runtime complexity and uses only constant extra space.
an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
that the solution set must not contain duplicate triplets.
the head of a linked list, return the node where the cycle begins. if there is no cycle, return null.
is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). it is -1 if there is no cycle. note that pos is not passed as a parameter.
not modify the linked list.
an array of integers nums, sort the array in ascending order and return it.
must solve the problem without using any built-in functions in o(nlog(n)) time complexity and with the smallest space complexity possible.
are given an integer array nums where the ith bag contains nums[i] balls. you are also given an integer maxoperations.
can perform the following operation at most maxoperations times:
any bag of balls and divide it into two new bags with a positive number of balls.
example, a bag of 5 balls can become two new bags of 1 and 4 balls, or two new bags of 2 and 3 balls.
penalty is the maximum number of balls in a bag. you want to minimize your penalty after the operations.
the minimum possible penalty after performing the operations.
are given a 0-indexed integer array nums and an integer p. find p pairs of indices of nums such that the maximum difference amongst all the pairs is minimized. also, ensure no index appears more than once amongst the p pairs.
that for a pair of elements at the index i and j, the difference of this pair is |nums[i] - nums[j]|, where |x| represents the absolute value of x.
the minimum maximum difference among all p pairs. we define the maximum of an empty set to be zero.
are given a list of preferences for n friends, where n is always even.
each person i, preferences[i] contains a list of friends sorted in the order of preference. in other words, a friend earlier in the list is more preferred than a friend later in the list. friends in each list are denoted by integers from 0 to n-1.
the friends are divided into pairs. the pairings are given in a list pairs, where pairs[i] = [xi, yi] denotes xi is paired with yi and yi is paired with xi.
this pairing may cause some of the friends to be unhappy. a friend x is unhappy if x is paired with y and there exists a friend u who is paired with v but:
prefers u over y, and
prefers x over v.
the number of unhappy friends.
are given a 0-indexed integer array nums. an index i is part of a hill in nums if the closest non-equal neighbors of i are smaller than nums[i]. similarly, an index i is part of a valley in nums if the closest non-equal neighbors of i are larger than nums[i]. adjacent indices i and j are part of the same hill or valley if nums[i] == nums[j].
that for an index to be part of a hill or valley, it must have a non-equal neighbor on both the left and right of the index.
the number of hills and valleys in nums.
are given a positive integer n, that is initially placed on a board. every day, for 109 days, you perform the following procedure:
each number x present on the board, find all numbers 1 <= i <= n such that x % i == 1.
place those numbers on the board.
the number of distinct integers present on the board after 109 days have elapsed.

a number is placed on the board, it will remain on it until the end.
stands for the modulo operation. for example, 14 % 3 is 2.
is texting bob using her phone. the mapping of digits to letters is shown in the figure below.
order to add a letter, alice has to press the key of the corresponding digit i times, where i is the position of the letter in the key.
example, to add the letter 's', alice has to press '7' four times. similarly, to add the letter 'k', alice has to press '5' twice.
that the digits '0' and '1' do not map to any letters, so alice does not use them.
due to an error in transmission, bob did not receive alice's text message but received a string of pressed keys instead.
example, when alice sent the message "bob", bob received the string "2266622".
a string pressedkeys representing the string received by bob, return the total number of possible text messages alice could have sent.
the answer may be very large, return it modulo 109 + 7.
are given two positive integers left and right with left <= right. calculate the product of all integers in the inclusive range [left, right].
the product may be very large, you will abbreviate it following these steps:
all trailing zeros in the product and remove them. let us denote this count as c.
example, there are 3 trailing zeros in 1000, and there are 0 trailing zeros in 546.
the remaining number of digits in the product as d. if d > 10, then express the product as <pre>...<suf> where <pre> denotes the first 5 digits of the product, and <suf> denotes the last 5 digits of the product after removing all trailing zeros. if d <= 10, we keep it unchanged.
example, we express 1234567654321 as 12345...54321, but 1234567 is represented as 1234567.
represent the product as a string "<pre>...<suf>ec".
example, 12345678987600000 will be represented as "12345...89876e5".
a string denoting the abbreviated product of all integers in the inclusive range [left, right].
are given an integer array nums and an integer k. you are asked to distribute this array into k subsets of equal size such that there are no two equal elements in the same subset.
subset's incompatibility is the difference between the maximum and minimum elements in that array.
the minimum possible sum of incompatibilities of the k subsets after distributing the array optimally, or return -1 if it is not possible.
subset is a group integers that appear in the array with no particular order.
valid parentheses string is either empty "", "(" + a + ")", or a + b, where a and b are valid parentheses strings, and + represents string concatenation.
example, "", "()", "(())()", and "(()(()))" are all valid parentheses strings.
valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = a + b, with a and b nonempty valid parentheses strings.
a valid parentheses string s, consider its primitive decomposition: s = p1 + p2 + ... + pk, where pi are primitive valid parentheses strings.
s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.
are playing a variation of the game zuma.
this variation of zuma, there is a single row of colored balls on a board, where each ball can be colored red 'r', yellow 'y', blue 'b', green 'g', or white 'w'. you also have several colored balls in your hand.
goal is to clear all of the balls from the board. on each turn:
any ball from your hand and insert it in between two balls in the row or on either end of the row.
there is a group of three or more consecutive balls of the same color, remove the group of balls from the board.
this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.
there are no more balls on the board, then you win the game.
this process until you either win or do not have any more balls in your hand.
a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. if you cannot clear all the balls from the board using the balls in your hand, return -1.
a m x n matrix mat and an integer threshold, return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square.
are given a perfect binary tree where all leaves are on the same level, and every parent has two children. the binary tree has the following definition:
node {
val;
*left;
*right;
*next;

each next pointer to point to its next right node. if there is no next right node, the next pointer should be set to null.
all next pointers are set to null.
is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). it should support inserting and removing specific elements and also reporting a random element.
the randomizedcollection class:
initializes the empty randomizedcollection object.
insert(int val) inserts an item val into the multiset, even if the item is already present. returns true if the item is not present, false otherwise.
remove(int val) removes an item val from the multiset if present. returns true if the item is present, false otherwise. note that if val has multiple occurrences in the multiset, we only remove one of them.
getrandom() returns a random element from the current multiset of elements. the probability of each element being returned is linearly related to the number of the same values the multiset contains.
must implement the functions of the class such that each function works on average o(1) time complexity.
the test cases are generated such that getrandom will only be called if there is at least one item in the randomizedcollection.
are given a 0-indexed integer array nums and an integer pivot. rearrange nums such that the following conditions are satisfied:
element less than pivot appears before every element greater than pivot.
element equal to pivot appears in between the elements less than and greater than pivot.
relative order of the elements less than pivot and the elements greater than pivot is maintained.
formally, consider every pi, pj where pi is the new position of the ith element and pj is the new position of the jth element. for elements less than pivot, if i < j and nums[i] < pivot and nums[j] < pivot, then pi < pj. similarly for elements greater than pivot, if i < j and nums[i] > pivot and nums[j] > pivot, then pi < pj.
nums after the rearrangement.
have n computers. you are given the integer n and a 0-indexed integer array batteries where the ith battery can run a computer for batteries[i] minutes. you are interested in running all n computers simultaneously using the given batteries.
you can insert at most one battery into each computer. after that and at any integer time moment, you can remove a battery from a computer and insert another battery any number of times. the inserted battery can be a totally new battery or a battery from another computer. you may assume that the removing and inserting processes take no time.
that the batteries cannot be recharged.
the maximum number of minutes you can run all the n computers simultaneously.
a callable function f(x, y) with a hidden formula and a value z, reverse engineer the formula and return all positive integer pairs x and y where f(x,y) == z. you may return the pairs in any order.
the exact formula is hidden, the function is monotonically increasing, i.e.:
y) < f(x + 1, y)
y) < f(x, y + 1)
function interface is defined like this:
customfunction {

returns some positive integer f(x, y) for two positive integers x and y based on a formula.
f(int x, int y);

will judge your solution as follows:
judge has a list of 9 hidden implementations of customfunction, along with a way to generate an answer key of all valid pairs for a specific z.
judge will receive two inputs: a function_id (to determine which implementation to test your code with), and the target z.
judge will call your findsolution and compare your results with the answer key.
your results match the answer key, your solution will be accepted.
integer is a positive integer that does not contain any 0 in its decimal representation.
an integer n, return a list of two integers [a, b] where:
and b are no-zero integers.
+ b = n
test cases are generated so that there is at least one valid solution. if there are many valid solutions, you can return any of them.
an array of points where points[i] = [xi, yi] represents a point on the x-y plane, return the maximum number of points that lie on the same straight line.
n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
an integer array nums of positive integers, return the average value of all even integers that are divisible by 3.
that the average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.
are given an integer array nums. the unique elements of an array are the elements that appear exactly once in the array.
the sum of all the unique elements of nums.
are given the root of a binary tree with n nodes where each node in the tree has node.val coins. there are n coins in total throughout the whole tree.
one move, we may choose two adjacent nodes and move one coin from one node to another. a move may be from parent to child, or from child to parent.
the minimum number of moves required to make every node have exactly one coin.
are given a 0-indexed, strictly increasing integer array nums and a positive integer diff. a triplet (i, j, k) is an arithmetic triplet if the following conditions are met:
< j < k,
- nums[i] == diff, and
- nums[j] == diff.
the number of unique arithmetic triplets.
two strings s and t, we say "t divides s" if and only if s = t + ... + t (i.e., t is concatenated with itself one or more times).
two strings str1 and str2, return the largest string x such that x divides both str1 and str2.
are given an m x n binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.
move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.
the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.
encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). for example, to compress the string "aabccc" we replace "aa" by "a2" and replace "ccc" by "c3". thus the compressed string becomes "a2bc3".
that in this problem, we are not adding '1' after single characters.
a string s and an integer k. you need to delete at most k characters from s such that the run-length encoded version of s has minimum length.
the minimum length of the run-length encoded version of s after deleting at most k characters.
are given an m x n binary matrix grid. an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) you may assume all four edges of the grid are surrounded by water.
area of an island is the number of cells with a value 1 in the island.
the maximum area of an island in grid. if there is no island, return 0.
if a 9 x 9 sudoku board is valid. only the filled cells need to be validated according to the following rules:
row must contain the digits 1-9 without repetition.
column must contain the digits 1-9 without repetition.
of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.

sudoku board (partially filled) could be valid but is not necessarily solvable.
the filled cells need to be validated according to the mentioned rules.
a binary tree, determine if it is


are n cars on an infinitely long road. the cars are numbered from 0 to n - 1 from left to right and each car is present at a unique point.
are given a 0-indexed string directions of length n. directions[i] can be either 'l', 'r', or 's' denoting whether the ith car is moving towards the left, towards the right, or staying at its current point respectively. each moving car has the same speed.
number of collisions can be calculated as follows:
two cars moving in opposite directions collide with each other, the number of collisions increases by 2.
a moving car collides with a stationary car, the number of collisions increases by 1.
a collision, the cars involved can no longer move and will stay at the point where they collided. other than that, cars cannot change their state or direction of motion.
the total number of collisions that will happen on the road.
are a total of numcourses courses you have to take, labeled from 0 to numcourses - 1. you are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
true if you can finish all courses. otherwise, return false.
are given an integer array cards of length 4. you have four cards, each containing a number in the range [1, 9]. you should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.
are restricted with the following rules:
division operator '/' represents real division, not integer division.
example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.
operation done is between two numbers. in particular, we cannot use '-' as a unary operator.
example, if cards = [1, 1, 1, 1], the expression "-1 - 1 - 1 - 1" is not allowed.
cannot concatenate numbers together
example, if cards = [1, 2, 1, 2], the expression "12 + 12" is not valid.
true if you can get such expression that evaluates to 24, and false otherwise.
an array of strings words, return the smallest string that contains each string in words as a substring. if there are multiple valid strings of the smallest length, return any of them.
may assume that no string in words is a substring of another string in words.
the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth.
that the root node is at depth 1.
adding rule is:
the integer depth, for each not null tree node cur at the depth depth - 1, create two tree nodes with value val as cur's left subtree root and right subtree root.
original left subtree should be the left subtree of the new left subtree root.
original right subtree should be the right subtree of the new right subtree root.
depth == 1 that means there is no depth depth - 1 at all, then create a tree node with value val as the new root of the whole original tree, and the original tree is the new root's left subtree.
the root of a binary tree, each node in the tree has a distinct value.
deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).
the roots of the trees in the remaining forest. you may return the result in any order.
a positive integer n, return the smallest positive integer that is a multiple of both 2 and n.
are given a string s and an array of strings words. all the strings of words are of the same length.
concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.
example, if words = ["ab","cd","ef"], then "abcdef", "abefcd", "cdabef", "cdefab", "efabcd", and "efcdab" are all concatenated strings. "acdbef" is not a concatenated substring because it is not the concatenation of any permutation of words.
the starting indices of all the concatenated substrings in s. you can return the answer in any order.
have a movie renting company consisting of n shops. you want to implement a renting system that supports searching for, booking, and returning movies. the system should also support generating a report of the currently rented movies.
movie is given as a 2d integer array entries where entries[i] = [shopi, moviei, pricei] indicates that there is a copy of movie moviei at shop shopi with a rental price of pricei. each shop carries at most one copy of a movie moviei.
system should support the following functions:
finds the cheapest 5 shops that have an unrented copy of a given movie. the shops should be sorted by price in ascending order, and in case of a tie, the one with the smaller shopi should appear first. if there are less than 5 matching shops, then all of them should be returned. if no shop has an unrented copy, then an empty list should be returned.
rents an unrented copy of a given movie from a given shop.
drops off a previously rented copy of a given movie at a given shop.
returns the cheapest 5 rented movies (possibly of the same movie id) as a 2d list res where res[j] = [shopj, moviej] describes that the jth cheapest rented movie moviej was rented from the shop shopj. the movies in res should be sorted by price in ascending order, and in case of a tie, the one with the smaller shopj should appear first, and if there is still tie, the one with the smaller moviej should appear first. if there are fewer than 5 rented movies, then all of them should be returned. if no movies are currently being rented, then an empty list should be returned.
the movierentingsystem class:
n, int[][] entries) initializes the movierentingsystem object with n shops and the movies in entries.
search(int movie) returns a list of shops that have an unrented copy of the given movie as described above.
rent(int shop, int movie) rents the given movie from the given shop.
drop(int shop, int movie) drops off a previously rented movie at the given shop.
report() returns a list of cheapest rented movies as described above.
the test cases will be generated such that rent will only be called if the shop has an unrented copy of the movie, and drop will only be called if the shop had previously rented out the movie.
an array of integers arr, replace each element with its rank.
rank represents how large the element is. the rank has the following rules:
is an integer starting from 1.
larger the element, the larger the rank. if two elements are equal, their rank must be the same.
should be as small as possible.
an efficient algorithm that searches for a value target in an m x n integer matrix matrix. this matrix has the following properties:
in each row are sorted in ascending from left to right.
in each column are sorted in ascending from top to bottom.
are given an m x n integer matrix grid, where you can move from a cell to any adjacent cell in all 4 directions.
the number of strictly increasing paths in the grid such that you can start from any cell and end at any cell. since the answer may be very large, return it modulo 109 + 7.
paths are considered different if they do not have exactly the same sequence of visited cells.
a multi-dimensional array of integers, return a generator object which yields integers in the same order as inorder traversal.
multi-dimensional array is a recursive data structure that contains both integers and other multi-dimensional arrays.
traversal iterates over each array from left to right, yielding any integers it encounters or applying inorder traversal to any arrays it encounters.
schema
users

column name | type |

user_id | int |
user_name | varchar |

is the primary key for this table.
row of this table contains the name and the id of a user.
register

column name | type |

contest_id | int |
user_id | int |

user_id) is the primary key for this table.
row of this table contains the id of a user and the contest they registered into.
an sql query to find the percentage of the users registered in each contest rounded to two decimals.
the result table ordered by percentage in descending order. in case of a tie, order it by contest_id in ascending order.
query result format is in the following example.
schema
orders

column name | type |

order_number | int |
customer_number | int |

is the primary key for this table.
table contains information about the order id and the customer id.
an sql query to find the customer_number for the customer who has placed the largest number of orders.
test cases are generated so that exactly one customer will have placed more orders than any other customer.
query result format is in the following example.
are given a positive integer n. each digit of n has a sign according to the following rules:
most significant digit is assigned a positive sign.
other digit has an opposite sign to its adjacent digits.
the sum of all digits with their corresponding sign.
are n cities. some of them are connected, while some are not. if city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.
province is a group of directly or indirectly connected cities and no other cities outside of the group.
are given an n x n matrix isconnected where isconnected[i][j] = 1 if the ith city and the jth city are directly connected, and isconnected[i][j] = 0 otherwise.
the total number of provinces.
an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.
is guaranteed that there will be a rectangle with a sum no larger than k.
are given a license key represented as a string s that consists of only alphanumeric characters and dashes. the string is separated into n + 1 groups by n dashes. you are also given an integer k.
want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.
the reformatted license key.
integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x.
an integer n, return the smallest numerically balanced number strictly greater than n.
a data structure that is initialized with a list of different words. provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.
the magicdictionary class:
initializes the object.
builddict(string[] dictionary) sets the data structure with an array of distinct strings dictionary.
search(string searchword) returns true if you can change exactly one character in searchword to match any string in the data structure, otherwise returns false.
are playing a game that contains multiple characters, and each of the characters has two main properties: attack and defense. you are given a 2d integer array properties where properties[i] = [attacki, defensei] represents the properties of the ith character in the game.
character is said to be weak if any other character has both attack and defense levels strictly greater than this character's attack and defense levels. more formally, a character i is said to be weak if there exists another character j where attackj > attacki and defensej > defensei.
the number of weak characters.
an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream.
the productofnumbers class:
initializes the object with an empty stream.
add(int num) appends the integer num to the stream.
getproduct(int k) returns the product of the last k numbers in the current list. you can assume that always the current list has at least k numbers.
test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.









productofnumbers = new productofnumbers();
// [3]
// [3,0]
// [3,0,2]
// [3,0,2,5]
// [3,0,2,5,4]
// return 20. the product of the last 2 numbers is 5 * 4 = 20
// return 40. the product of the last 3 numbers is 2 * 5 * 4 = 40
// return 0. the product of the last 4 numbers is 0 * 2 * 5 * 4 = 0
// [3,0,2,5,4,8]
// return 32. the product of the last 2 numbers is 4 * 8 = 32

<= num <= 100
<= k <= 4 * 104
most 4 * 104 calls will be made to add and getproduct.
product of the stream at any point in time will fit in a 32-bit integer.
schema
views

column name | type |

article_id | int |
author_id | int |
viewer_id | int |
view_date | date |

is no primary key for this table, it may have duplicate rows.
row of this table indicates that some viewer viewed an article (written by some author) on some date.
that equal author_id and viewer_id indicate the same person.
an sql query to find all the authors that viewed at least one of their own articles.
the result table sorted by id in ascending order.
query result format is in the following example.
silent philosophers sit at a round table with bowls of spaghetti. forks are placed between each pair of adjacent philosophers.
philosopher must alternately think and eat. however, a philosopher can only eat spaghetti when they have both left and right forks. each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher. after an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others. a philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks.
is not limited by the remaining amounts of spaghetti or stomach space; an infinite supply and an infinite demand are assumed.
a discipline of behaviour (a concurrent algorithm) such that no philosopher will starve; i.e., each can forever continue to alternate between eating and thinking, assuming that no philosopher can know when others may want to eat or think.
problem statement and the image above are taken from wikipedia.org
philosophers' ids are numbered from 0 to 4 in a clockwise order. implement the function void wantstoeat(philosopher, pickleftfork, pickrightfork, eat, putleftfork, putrightfork) where:
is the id of the philosopher who wants to eat.
and pickrightfork are functions you can call to pick the corresponding forks of that philosopher.
is a function you can call to let the philosopher eat once he has picked both forks.
and putrightfork are functions you can call to put down the corresponding forks of that philosopher.
philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number).
threads, each representing a philosopher, will simultaneously use one object of your class to simulate the process. the function may be called for the same philosopher more than once, even before the last call ends.
a warehouse, there is a row of barcodes, where the ith barcode is barcodes[i].
the barcodes so that no two adjacent barcodes are equal. you may return any answer, and it is guaranteed an answer exists.
alphabetical continuous string is a string consisting of consecutive letters in the alphabet. in other words, it is any substring of the string "abcdefghijklmnopqrstuvwxyz".
example, "abc" is an alphabetical continuous string, while "acb" and "za" are not.
a string s consisting of lowercase letters only, return the length of the longest alphabetical continuous substring.
is an undirected star graph consisting of n nodes labeled from 1 to n. a star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node.
are given a 2d integer array edges where each edges[i] = [ui, vi] indicates that there is an edge between the nodes ui and vi. return the center of the given star graph.
an array of integers arr and an integer d. in one step you can jump from index i to index:
+ x where: i + x < arr.length and 0 < x <= d.
- x where: i - x >= 0 and 0 < x <= d.
addition, you can only jump from index i to index j if arr[i] > arr[j] and arr[i] > arr[k] for all indices k between i and j (more formally min(i, j) < k < max(i, j)).
can choose any index of the array and start jumping. return the maximum number of indices you can visit.
that you can not jump outside of the array at any time.
are given an array of unique strings words where words[i] is six letters long. one word of words was chosen as a secret word.
are also given the helper object master. you may call master.guess(word) where word is a six-letter-long string, and it must be from words. master.guess(word) returns:
if word is not from words, or
integer representing the number of exact matches (value and position) of your guess to the secret word.
is a parameter allowedguesses for each test case where allowedguesses is the maximum number of times you can call master.guess(word).
each test case, you should call master.guess with the secret word without exceeding the maximum number of allowed guesses. you will get:
you took too many guesses, or you did not find the secret word." if you called master.guess more than allowedguesses times or if you did not call master.guess with the secret word, or
guessed the secret word correctly." if you called master.guess with the secret word with the number of calls to master.guess less than or equal to allowedguesses.
test cases are generated such that you can guess the secret word with a reasonable strategy (other than using the bruteforce method).
an m x n integers matrix, return the length of the longest increasing path in matrix.
each cell, you can either move in four directions: left, right, up, or down. you may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).
are given an array of strings words. each element of words consists of two lowercase english letters.
the longest possible palindrome by selecting some elements from words and concatenating them in any order. each element can be selected at most once.
the length of the longest palindrome that you can create. if it is impossible to create any palindrome, return 0.
palindrome is a string that reads the same forward and backward.
is a robot on an m x n grid. the robot is initially located at the top-left corner (i.e., grid[0][0]). the robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). the robot can only move either down or right at any point in time.
the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
test cases are generated so that the answer will be less than or equal to 2 * 109.
to wikipedia's article: "the game of life, also known simply as life, is a cellular automaton devised by the british mathematician john horton conway in 1970."
board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above wikipedia article):
live cell with fewer than two live neighbors dies as if caused by under-population.
live cell with two or three live neighbors lives on to the next generation.
live cell with more than three live neighbors dies, as if by over-population.
dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. given the current state of the m x n grid board, return the next state.
are given an undirected graph defined by an integer n, the number of nodes, and a 2d integer array edges, the edges in the graph, where edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi. you are also given an integer array queries.
incident(a, b) be defined as the number of edges that are connected to either node a or b.
answer to the jth query is the number of pairs of nodes (a, b) that satisfy both of the following conditions:
< b
b) > queries[j]
an array answers such that answers.length == queries.length and answers[j] is the answer of the jth query.
that there can be multiple edges between the same two nodes.
everyone has used the multiplication table. the multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed).
three integers m, n, and k, return the kth smallest element in the m x n multiplication table.
is coming! during the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.
house can be warmed, as long as the house is within the heater's warm radius range.
the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.
that all the heaters follow your radius standard, and the warm radius will the same.
are given an array nums of n positive integers.
can perform two types of operations on any element of the array any number of times:
the element is even, divide it by 2.
example, if the array is [1,2,3,4], then you can do this operation on the last element, and the array will be [1,2,3,2].
the element is odd, multiply it by 2.
example, if the array is [1,2,3,4], then you can do this operation on the first element, and the array will be [2,2,3,4].
deviation of the array is the maximum difference between any two elements in the array.
the minimum deviation the array can have after performing some number of operations.
a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language.
are given an integer n, an array languages, and an array friendships where:
are n languages numbered 1 through n,
is the set of languages the ith user knows, and
= [ui, vi] denotes a friendship between the users ui and vi.
can choose one language and teach it to some users so that all friends can communicate with each other. return the minimum number of users you need to teach.
that friendships are not transitive, meaning if x is a friend of y and y is a friend of z, this doesn't guarantee that x is a friend of z.
a string s, return the string after replacing every uppercase letter with the same lowercase letter.
value of an alphanumeric string can be defined as:
numeric representation of the string in base 10, if it comprises of digits only.
length of the string, otherwise.
an array strs of alphanumeric strings, return the maximum value of any string in strs.
is a singly-linked list head and we want to delete a node node in it.
are given the node to be deleted node. you will not be given access to the first node of head.
the values of the linked list are unique, and it is guaranteed that the given node node is not the last node in the linked list.
the given node. note that by deleting the node, we do not mean removing it from memory. we mean:
value of the given node should not exist in the linked list.
number of nodes in the linked list should decrease by one.
the values before node should be in the same order.
the values after node should be in the same order.
testing:
the input, you should provide the entire linked list head and the node to be given node. node should not be the last node of the list and should be an actual node in the list.
will build the linked list and pass the node to your function.
output will be the entire list after calling your function.
an integer n, return a list of all possible full binary trees with n nodes. each node of each tree in the answer must have node.val == 0.
element of the answer is the root node of one possible tree. you may return the final list of trees in any order.
full binary tree is a binary tree where each node has exactly 0 or 2 children.
a square matrix mat, return the sum of the matrix diagonals.
include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.
plays the following game, loosely based on the card game "21".
starts with 0 points and draws numbers while she has less than k points. during each draw, she gains an integer number of points randomly from the range [1, maxpts], where maxpts is an integer. each draw is independent and the outcomes have equal probabilities.
stops drawing numbers when she gets k or more points.
the probability that alice has n or fewer points.
within 10-5 of the actual answer are considered accepted.
a wooden stick of length n units. the stick is labelled from 0 to n. for example, a stick of length 6 is labelled as follows:
an integer array cuts where cuts[i] denotes a position you should perform a cut at.
should perform the cuts in order, you can change the order of the cuts as you wish.
cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. when you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). please refer to the first example for a better explanation.
the minimum total cost of the cuts.
is standing at cell (0, 0), and he wants to reach destination: (row, column). he can only travel right and down. you are going to help bob by providing instructions for him to reach destination.
instructions are represented as a string, where each character is either:
meaning move horizontally (go right), or
meaning move vertically (go down).
instructions will lead bob to destination. for example, if destination is (2, 3), both "hhhvv" and "hvhvh" are valid instructions.
bob is very picky. bob has a lucky number k, and he wants the kth lexicographically smallest instructions that will lead him to destination. k is 1-indexed.
an integer array destination and an integer k, return the kth lexicographically smallest instructions that will take bob to destination.
had some 2-dimensional coordinates, like "(1, 3)" or "(2, 0.5)". then, we removed all commas, decimal points, and spaces and ended up with the string s.
example, "(1, 3)" becomes s = "(13)" and "(2, 0.5)" becomes s = "(205)".
a list of strings representing all possibilities for what our original coordinates could have been.
original representation never had extraneous zeroes, so we never started with numbers like "00", "0.0", "0.00", "1.0", "001", "00.01", or any other number that can be represented with fewer digits. also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like ".1".
final answer list can be returned in any order. all coordinates in the final answer have exactly one space between them (occurring after the comma.)
are given a positive integer arrivaltime denoting the arrival time of a train in hours, and another positive integer delayedtime denoting the amount of delay in hours.
the time when the train will arrive at the station.
that the time in this problem is in 24-hours format.
a string of digits s, return the number of palindromic subsequences of s having length 5. since the answer may be very large, return it modulo 109 + 7.

string is palindromic if it reads the same forward and backward.
subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
are given an alphanumeric string s. (alphanumeric string is a string consisting of lowercase english letters and digits).
have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. that is, no two adjacent characters have the same type.
the reformatted string or return an empty string if it is impossible to reformat the string.
are two kinds of threads: oxygen and hydrogen. your goal is to group these threads to form water molecules.
is a barrier where each thread has to wait until a complete molecule can be formed. hydrogen and oxygen threads will be given releasehydrogen and releaseoxygen methods respectively, which will allow them to pass the barrier. these threads should pass the barrier in groups of three, and they must immediately bond with each other to form a water molecule. you must guarantee that all the threads from one molecule bond before any other threads from the next molecule do.
other words:
an oxygen thread arrives at the barrier when no hydrogen threads are present, it must wait for two hydrogen threads.
a hydrogen thread arrives at the barrier when no other threads are present, it must wait for an oxygen thread and another hydrogen thread.
do not have to worry about matching the threads up explicitly; the threads do not necessarily know which other threads they are paired up with. the key is that threads pass the barriers in complete sets; thus, if we examine the sequence of threads that bind and divide them into groups of three, each group should contain one oxygen and two hydrogen threads.
synchronization code for oxygen and hydrogen molecules that enforces these constraints.
have a set which contains all positive integers [1, 2, 3, 4, 5, ...].
the smallestinfiniteset class:
initializes the smallestinfiniteset object to contain all positive integers.
popsmallest() removes and returns the smallest integer contained in the infinite set.
addback(int num) adds a positive integer num back into the infinite set, if it is not already in the infinite set.
all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.
example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).
binary trees are considered leaf-similar if their leaf value sequence is the same.
true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.
are given two images, img1 and img2, represented as binary, square matrices of size n x n. a binary matrix has only 0s and 1s as values.
translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. we then place it on top of the other image. we can then calculate the overlap by counting the number of positions that have a 1 in both images.
also that a translation does not include any kind of rotation. any 1 bits that are translated outside of the matrix borders are erased.
the largest possible overlap.
schema
prices

column name | type |

product_id | int |
start_date | date |
end_date | date |
price | int |

start_date, end_date) is the primary key for this table.
row of this table indicates the price of the product_id in the period from start_date to end_date.
each product_id there will be no two overlapping periods. that means there will be no two intersecting periods for the same product_id.
unitssold

column name | type |

product_id | int |
purchase_date | date |
units | int |

is no primary key for this table, it may contain duplicates.
row of this table indicates the date, units, and product_id of each product sold.
an sql query to find the average selling price for each product. average_price should be rounded to 2 decimal places.
the result table in any order.
query result format is in the following example.
are given a 0-indexed integer array nums. in one step, remove all elements nums[i] where nums[i - 1] > nums[i] for all 0 < i < nums.length.
the number of steps performed until nums becomes a non-decreasing array.
an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:
matches any single character.
matches any sequence of characters (including the empty sequence).
matching should cover the entire input string (not partial).
an integer array nums, return the length of the longest strictly increasing


are given two strings s1 and s2 of equal length. a string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.
true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. otherwise, return false.
are given a positive integer n.
replace n with the sum of its prime factors.
that if a prime factor divides n multiple times, it should be included in the sum as many times as it divides n.
the smallest value n will take on.
a string s, return the number of unique palindromes of length three that are a subsequence of s.
that even if there are multiple ways to obtain the same subsequence, it is still only counted once.
palindrome is a string that reads the same forwards and backwards.
subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
example, "ace" is a subsequence of "abcde".
a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.
that elements beyond the length of the original array are not written. do the above modifications to the input array in place and do not return anything.
are given an integer array cards where cards[i] represents the value of the ith card. a pair of cards are matching if the cards have the same value.
the minimum number of consecutive cards you have to pick up to have a pair of matching cards among the picked cards. if it is impossible to have matching cards, return -1.
two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.
must solve the problem without using any built-in library for handling large integers (such as biginteger). you must also not convert the inputs to integers directly.
the root of a binary search tree (bst), convert it to a greater tree such that every key of the original bst is changed to the original key plus the sum of all keys greater than the original key in bst.
a reminder, a binary search tree is a tree that satisfies these constraints:
left subtree of a node contains only nodes with keys less than the node's key.
right subtree of a node contains only nodes with keys greater than the node's key.
the left and right subtrees must also be binary search trees.
are given an integer n. there is an undirected graph with n nodes, numbered from 0 to n - 1. you are given a 2d integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.
the number of pairs of different nodes that are unreachable from each other.
two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.
are given a string s and an integer k. you can choose one of the first k letters of s and append it at the end of the string..
the lexicographically smallest string you could have after applying the mentioned step any number of moves.
the universe earth c-137, rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. rick has n empty baskets, the ith basket is at position[i], morty has m balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum.
stated that magnetic force between two different balls at positions x and y is |x - y|.
the integer array position and the integer m. return the required force.
is an atm machine that stores banknotes of 5 denominations: 20, 50, 100, 200, and 500 dollars. initially the atm is empty. the user can use the machine to deposit or withdraw any amount of money.
withdrawing, the machine prioritizes using banknotes of larger values.
example, if you want to withdraw $300 and there are 2 $50 banknotes, 1 $100 banknote, and 1 $200 banknote, then the machine will use the $100 and $200 banknotes.
if you try to withdraw $600 and there are 3 $200 banknotes and 1 $500 banknote, then the withdraw request will be rejected because the machine will first try to use the $500 banknote and then be unable to use banknotes to complete the remaining $100. note that the machine is not allowed to use the $200 banknotes instead of the $500 banknote.
the atm class:
initializes the atm object.
deposit(int[] banknotescount) deposits new banknotes in the order $20, $50, $100, $200, and $500.
withdraw(int amount) returns an array of length 5 of the number of banknotes that will be handed to the user in the order $20, $50, $100, $200, and $500, and update the number of banknotes in the atm after withdrawing. returns [-1] if it is not possible (do not withdraw any banknotes in this case).
are given an array pairs, where pairs[i] = [xi, yi], and:
are no duplicates.
< yi
ways be the number of rooted trees that satisfy the following conditions:
tree consists of nodes whose values appeared in pairs.
pair [xi, yi] exists in pairs if and only if xi is an ancestor of yi or yi is an ancestor of xi.
the tree does not have to be a binary tree.
ways are considered to be different if there is at least one node that has different parents in both ways.

if ways == 0
if ways == 1
if ways > 1
rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root.
ancestor of a node is any node on the path from the root to that node (excluding the node itself). the root has no ancestors.
trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. there are various applications of this data structure, such as autocomplete and spellchecker.
the trie class:
initializes the trie object.
insert(string word) inserts the string word into the trie.
search(string word) returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.
startswith(string prefix) returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.
an array of integers arr, sort the array by performing a series of pancake flips.
one pancake flip we do the following steps:
an integer k where 1 <= k <= arr.length.
the sub-array arr[0...k-1] (0-indexed).
example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3.
an array of the k-values corresponding to a sequence of pancake flips that sort arr. any valid answer that sorts the array within 10 * arr.length flips will be judged as correct.
are given the head of a singly linked-list. the list can be represented as:
â l1 â â¦ â ln - 1 â ln
the list to be on the following form:
â ln â l1 â ln - 1 â l2 â ln - 2 â â¦
may not modify the values in the list's nodes. only nodes themselves may be changed.
have a bomb to defuse, and your time is running out! your informer will provide you with a circular array code of length of n and a key k.
decrypt the code, you must replace every number. all the numbers are replaced simultaneously.
k > 0, replace the ith number with the sum of the next k numbers.
k < 0, replace the ith number with the sum of the previous k numbers.
k == 0, replace the ith number with 0.
code is circular, the next element of code[n-1] is code[0], and the previous element of code[0] is code[n-1].
the circular array code and an integer key k, return the decrypted code to defuse the bomb!
are given the heads of two sorted linked lists list1 and list2.
the two lists in a one sorted list. the list should be made by splicing together the nodes of the first two lists.
the head of the merged linked list.
are given an array of integers nums and an integer target.
the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. since the answer may be too large, return it modulo 109 + 7.
an array of points where points[i] = [xi, yi] represents a point on the x-y plane and an integer k, return the k closest points to the origin (0, 0).
distance between two points on the x-y plane is the euclidean distance (i.e., â(x1 - x2)2 + (y1 - y2)2).
may return the answer in any order. the answer is guaranteed to be unique (except for the order that it is in).
an encoded string, return its decoded string.
encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. note that k is guaranteed to be a positive integer.
may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. for example, there will not be input like 3a or 2[4].
test cases are generated so that the length of the output will never exceed 105.
are given an integer array prices where prices[i] is the price of a given stock on the ith day.
each day, you may decide to buy and/or sell the stock. you can only hold at most one share of the stock at any time. however, you can buy it then immediately sell it on the same day.
and return the maximum profit you can achieve.
are given an integer array nums of length n and an integer numslots such that 2 * numslots >= n. there are numslots slots numbered from 1 to numslots.
have to place all n integers into the slots such that each slot contains at most two numbers. the and sum of a given placement is the sum of the bitwise and of every number with its respective slot number.
example, the and sum of placing the numbers [1, 3] into slot 1 and [4, 6] into slot 2 is equal to (1 and 1) + (3 and 1) + (4 and 2) + (6 and 2) = 1 + 1 + 0 + 2 = 4.
the maximum possible and sum of nums given numslots slots.
an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted.
string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.
a characters array tasks, representing the tasks a cpu needs to do, where each letter represents a different task. tasks could be done in any order. each task is done in one unit of time. for each unit of time, the cpu could complete either one task or just be idle.
there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks.
the least number of units of times that the cpu will take to finish all the given tasks.
schema
project

column name | type |

project_id | int |
employee_id | int |

employee_id) is the primary key of this table.
is a foreign key to employee table.
row of this table indicates that the employee with employee_id is working on the project with project_id.
employee

column name | type |

employee_id | int |
name | varchar |
experience_years | int |

is the primary key of this table. it's guaranteed that experience_years is not null.
row of this table contains information about one employee.
an sql query that reports the average experience years of all the employees for each project, rounded to 2 digits.
the result table in any order.
query result format is in the following example.
an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k.
array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.
define that a subsequence a is more competitive than a subsequence b (of the same length) if in the first position where a and b differ, subsequence a has a number less than the corresponding number in b. for example, [1,3,4] is more competitive than [1,3,5] because the first position they differ is at the final number, and 4 is less than 5.
an array of positive integers arr (not necessarily distinct), return the

permutation that is smaller than arr, that can be made with exactly one swap. if it cannot be done, then return the same array.
that a swap exchanges the positions of two numbers arr[i] and arr[j]
an array of strings strs, return the length of the longest uncommon subsequence between them. if the longest uncommon subsequence does not exist, return -1.
uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.
subsequence of a string s is a string that can be obtained after deleting any number of characters from s.
example, "abc" is a subsequence of "aebdc" because you can delete the underlined characters in "aebdc" to get "abc". other subsequences of "aebdc" include "aebdc", "aeb", and "" (empty string).
is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:
will pick any pizza slice.
friend alice will pick the next slice in the anti-clockwise direction of your pick.
friend bob will pick the next slice in the clockwise direction of your pick.
until there are no more slices of pizzas.
an integer array slices that represent the sizes of the pizza slices in a clockwise direction, return the maximum possible sum of slice sizes that you can pick.
are given two integers, x and y, which represent your current location on a cartesian grid: (x, y). you are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi). a point is valid if it shares the same x-coordinate or the same y-coordinate as your location.
the index (0-indexed) of the valid point with the smallest manhattan distance from your current location. if there are multiple, return the valid point with the smallest index. if there are no valid points, return -1.
manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).
have a function printnumber that can be called with an integer parameter and prints it to the console.
example, calling printnumber(7) prints 7 to the console.
are given an instance of the class zeroevenodd that has three functions: zero, even, and odd. the same instance of zeroevenodd will be passed to three different threads:
a: calls zero() that should only output 0's.
b: calls even() that should only output even numbers.
c: calls odd() that should only output odd numbers.
the given class to output the series "010203040506..." where the length of the series must be 2n.
the zeroevenodd class:
n) initializes the object with the number n that represents the numbers that should be printed.
zero(printnumber) calls printnumber to output one zero.
even(printnumber) calls printnumber to output one even number.
odd(printnumber) calls printnumber to output one odd number.
the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.
are given a 0-indexed integer array nums. rearrange the values of nums according to the following rules:
the values at odd indices of nums in non-increasing order.
example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. the values at odd indices 1 and 3 are sorted in non-increasing order.
the values at even indices of nums in non-decreasing order.
example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. the values at even indices 0 and 2 are sorted in non-decreasing order.
the array formed after rearranging the values of nums.
are three stones in different positions on the x-axis. you are given three integers a, b, and c, the positions of the stones.
one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. formally, let's say the stones are currently at positions x, y, and z with x < y < z. you pick up the stone at either position x or position z, and move that stone to an integer position k, with x < k < z and k != y.
game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).
an integer array answer of length 2 where:
is the minimum number of moves you can play, and
is the maximum number of moves you can play.
are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. you are also given an integer k.
the maximum number of length k <= m + n from digits of the two numbers. the relative order of the digits from the same array must be preserved.
an array of the k digits representing the answer.
schema
movies

column name | type |

movie_id | int |
title | varchar |

is the primary key for this table.
is the name of the movie.
users

column name | type |

user_id | int |
name | varchar |

is the primary key for this table.
movierating

column name | type |

movie_id | int |
user_id | int |
rating | int |
created_at | date |

user_id) is the primary key for this table.
table contains the rating of a movie by a user in their review.
is the user's review date.
an sql query to:
the name of the user who has rated the greatest number of movies. in case of a tie, return the lexicographically smaller user name.
the movie name with the highest average rating in february 2020. in case of a tie, return the lexicographically smaller movie name.
query result format is in the following example.
are given a binary string s consisting only of zeroes and ones.
substring of s is considered balanced if all zeroes are before ones and the number of zeroes is equal to the number of ones inside the substring. notice that the empty substring is considered a balanced substring.
the length of the longest balanced substring of s.
substring is a contiguous sequence of characters within a string.
are given an array prices where prices[i] is the price of a given stock on the ith day.
the maximum profit you can achieve. you may complete at most two transactions.
you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. you are also given an integer k.
every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].
the kth smallest fraction considered. return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].
have two special characters:
first character can be represented by one bit 0.
second character can be represented by two bits (10 or 11).
a binary array bits that ends with 0, return true if the last character must be a one-bit character.
a data structure that keeps track of the values in it and answers some queries regarding their frequencies.
the frequencytracker class.
initializes the frequencytracker object with an empty array initially.
add(int number): adds number to the data structure.
deleteone(int number): deletes one occurrence of number from the data structure. the data structure may not contain number, and in this case nothing is deleted.
hasfrequency(int frequency): returns true if there is a number in the data structure that occurs frequency number of times, otherwise, it returns false.
is an m x n grid with a ball. the ball is initially at the position [startrow, startcolumn]. you are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). you can apply at most maxmove moves to the ball.
the five integers m, n, maxmove, startrow, startcolumn, return the number of paths to move the ball out of the grid boundary. since the answer can be very large, return it modulo 109 + 7.
an m x n 2d binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.
island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. you may assume all four edges of the grid are all surrounded by water.
peak element is an element that is strictly greater than its neighbors.
a 0-indexed integer array nums, find a peak element, and return its index. if the array contains multiple peaks, return the index to any of the peaks.
may imagine that nums[-1] = nums[n] = -â. in other words, an element is always considered to be strictly greater than a neighbor that is outside the array.
must write an algorithm that runs in o(log n) time.
schema
tweets

column name | type |

tweet_id | int |
content | varchar |

is the primary key for this table.
table contains all the tweets in a social media app.
an sql query to find the ids of the invalid tweets. the tweet is invalid if the number of characters used in the content of the tweet is strictly greater than 15.
the result table in any order.
query result format is in the following example.
the binary representation of an integer as a string s, return the number of steps to reduce it to 1 under the following rules:
the current number is even, you have to divide it by 2.
the current number is odd, you have to add 1 to it.
is guaranteed that you can always reach one for all test cases.
are given a 0-indexed integer array nums. in one operation, you may do the following:
two integers in nums that are equal.
both integers from nums, forming a pair.
operation is done on nums as many times as possible.
a 0-indexed integer array answer of size 2 where answer[0] is the number of pairs that are formed and answer[1] is the number of leftover integers in nums after doing the operation as many times as possible.
have n boxes. you are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball.
one operation, you can move one ball from a box to an adjacent box. box i is adjacent to box j if abs(i - j) == 1. note that after doing so, there may be more than one ball in some boxes.
an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box.
answer[i] is calculated considering the initial state of the boxes.
are given an integer array nums. you need to create a 2d array from nums satisfying the following conditions:
2d array should contain only the elements of the array nums.
row in the 2d array contains distinct integers.
number of rows in the 2d array should be minimal.
the resulting array. if there are multiple answers, return any of them.
that the 2d array can have a different number of elements on each row.
k-beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions:
has a length of k.
is a divisor of num.
integers num and k, return the k-beauty of num.

zeros are allowed.
is not a divisor of any value.
substring is a contiguous sequence of characters in a string.
two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. if there are multiple valid strings, return any of them.
string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.
are given an m x n integer matrix grid where each cell is either 0 (empty) or 1 (obstacle). you can move up, down, left, or right from and to an empty cell in one step.
the minimum number of steps to walk from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1) given that you can eliminate at most k obstacles. if it is not possible to find such walk return -1.
an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
that you must do this in-place without making a copy of the array.
have two arrays arr1 and arr2 which are initially empty. you need to add positive integers to them such that they satisfy all the following conditions:
contains uniquecnt1 distinct positive integers, each of which is not divisible by divisor1.
contains uniquecnt2 distinct positive integers, each of which is not divisible by divisor2.
integer is present in both arr1 and arr2.
divisor1, divisor2, uniquecnt1, and uniquecnt2, return the minimum possible maximum integer that can be present in either array.
width x height grid is on an xy-plane with the bottom-left cell at (0, 0) and the top-right cell at (width - 1, height - 1). the grid is aligned with the four cardinal directions ("north", "east", "south", and "west"). a robot is initially at cell (0, 0) facing direction "east".
robot can be instructed to move for a specific number of steps. for each step, it does the following.
to move forward one cell in the direction it is facing.
the cell the robot is moving to is out of bounds, the robot instead turns 90 degrees counterclockwise and retries the step.
the robot finishes moving the number of steps required, it stops and awaits the next instruction.
the robot class:
width, int height) initializes the width x height grid with the robot at (0, 0) facing "east".
step(int num) instructs the robot to move forward num steps.
getpos() returns the current cell the robot is at, as an array of length 2, [x, y].
getdir() returns the current direction of the robot, "north", "east", "south", or "west".
are n rings and each ring is either red, green, or blue. the rings are distributed across ten rods labeled from 0 to 9.
are given a string rings of length 2n that describes the n rings that are placed onto the rods. every two characters in rings forms a color-position pair that is used to describe each ring where:
first character of the ith pair denotes the ith ring's color ('r', 'g', 'b').
second character of the ith pair denotes the rod that the ith ring is placed on ('0' to '9').
example, "r3g2b1" describes n == 3 rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.
the number of rods that have all three colors of rings on them.
password is said to be strong if it satisfies all the following criteria:
has at least 8 characters.
contains at least one lowercase letter.
contains at least one uppercase letter.
contains at least one digit.
contains at least one special character. the special characters are the characters in the following string: "!@#$%^&*()-+".
does not contain 2 of the same character in adjacent positions (i.e., "aab" violates this condition, but "aba" does not).
a string password, return true if it is a strong password. otherwise, return false.
min-product of an array is equal to the minimum value in the array multiplied by the array's sum.
example, the array [3,2,5] (minimum value is 2) has a min-product of 2 * (3+2+5) = 2 * 10 = 20.
an array of integers nums, return the maximum min-product of any non-empty subarray of nums. since the answer may be large, return it modulo 109 + 7.
that the min-product should be maximized before performing the modulo operation. testcases are generated such that the maximum min-product without modulo will fit in a 64-bit signed integer.
subarray is a contiguous part of an array.
a non-empty array of integers nums, every element appears twice except for one. find that single one.
must implement a solution with a linear runtime complexity and use only constant extra space.
a m x n binary matrix mat, find the 0-indexed position of the row that contains the maximum count of ones, and the number of ones in that row.
case there are multiple rows that have the maximum count of ones, the row with the smallest row number should be selected.
an array containing the index of the row, and the number of ones in it.
an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements.
within 10-5 of the actual answer will be considered accepted.
are given a string s and a robot that currently holds an empty string t. apply one of the following operations until s and t are both empty:
the first character of a string s and give it to the robot. the robot will append this character to the string t.
the last character of a string t and give it to the robot. the robot will write this character on paper.
the lexicographically smallest string that can be written on the paper.
are given a 0-indexed 2d integer array pairs where pairs[i] = [starti, endi]. an arrangement of pairs is valid if for every index i where 1 <= i < pairs.length, we have endi-1 == starti.
any valid arrangement of pairs.
the inputs will be generated such that there exists a valid arrangement of pairs.
power of the string is the maximum length of a non-empty substring that contains only one unique character.
a string s, return the power of s.
are building a string s of length n one character at a time, prepending each new character to the front of the string. the strings are labeled from 1 to n, where the string with length i is labeled si.
example, for s = "abaca", s1 == "a", s2 == "ca", s3 == "aca", etc.
score of si is the length of the longest common prefix between si and sn (note that s == sn).
the final string s, return the sum of the score of every si.
are n items each belonging to zero or one of m groups where group[i] is the group that the i-th item belongs to and it's equal to -1 if the i-th item belongs to no group. the items and the groups are zero indexed. a group can have no item belonging to it.
a sorted list of the items such that:
items that belong to the same group are next to each other in the sorted list.
are some relations between these items where beforeitems[i] is a list containing all the items that should come before the i-th item in the sorted array (to the left of the i-th item).
any solution if there is more than one solution and return an empty list if there is no solution.
a data structure to find the frequency of a given value in a given subarray.
frequency of a value in a subarray is the number of occurrences of that value in the subarray.
the rangefreqquery class:
arr) constructs an instance of the class with the given 0-indexed integer array arr.
query(int left, int right, int value) returns the frequency of value in the subarray arr[left...right].
subarray is a contiguous sequence of elements within an array. arr[left...right] denotes the subarray that contains the elements of nums between indices left and right (inclusive).
the root of a binary tree, return all duplicate subtrees.
each kind of duplicate subtrees, you only need to return the root node of any one of them.
trees are duplicate if they have the same structure with the same node values.
are given a 2d array of axis-aligned rectangles. each rectangle[i] = [xi1, yi1, xi2, yi2] denotes the ith rectangle where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner.
the total area covered by all rectangles in the plane. any area covered by two or more rectangles should only be counted once.
the total area. since the answer may be too large, return it modulo 109 + 7.
are given a 2d integer array intervals where intervals[i] = [starti, endi] represents all the integers from starti to endi inclusively.
containing set is an array nums where each interval from intervals has at least two integers in nums.
example, if intervals = [[1,3], [3,7], [8,9]], then [1,2,4,7,8,9] and [2,3,4,8,9] are containing sets.
the minimum possible size of a containing set.
are given a 0-indexed m x n binary matrix grid. you can move from a cell (row, col) to any of the cells (row + 1, col) or (row, col + 1) that has the value 1. the matrix is disconnected if there is no path from (0, 0) to (m - 1, n - 1).
can flip the value of at most one (possibly none) cell. you cannot flip the cells (0, 0) and (m - 1, n - 1).
true if it is possible to make the matrix disconnect or false otherwise.
that flipping a cell changes its value from 0 to 1 or from 1 to 0.
have information about n different recipes. you are given a string array recipes and a 2d string array ingredients. the ith recipe has the name recipes[i], and you can create it if you have all the needed ingredients from ingredients[i]. ingredients to a recipe may need to be created from other recipes, i.e., ingredients[i] may contain a string that is in recipes.
are also given a string array supplies containing all the ingredients that you initially have, and you have an infinite supply of all of them.
a list of all the recipes that you can create. you may return the answer in any order.
that two recipes may contain each other in their ingredients.
an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in ascending order, return the researcher's h-index.
to the definition of h-index on wikipedia: the h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.
must write an algorithm that runs in logarithmic time.
may recall that an array arr is a mountain array if and only if:
>= 3
exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:
< arr[1] < ... < arr[i - 1] < arr[i]
> arr[i + 1] > ... > arr[arr.length - 1]
an integer array arr, return the length of the longest subarray, which is a mountain. return 0 if there is no mountain subarray.
a special dictionary that searches the words in it by a prefix and a suffix.
the wordfilter class:
words) initializes the object with the words in the dictionary.
pref, string suff) returns the index of the word in the dictionary, which has the prefix pref and the suffix suff. if there is more than one valid index, return the largest of them. if there is no such word in the dictionary, return -1.
integer n is strictly palindromic if, for every base b between 2 and n - 2 (inclusive), the string representation of the integer n in base b is palindromic.
an integer n, return true if n is strictly palindromic and false otherwise.
string is palindromic if it reads the same forward and backward.
head, the head of a linked list, determine if the linked list has a cycle in it.
is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. internally, pos is used to denote the index of the node that tail's next pointer is connected to. note that pos is not passed as a parameter.
true if there is a cycle in the linked list. otherwise, return false.
an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.
define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).
are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). the soldiers are positioned in front of the civilians. that is, all the 1's will appear to the left of all the 0's in each row.
row i is weaker than a row j if one of the following is true:
number of soldiers in row i is less than the number of soldiers in row j.
rows have the same number of soldiers and i < j.
the indices of the k weakest rows in the matrix ordered from weakest to strongest.
split of an integer array is good if:
array is split into three non-empty contiguous subarrays - named left, mid, right respectively from left to right.
sum of the elements in left is less than or equal to the sum of the elements in mid, and the sum of the elements in mid is less than or equal to the sum of the elements in right.
nums, an array of non-negative integers, return the number of good ways to split nums. as the number may be too large, return it modulo 109 + 7.
an infinite binary tree where every node has two children, the nodes are labelled in row order.
the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.
the label of a node in this tree, return the labels in the path from the root of the tree to the node with that label.
are given an integer array deck. there is a deck of cards where every card has a unique integer. the integer on the ith card is deck[i].
can order the deck in any order you want. initially, all the cards start face down (unrevealed) in one deck.
will do the following steps repeatedly until all cards are revealed:
the top card of the deck, reveal it, and take it out of the deck.
there are still cards in the deck then put the next top card of the deck at the bottom of the deck.
there are still unrevealed cards, go back to step 1. otherwise, stop.
an ordering of the deck that would reveal the cards in increasing order.
that the first entry in the answer is considered to be the top of the deck.
a list of non-negative integers nums, arrange them such that they form the largest number and return it.
the result may be very large, so you need to return a string instead of an integer.
are given a 0-indexed integer array nums of length n and an integer k. in an operation, you can choose an element and multiply it by 2.
the maximum possible value of nums[0] | nums[1] | ... | nums[n - 1] that can be obtained after applying the operation on nums at most k times.
that a | b denotes the bitwise or between two integers a and b.
an array of length n sorted in ascending order is rotated between 1 and n times. for example, the array nums = [0,1,2,4,5,6,7] might become:
if it was rotated 4 times.
if it was rotated 7 times.
that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].
the sorted rotated array nums of unique elements, return the minimum element of this array.
must write an algorithm that runs in o(log n) time.
two strings s and t, return true if t is an anagram of s, and false otherwise.
anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
are given a 0-indexed integer array forts of length n representing the positions of several forts. forts[i] can be -1, 0, or 1 where:
represents there is no fort at the ith position.
indicates there is an enemy fort at the ith position.
indicates the fort at the ith the position is under your command.
you have decided to move your army from one of your forts at position i to an empty position j such that:
<= i, j <= n - 1
army travels over enemy forts only. formally, for all k where min(i,j) < k < max(i,j), forts[k] == 0.
moving the army, all the enemy forts that come in the way are captured.
the maximum number of enemy forts that can be captured. in case it is impossible to move your army, or you do not have any fort under your command, return 0.
leetcode will start its ipo soon. in order to sell a good price of its shares to venture capital, leetcode would like to work on some projects to increase its capital before the ipo. since it has limited resources, it can only finish at most k distinct projects before the ipo. help leetcode design the best way to maximize its total capital after finishing at most k distinct projects.
are given n projects where the ith project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.
you have w capital. when you finish a project, you will obtain its pure profit and the profit will be added to your total capital.
a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital.
answer is guaranteed to fit in a 32-bit signed integer.
are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] represents a connection between computers ai and bi. any computer can reach any other computer directly or indirectly through the network.
are given an initial computer network connections. you can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.
the minimum number of times you need to do this in order to make all the computers connected. if it is not possible, return -1.
the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].
the array in the form [x1,y1,x2,y2,...,xn,yn].
count-and-say sequence is a sequence of digit strings defined by the recursive formula:
= "1"
is the way you would "say" the digit string from countandsay(n-1), which is then converted into a different digit string.
determine how you "say" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. then for each substring, say the number of digits, then say the digit. finally, concatenate every said digit.
example, the saying and conversion for digit string "3322251":
a positive integer n, return the nth term of the count-and-say sequence.
is a 1 million by 1 million grid on an xy-plane, and the coordinates of each grid square are (x, y).
start at the source = [sx, sy] square and want to reach the target = [tx, ty] square. there is also an array of blocked squares, where each blocked[i] = [xi, yi] represents a blocked square with coordinates (xi, yi).
move, we can walk one square north, east, south, or west if the square is not in the array of blocked squares. we are also not allowed to walk outside of the grid.
true if and only if it is possible to reach the target square from the source square through a sequence of valid moves.
are given a 0-indexed integer array nums representing the strength of some heroes. the power of a group of heroes is defined as follows:
i0, i1, ... ,ik be the indices of the heroes in a group. then, the power of this group is max(nums[i0], nums[i1], ... ,nums[ik])2 * min(nums[i0], nums[i1], ... ,nums[ik]).
the sum of the power of all non-empty groups of heroes possible. since the sum could be very large, return it modulo 109 + 7.
a string path, where path[i] = 'n', 's', 'e' or 'w', each representing moving one unit north, south, east, or west, respectively. you start at the origin (0, 0) on a 2d plane and walk on the path specified by path.
true if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited. return false otherwise.
are playing the guess game. the game is as follows:
pick a number from 1 to n. you have to guess which number i picked.
time you guess wrong, i will tell you whether the number i picked is higher or lower than your guess.
call a pre-defined api int guess(int num), which returns three possible results:
your guess is higher than the number i picked (i.e. num > pick).
your guess is lower than the number i picked (i.e. num < pick).
your guess is equal to the number i picked (i.e. num == pick).
the number that i picked.
an array arr, replace every element in that array with the greatest element among the elements to its right, and replace the last element with -1.
doing so, return the array.
a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s.
distance between two indices i and j is abs(i - j), where abs is the absolute value function.
a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino.
the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].
binary matrix is a matrix in which all the elements are either 0 or 1.
quadtree1 and quadtree2. quadtree1 represents a n * n binary matrix and quadtree2 represents another n * n binary matrix.
a quad-tree representing the n * n binary matrix which is the result of logical bitwise or of the two binary matrixes represented by quadtree1 and quadtree2.
that you can assign the value of a node to true or false when isleaf is false, and both are accepted in the answer.
quad-tree is a tree data structure in which each internal node has exactly four children. besides, each node has two attributes:
true if the node represents a grid of 1's or false if the node represents a grid of 0's.
true if the node is leaf node on the tree or false if the node has the four children.
node {
boolean val;
boolean isleaf;
node topleft;
node topright;
node bottomleft;
node bottomright;

can construct a quad-tree from a two-dimensional area using the following steps:
the current grid has the same value (i.e all 1's or all 0's) set isleaf true and set val to the value of the grid and set the four children to null and stop.
the current grid has different values, set isleaf to false and set val to any value and divide the current grid into four sub-grids as shown in the photo.
for each of the children with the proper sub-grid.
you want to know more about the quad-tree, you can refer to the wiki.
format:
input/output represents the serialized format of a quad-tree using level order traversal, where null signifies a path terminator where no node exists below.
is very similar to the serialization of the binary tree. the only difference is that the node is represented as a list [isleaf, val].
the value of isleaf or val is true we represent it as 1 in the list [isleaf, val] and if the value of isleaf or val is false we represent it as 0.
a string s, reverse only all the vowels in the string and return it.
vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.
are given a binary string binary consisting of only 0's or 1's. you can apply each of the following operations any number of times:
1: if the number contains the substring "00", you can replace it with "10".
example, "00010" -> "10010"
2: if the number contains the substring "10", you can replace it with "01".
example, "00010" -> "00001"
the maximum binary string you can obtain after any number of operations. binary string x is greater than binary string y if x's decimal representation is greater than y's decimal representation.
a class arraywrapper that accepts an array of integers in it's constructor. this class should have two features:
two instances of this class are added together with the + operator, the resulting value is the sum of all the elements in both arrays.
the string() function is called on the instance, it will return a comma separated string surrounded by brackets. for example, [1,2,3].
chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an l). the possible movements of chess knight are shown in this diagaram:
chess knight can move as indicated in the chess diagram below:
have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell).
an integer n, return how many distinct phone numbers of length n we can dial.
are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. all jumps should be valid knight jumps.
the answer may be very large, return the answer modulo 109 + 7.
a binary tree root, return the maximum sum of all keys of any sub-tree which is also a binary search tree (bst).
a bst is defined as follows:
left subtree of a node contains only nodes with keys less than the node's key.
right subtree of a node contains only nodes with keys greater than the node's key.
the left and right subtrees must also be binary search trees.
two integers num1 and num2, return the sum of the two integers.
an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. the relative order of the elements should be kept the same. then return the number of unique elements in nums.
the number of unique elements of nums to be k, to get accepted, you need to do the following things:
the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. the remaining elements of nums are not important as well as the size of nums.
k.
judge:
judge will test your solution with the following code:
nums = [...]; // input array
expectednums = [...]; // the expected answer with correct length

k = removeduplicates(nums); // calls your implementation

k == expectednums.length;
(int i = 0; i < k; i++) {
nums[i] == expectednums[i];

all assertions pass, then your solution will be accepted.
a positive integer n, you can apply one of the following operations:
n is even, replace n with n / 2.
n is odd, replace n with either n + 1 or n - 1.
the minimum number of operations needed for n to become 1.
an integer means to reverse all its digits.
example, reversing 2021 gives 1202. reversing 12300 gives 321 as the leading zeros are not retained.
an integer num, reverse num to get reversed1, then reverse reversed1 to get reversed2. return true if reversed2 equals num. otherwise return false.
are given an m x n integer matrix points (0-indexed). starting with 0 points, you want to maximize the number of points you can get from the matrix.
gain points, you must pick one cell in each row. picking the cell at coordinates (r, c) will add points[r][c] to your score.
you will lose points if you pick a cell too far from the cell that you picked in the previous row. for every two adjacent rows r and r + 1 (where 0 <= r < m - 1), picking cells at coordinates (r, c1) and (r + 1, c2) will subtract abs(c1 - c2) from your score.
the maximum number of points you can achieve.
is defined as:
for x >= 0.
for x < 0.
a list of folders folder, return the folders after removing all sub-folders in those folders. you may return the answer in any order.
a folder[i] is located within another folder[j], it is called a sub-folder of it.
format of a path is one or more concatenated strings of the form: '/' followed by one or more lowercase english letters.
example, "/leetcode" and "/leetcode/problems" are valid paths while an empty string and "/" are not.
an input string s, reverse the order of the words.
word is defined as a sequence of non-space characters. the words in s will be separated by at least one space.
a string of the words in reverse order concatenated by a single space.
that s may contain leading or trailing spaces or multiple spaces between two words. the returned string should only have a single space separating the words. do not include any extra spaces.
magical string s consists of only '1' and '2' and obeys the following rules:
string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.
first few elements of s is s = "1221121221221121122â¦â¦". if we group the consecutive 1's and 2's in s, it will be "1 22 11 2 1 22 1 22 11 2 11 22 ......" and the occurrences of 1's or 2's in each group are "1 2 2 1 1 2 1 2 2 1 2 2 ......". you can see that the occurrence sequence is s itself.
an integer n, return the number of 1's in the first n number in the magical string s.
are given an m x n integer matrix grid.
define an hourglass as a part of the matrix with the following form:
the maximum sum of the elements of an hourglass.
that an hourglass cannot be rotated and must be entirely contained within the matrix.
a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. if there are no two adjacent 1's, return 0.
1's are adjacent if there are only 0's separating them (possibly no 0's). the distance between two 1's is the absolute difference between their bit positions. for example, the two 1's in "1001" have a distance of 3.
an m x n matrix mat, return an array of all the elements of the array in a diagonal order.
a garden represented as an infinite 2d grid, there is an apple tree planted at every integer coordinate. the apple tree planted at an integer coordinate (i, j) has |i| + |j| apples growing on it.
will buy an axis-aligned square plot of land that is centered at (0, 0).
an integer neededapples, return the minimum perimeter of a plot such that at least neededapples apples are inside or on the perimeter of that plot.
value of |x| is defined as:
if x >= 0
if x < 0
a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized. the two subsequences are disjoint if they do not both pick a character at the same index.
the maximum possible product of the lengths of the two palindromic subsequences.
subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. a string is palindromic if it reads the same forward and backward.
an array nums of positive integers. your task is to select some subset of nums, multiply each element by an integer and add all these numbers. the array is said to be good if you can obtain a sum of 1 from the array by any possible subset and multiplicand.
true if the array is good otherwise return false.
a string s of lowercase letters, these letters form consecutive groups of the same character.
example, a string like s = "abbxxxxzyy" has the groups "a", "bb", "xxxx", "z", and "yy".
group is identified by an interval [start, end], where start and end denote the start and end indices (inclusive) of the group. in the above example, "xxxx" has the interval [3,6].
group is considered large if it has 3 or more characters.
the intervals of every large group sorted in increasing order by start index.
an integer array nums, find three numbers whose product is maximum and return the maximum product.
two strings ransomnote and magazine, return true if ransomnote can be constructed by using the letters from magazine and false otherwise.
letter in magazine can only be used once in ransomnote.
is an integer array perm that is a permutation of the first n positive integers, where n is always odd.
was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] xor perm[i + 1]. for example, if perm = [1,3,2], then encoded = [2,1].
the encoded array, return the original array perm. it is guaranteed that the answer exists and is unique.
a function fn, return a curried version of that function.
curried function is a function that accepts fewer or an equal number of parameters as the original function and returns either another curried function or the same value the original function would have returned.
practical terms, if you called the original function like sum(1,2,3), you would call the curried version like csum(1)(2)(3), csum(1)(2,3), csum(1,2)(3), or csum(1,2,3). all these methods of calling the curried function should return the same value as the original.
to a bug, there are many duplicate folders in a file system. you are given a 2d array paths, where paths[i] is an array representing an absolute path to the ith folder in the file system.
example, ["one", "two", "three"] represents the path "/one/two/three".
folders (not necessarily on the same level) are identical if they contain the same non-empty set of identical subfolders and underlying subfolder structure. the folders do not need to be at the root level to be identical. if two or more folders are identical, then mark the folders as well as all their subfolders.
example, folders "/a" and "/b" in the file structure below are identical. they (as well as their subfolders) should all be marked:








if the file structure also included the path "/b/w", then the folders "/a" and "/b" would not be identical. note that "/a/x" and "/b/x" would still be considered identical even with the added folder.
all the identical folders and their subfolders have been marked, the file system will delete all of them. the file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted.
the 2d array ans containing the paths of the remaining folders after deleting all the marked folders. the paths may be returned in any order.
string originaltext is encoded using a slanted transposition cipher to a string encodedtext with the help of a matrix having a fixed number of rows rows.
is placed first in a top-left to bottom-right manner.
blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of originaltext. the arrow indicates the order in which the cells are filled. all empty cells are filled with ' '. the number of columns is chosen such that the rightmost column will not be empty after filling in originaltext.
is then formed by appending all characters of the matrix in a row-wise fashion.
characters in the blue cells are appended first to encodedtext, then the red cells, and so on, and finally the yellow cells. the arrow indicates the order in which the cells are accessed.
example, if originaltext = "cipher" and rows = 3, then we encode it in the following manner:
blue arrows depict how originaltext is placed in the matrix, and the red arrows denote the order in which encodedtext is formed. in the above example, encodedtext = "ch ie pr".
the encoded string encodedtext and number of rows rows, return the original string originaltext.
originaltext does not have any trailing spaces ' '. the test cases are generated such that there is only one possible originaltext.
are entering a competition, and are given two positive integers initialenergy and initialexperience denoting your initial energy and initial experience respectively.
are also given two 0-indexed integer arrays energy and experience, both of length n.
will face n opponents in order. the energy and experience of the ith opponent is denoted by energy[i] and experience[i] respectively. when you face an opponent, you need to have both strictly greater experience and energy to defeat them and move to the next opponent if available.
the ith opponent increases your experience by experience[i], but decreases your energy by energy[i].
starting the competition, you can train for some number of hours. after each hour of training, you can either choose to increase your initial experience by one, or increase your initial energy by one.
the minimum number of training hours required to defeat all n opponents.
two arrays of integers nums and index. your task is to create target array under the following rules:
target array is empty.
left to right read nums[i] and index[i], insert at index index[i] the value nums[i] in target array.
the previous step until there are no elements to read in nums and index.
the target array.
is guaranteed that the insertion operations will be valid.
given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. each character in stones is a type of stone you have. you want to know how many of the stones you have are also jewels.
are case sensitive, so "a" is considered a different type of stone from "a".
the head of a singly linked list, return the middle node of the linked list.
there are two middle nodes, return the second middle node.
an integer array nums, return the most frequent even element.
there is a tie, return the smallest one. if there is no such element, return -1.
perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. a divisor of an integer x is an integer that can divide x evenly.
an integer n, return true if n is a perfect number, otherwise return false.
are given an m x n grid. each cell of grid represents a street. the street of grid[i][j] can be:
which means a street connecting the left cell and the right cell.
which means a street connecting the upper cell and the lower cell.
which means a street connecting the left cell and the lower cell.
which means a street connecting the right cell and the lower cell.
which means a street connecting the left cell and the upper cell.
which means a street connecting the right cell and the upper cell.
will initially start at the street of the upper-left cell (0, 0). a valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1). the path should only follow the streets.
that you are not allowed to change any street.
true if there is a valid path in the grid or false otherwise.
are a total of numcourses courses you have to take, labeled from 0 to numcourses - 1. you are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course ai first if you want to take course bi.
example, the pair [0, 1] indicates that you have to take course 0 before you can take course 1.
can also be indirect. if course a is a prerequisite of course b, and course b is a prerequisite of course c, then course a is a prerequisite of course c.
are also given an array queries where queries[j] = [uj, vj]. for the jth query, you should answer whether course uj is a prerequisite of course vj or not.
a boolean array answer, where answer[j] is the answer to the jth query.
boolean expression is an expression that evaluates to either true or false. it can be in one of the following shapes:
that evaluates to true.
that evaluates to false.
that evaluates to the logical not of the inner expression subexpr.
subexpr2, ..., subexprn)' that evaluates to the logical and of the inner expressions subexpr1, subexpr2, ..., subexprn where n >= 1.
subexpr2, ..., subexprn)' that evaluates to the logical or of the inner expressions subexpr1, subexpr2, ..., subexprn where n >= 1.
a string expression that represents a boolean expression, return the evaluation of that expression.
is guaranteed that the given expression is valid and follows the given rules.
a 0-indexed string word and a character ch, reverse the segment of word that starts at index 0 and ends at the index of the first occurrence of ch (inclusive). if the character ch does not exist in word, do nothing.
example, if word = "abcdefd" and ch = "d", then you should reverse the segment that starts at 0 and ends at 3 (inclusive). the resulting string will be "dcbaefd".
the resulting string.
two integer arrays nums1 and nums2, return an array of their intersection. each element in the result must be unique and you may return the result in any order.
are given n different types of stickers. each sticker has a lowercase english word on it.
would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. you can use each sticker more than once if you want, and you have infinite quantities of each sticker.
the minimum number of stickers that you need to spell out target. if the task is impossible, return -1.
in all test cases, all words were chosen randomly from the 1000 most common us english words, and target was chosen as a concatenation of two random words.
2 integers n and start. your task is return any permutation p of (0,1,2.....,2^n -1) such that :
= start
and p[i+1] differ by only one bit in their binary representation.
and p[2^n -1] must also differ by only one bit in their binary representation.
are given a positive integer num. you may swap any two digits of num that have the same parity (i.e. both odd digits or both even digits).
the largest possible value of num after any number of swaps.
thief has found himself a new place for his thievery again. there is only one entrance to this area, called root.
the root, each house has one and only one parent house. after a tour, the smart thief realized that all houses in this place form a binary tree. it will automatically contact the police if two directly-linked houses were broken into on the same night.
the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.
are given two strings s and t consisting of only lowercase english letters.
the minimum number of characters that need to be appended to the end of s so that t becomes a subsequence of s.
subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
are given a string s and a positive integer k.
a set of non-overlapping substrings from the string s that satisfy the following conditions:
length of each substring is at least k.
substring is a palindrome.
the maximum number of substrings in an optimal selection.
substring is a contiguous sequence of characters within a string.
the root of a binary tree and an integer limit, delete all insufficient nodes in the tree simultaneously, and return the root of the resulting binary tree.
node is insufficient if every root to leaf path intersecting this node has a sum strictly less than limit.
leaf is a node with no children.
have an initial power of power, an initial score of 0, and a bag of tokens where tokens[i] is the value of the ith token (0-indexed).
goal is to maximize your total score by potentially playing each token in one of two ways:
your current power is at least tokens[i], you may play the ith token face up, losing tokens[i] power and gaining 1 score.
your current score is at least 1, you may play the ith token face down, gaining tokens[i] power and losing 1 score.
token may be played at most once and in any order. you do not have to play all the tokens.
the largest possible score you can achieve after playing any number of tokens.
next greater element of some element x in an array is the first greater element that is to the right of x in the same array.
are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.
each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. if there is no next greater element, then the answer for this query is -1.
an array ans of length nums1.length such that ans[i] is the next greater element as described above.
a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.
code snippet is valid if all the following rules hold:
code must be wrapped in a valid closed tag. otherwise, the code is invalid.
closed tag (not necessarily valid) has exactly the following format : <tag_name>tag_content</tag_name>. among them, <tag_name> is the start tag, and </tag_name> is the end tag. the tag_name in start and end tags should be the same. a closed tag is valid if and only if the tag_name and tag_content are valid.
valid tag_name only contain upper-case letters, and has length in range [1,9]. otherwise, the tag_name is invalid.
valid tag_content may contain other valid closed tags, cdata and any characters (see note1) except unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid tag_name. otherwise, the tag_content is invalid.
start tag is unmatched if no end tag exists with the same tag_name, and vice versa. however, you also need to consider the issue of unbalanced when tags are nested.
< is unmatched if you cannot find a subsequent >. and when you find a < or </, all the subsequent characters until the next > should be parsed as tag_name (not necessarily valid).
cdata has the following format : <![cdata[cdata_content]]>. the range of cdata_content is defined as the characters between <![cdata[ and the first subsequent ]]>.
may contain any characters. the function of cdata is to forbid the validator to parse cdata_content, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.
are given an integer array nums. the adjacent integers in nums will perform the float division.
example, for nums = [2,3,4], we will evaluate the expression "2/3/4".
you can add any number of parenthesis at any position to change the priority of operations. you want to add these parentheses such the value of the expression after the evaluation is maximum.
the corresponding expression that has the maximum value in string format.
your expression should not contain redundant parenthesis.
a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.
following rules define a valid string:
left parenthesis '(' must have a corresponding right parenthesis ')'.
right parenthesis ')' must have a corresponding left parenthesis '('.
parenthesis '(' must go before the corresponding right parenthesis ')'.
could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string "".
are given a string s and an integer array indices of the same length. the string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.
the shuffled string.
certain bug's home is on the x-axis at position x. help them get there from position 0.
bug jumps according to the following rules:
can jump exactly a positions forward (to the right).
can jump exactly b positions backward (to the left).
cannot jump backward twice in a row.
cannot jump to any forbidden positions.
bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers.
an array of integers forbidden, where forbidden[i] means that the bug cannot jump to the position forbidden[i], and integers a, b, and x, return the minimum number of jumps needed for the bug to reach its home. if there is no possible sequence of jumps that lands the bug on position x, return -1.
has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupsize, and consists of groupsize consecutive cards.
an integer array hand where hand[i] is the value written on the ith card and an integer groupsize, return true if she can rearrange the cards, or false otherwise.
the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.
first node is considered odd, and the second node is even, and so on.
that the relative order inside both the even and odd groups should remain as it was in the input.
must solve the problem in o(1) extra space complexity and o(n) time complexity.
an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.
are given an integer array nums of size n.
a non-empty subarray from nums that has the maximum possible bitwise and.
other words, let k be the maximum value of the bitwise and of any subarray of nums. then, only subarrays with a bitwise and equal to k should be considered.
the length of the longest such subarray.
bitwise and of an array is the bitwise and of all the numbers in it.
subarray is a contiguous sequence of elements within an array.
exists an infinitely large two-dimensional grid of uncolored unit cells. you are given a positive integer n, indicating that you must do the following routine for n minutes:
the first minute, color any arbitrary unit cell blue.
minute thereafter, color blue every uncolored cell that touches a blue cell.
is a pictorial representation of the state of the grid after minutes 1, 2, and 3.
the number of colored cells at the end of n minutes.
path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. a node can only appear in the sequence at most once. note that the path does not need to pass through the root.
path sum of a path is the sum of the node's values in the path.
the root of a binary tree, return the maximum path sum of any non-empty path.
are given an integer array nums sorted in non-decreasing order.
and return an integer array result with the same length as nums such that result[i] is equal to the summation of absolute differences between nums[i] and all the other elements in the array.
other words, result[i] is equal to sum(|nums[i]-nums[j]|) where 0 <= j < nums.length and j != i (0-indexed).
are given two 0-indexed integer arrays nums and multipliers of size n and m respectively, where n >= m.
begin with a score of 0. you want to perform exactly m operations. on the ith operation (0-indexed) you will:
one integer x from either the start or the end of the array nums.
multipliers[i] * x to your score.
that multipliers[0] corresponds to the first operation, multipliers[1] to the second operation, and so on.
x from nums.
the maximum score after performing m operations.
are given a 0-indexed array of non-negative integers nums. for each integer in nums, you must find its respective second greater integer.
second greater integer of nums[i] is nums[j] such that:
> i
> nums[i]
exists exactly one index k such that nums[k] > nums[i] and i < k < j.
there is no such nums[j], the second greater integer is considered to be -1.
example, in the array [1, 2, 4, 3], the second greater integer of 1 is 4, 2 is 3, and that of 3 and 4 is -1.
an integer array answer, where answer[i] is the second greater integer of nums[i].
two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.
there exist multiple answers, you can return any of them.
a data structure that supports adding new words and finding if a string matches any previously added string.
the worddictionary class:
initializes the object.
addword(word) adds word to the data structure, it can be matched later.
search(word) returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.








worddictionary = new worddictionary();



// return false
// return true
// return true
// return true

<= word.length <= 25
in addword consists of lowercase english letters.
in search consist of '.' or lowercase english letters.
will be at most 2 dots in word for search queries.
most 104 calls will be made to addword and search.
an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts.
falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.
fancy string is a string where no three consecutive characters are equal.
a string s, delete the minimum possible number of characters from s to make it fancy.
the final string after the deletion. it can be shown that the answer will always be unique.
are given two strings, word1 and word2. you want to construct a string in the following manner:
some non-empty subsequence subsequence1 from word1.
some non-empty subsequence subsequence2 from word2.
the subsequences: subsequence1 + subsequence2, to make the string.
the length of the longest palindrome that can be constructed in the described manner. if no palindromes can be constructed, return 0.
subsequence of a string s is a string that can be made by deleting some (possibly none) characters from s without changing the order of the remaining characters.
palindrome is a string that reads the same forward as well as backward.
are given a stream of points on the x-y plane. design an algorithm that:
new points from the stream into a data structure. duplicate points are allowed and should be treated as different points.
a query point, counts the number of ways to choose three points from the data structure such that the three points and the query point form an axis-aligned square with positive area.
axis-aligned square is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis.
the detectsquares class:
initializes the object with an empty data structure.
add(int[] point) adds a new point point = [x, y] to the data structure.
count(int[] point) counts the number of ways to form axis-aligned squares with point point = [x, y] as described above.
are given an integer array nums and an integer k.
each index i where 0 <= i < nums.length, change nums[i] to be either nums[i] + k or nums[i] - k.
score of nums is the difference between the maximum and minimum elements in nums.
the minimum score of nums after changing the values at each index.
an integer array nums, return the number of elements that have both a strictly smaller and a strictly greater element appear in nums.
an n x n array of integers matrix, return the minimum sum of any falling path through matrix.
falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).
an integer n, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to n. you can return the answer in any order.
a program to solve a sudoku puzzle by filling the empty cells.
sudoku solution must satisfy all of the following rules:
of the digits 1-9 must occur exactly once in each row.
of the digits 1-9 must occur exactly once in each column.
of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
'.' character indicates empty cells.
are n points on a road you are driving your taxi on. the n points on the road are labeled from 1 to n in the direction you are going, and you want to drive from point 1 to point n to make money by picking up passengers. you cannot change the direction of the taxi.
passengers are represented by a 0-indexed 2d integer array rides, where rides[i] = [starti, endi, tipi] denotes the ith passenger requesting a ride from point starti to point endi who is willing to give a tipi dollar tip.
each passenger i you pick up, you earn endi - starti + tipi dollars. you may only drive at most one passenger at a time.
n and rides, return the maximum number of dollars you can earn by picking up the passengers optimally.
you may drop off a passenger and pick up a different passenger at the same point.
two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.
the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2. elements that do not appear in arr2 should be placed at the end of arr1 in ascending order.
an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.
must do it in place.
are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.
cells are connected horizontally/vertically (not diagonally). the grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).
island doesn't have "lakes", meaning the water inside isn't connected to the water around the island. one cell is a square with side length 1. the grid is rectangular, width and height don't exceed 100. determine the perimeter of the island.
f(x) be the number of zeroes at the end of x!. recall that x! = 1 * 2 * 3 * ... * x and by convention, 0! = 1.
example, f(3) = 0 because 3! = 6 has no zeroes at the end, while f(11) = 2 because 11! = 39916800 has two zeroes at the end.
an integer k, return the number of non-negative integers x have the property that f(x) = k.
is an undirected tree with n nodes labeled from 0 to n - 1, rooted at node 0. you are given a 2d integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.
every node i, there is a gate. you are also given an array of even integers amount, where amount[i] represents:
price needed to open the gate at node i, if amount[i] is negative, or,
cash reward obtained on opening the gate at node i, otherwise.
game goes on as follows:
alice is at node 0 and bob is at node bob.
every second, alice and bob each move to an adjacent node. alice moves towards some leaf node, while bob moves towards node 0.
every node along their path, alice and bob either spend money to open the gate at that node, or accept the reward. note that:
the gate is already open, no price will be required, nor will there be any cash reward.
alice and bob reach the node simultaneously, they share the price/reward for opening the gate there. in other words, if the price to open the gate is c, then both alice and bob pay c / 2 each. similarly, if the reward at the gate is c, both of them receive c / 2 each.
alice reaches a leaf node, she stops moving. similarly, if bob reaches node 0, he stops moving. note that these events are independent of each other.
the maximum net income alice can have if she travels towards the optimal leaf node.
are given a string s.
split is called good if you can split s into two non-empty strings sleft and sright where their concatenation is equal to s (i.e., sleft + sright = s) and the number of distinct letters in sleft and sright is the same.
the number of good splits you can make in s.
are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1].
split arr into some number of chunks (i.e., partitions), and individually sort each chunk. after concatenating them, the result should equal the sorted array.
the largest number of chunks we can make to sort the array.
an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.
must write an algorithm that runs in o(n) time and uses only constant extra space.
a binary string s, return true if the longest contiguous segment of 1's is strictly longer than the longest contiguous segment of 0's in s, or return false otherwise.
example, in s = "110100010" the longest continuous segment of 1s has length 2, and the longest continuous segment of 0s has length 3.
that if there are no 0's, then the longest continuous segment of 0's is considered to have a length 0. the same applies if there is no 1's.
program was supposed to print an array of integers. the program forgot to print whitespaces and the array is printed as a string of digits s and all we know is that all integers in the array were in the range [1, k] and there are no leading zeros in the array.
the string s and the integer k, return the number of the possible arrays that can be printed as s using the mentioned program. since the answer may be very large, return it modulo 109 + 7.
an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.
sum s(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.
are given a (0-indexed) array of positive integers candiescount where candiescount[i] represents the number of candies of the ith type you have. you are also given a 2d array queries where queries[i] = [favoritetypei, favoritedayi, dailycapi].
play a game with the following rules:
start eating candies on day 0.
cannot eat any candy of type i unless you have eaten all candies of type i - 1.
must eat at least one candy per day until you have eaten all the candies.
a boolean array answer such that answer.length == queries.length and answer[i] is true if you can eat a candy of type favoritetypei on day favoritedayi without eating more than dailycapi candies on any day, and false otherwise. note that you can eat different types of candy on the same day, provided that you follow rule 2.
the constructed array answer.
is an undirected weighted connected graph. you are given a positive integer n which denotes that the graph has n nodes labeled from 1 to n, and an array edges where each edges[i] = [ui, vi, weighti] denotes that there is an edge between nodes ui and vi with weight equal to weighti.
path from node start to node end is a sequence of nodes [z0, z1, z2, ..., zk] such that z0 = start and zk = end and there is an edge between zi and zi+1 where 0 <= i <= k-1.
distance of a path is the sum of the weights on the edges of the path. let distancetolastnode(x) denote the shortest distance of a path between node n and node x. a restricted path is a path that also satisfies that distancetolastnode(zi) > distancetolastnode(zi+1) where 0 <= i <= k-1.
the number of restricted paths from node 1 to node n. since that number may be too large, return it modulo 109 + 7.
are given an array nums consisting of positive integers.
are also given an integer array queries of size m. for the ith query, you want to make all of the elements of nums equal to queries[i]. you can perform the following operation on the array any number of times:
or decrease an element of the array by 1.
an array answer of size m where answer[i] is the minimum number of operations to make all elements of nums equal to queries[i].
that after each query the array is reset to its original state.
an alphabet board, we start at position (0, 0), corresponding to character board[0][0].
board = ["abcde", "fghij", "klmno", "pqrst", "uvwxy", "z"], as shown in the diagram below.
may make the following moves:
moves our position up one row, if the position exists on the board;
moves our position down one row, if the position exists on the board;
moves our position left one column, if the position exists on the board;
moves our position right one column, if the position exists on the board;
adds the character board[r][c] at our current position (r, c) to the answer.
the only positions that exist on the board are positions with letters on them.)
a sequence of moves that makes our answer equal to target in the minimum number of moves. you may return any path that does so.
a 2d integer array circles where circles[i] = [xi, yi, ri] represents the center (xi, yi) and radius ri of the ith circle drawn on a grid, return the number of lattice points that are present inside at least one circle.

lattice point is a point with integer coordinates.
that lie on the circumference of a circle are also considered to be inside it.
are given the root of a binary tree with n nodes. each node is uniquely assigned a value from 1 to n. you are also given an integer startvalue representing the value of the start node s, and a different integer destvalue representing the value of the destination node t.
the shortest path starting from node s and ending at node t. generate step-by-step directions of such path as a string consisting of only the uppercase letters 'l', 'r', and 'u'. each letter indicates a specific direction:
means to go from a node to its left child node.
means to go from a node to its right child node.
means to go from a node to its parent node.
the step-by-step directions of the shortest path from node s to node t.
music player contains n different songs. you want to listen to goal songs (not necessarily different) during your trip. to avoid boredom, you will create a playlist so that:
song is played at least once.
song can only be played again only if k other songs have been played.
n, goal, and k, return the number of possible playlists that you can create. since the answer can be very large, return it modulo 109 + 7.
are given a 2d integer array logs where each logs[i] = [birthi, deathi] indicates the birth and death years of the ith person.
population of some year x is the number of people alive during that year. the ith person is counted in year x's population if x is in the inclusive range [birthi, deathi - 1]. note that the person is not counted in the year that they die.
the earliest year with the maximum population.
are given an integer array nums and two integers mink and maxk.
fixed-bound subarray of nums is a subarray that satisfies the following conditions:
minimum value in the subarray is equal to mink.
maximum value in the subarray is equal to maxk.
the number of fixed-bound subarrays.
subarray is a contiguous part of an array.
are n friends that are playing a game. the friends are sitting in a circle and are numbered from 1 to n in clockwise order. more formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.
rules of the game are as follows:
at the 1st friend.
the next k friends in the clockwise direction including the friend you started at. the counting wraps around the circle and may count some friends more than once.
last friend you counted leaves the circle and loses the game.
there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.
the last friend in the circle wins the game.
the number of friends, n, and an integer k, return the winner of the game.
are n cities numbered from 1 to n. you are given an array edges of size n-1, where edges[i] = [ui, vi] represents a bidirectional edge between cities ui and vi. there exists a unique path between each pair of cities. in other words, the cities form a tree.
subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. two subtrees are different if there is a city in one subtree that is not present in the other.
each d from 1 to n-1, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to d.
an array of size n-1 where the dth element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to d.
that the distance between the two cities is the number of edges in the path between them.
array nums of length n is beautiful if:
is a permutation of the integers in the range [1, n].
every 0 <= i < j < n, there is no index k with i < k < j where 2 * nums[k] == nums[i] + nums[j].
the integer n, return any beautiful array nums of length n. there will be at least one valid answer for the given n.
n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.
a valid (ipv4) ip address, return a defanged version of that ip address.
defanged ip address replaces every period "." with "[.]".
bits of a given 32 bits unsigned integer.

that in some languages, such as java, there is no unsigned integer type. in this case, both input and output will be given as a signed integer type. they should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
java, the compiler represents the signed integers using 2's complement notation. therefore, in example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
a system that manages the reservation state of n seats that are numbered from 1 to n.
the seatmanager class:
n) initializes a seatmanager object that will manage n seats numbered from 1 to n. all seats are initially available.
reserve() fetches the smallest-numbered unreserved seat, reserves it, and returns its number.
unreserve(int seatnumber) unreserves the seat with the given seatnumber.
are given a string s and array queries where queries[i] = [lefti, righti, ki]. we may rearrange the substring s[lefti...righti] for each query and then choose up to ki of them to replace with any lowercase english letter.
the substring is possible to be a palindrome string after the operations above, the result of the query is true. otherwise, the result is false.
a boolean array answer where answer[i] is the result of the ith query queries[i].
that each letter is counted individually for replacement, so if, for example s[lefti...righti] = "aaa", and ki = 2, we can only replace two of the letters. also, note that no query modifies the initial string s.
:
s = "abcda", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]
[true,false,false,true,true]

substring = "d", is palidrome.
substring = "bc", is not palidrome.
substring = "abcd", is not palidrome after replacing only 1 character.
substring = "abcd", could be changed to "abba" which is palidrome. also this can be changed to "baab" first rearrange it "bacd" then replace "cd" with "ab".
substring = "abcda", could be changed to "abcba" which is palidrome.
2:
s = "lyb", queries = [[0,1,0],[2,2,1]]
[false,true]

<= s.length, queries.length <= 105
<= lefti <= righti < s.length
<= ki <= s.length
consists of lowercase english letters.
is a bookstore owner that has a store open for n minutes. every minute, some number of customers enter the store. you are given an integer array customers of length n where customers[i] is the number of the customer that enters the store at the start of the ith minute and all those customers leave after the end of that minute.
some minutes, the bookstore owner is grumpy. you are given a binary array grumpy where grumpy[i] is 1 if the bookstore owner is grumpy during the ith minute, and is 0 otherwise.
the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied.
bookstore owner knows a secret technique to keep themselves not grumpy for minutes consecutive minutes, but can only use it once.
the maximum number of customers that can be satisfied throughout the day.
an integer n, return a string with n characters such that each character in such string occurs an odd number of times.
returned string must contain only lowercase english letters. if there are multiples valid strings, return any of them.
are given a binary array nums and an integer k.
k-bit flip is choosing a subarray of length k from nums and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.
the minimum number of k-bit flips required so that there is no 0 in the array. if it is not possible, return -1.
subarray is a contiguous part of an array.
are working in a ball factory where you have n balls numbered from lowlimit up to highlimit inclusive (i.e., n == highlimit - lowlimit + 1), and an infinite number of boxes numbered from 1 to infinity.
job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. for example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1.
two integers lowlimit and highlimit, return the number of balls in the box with the most balls.
schema
person

column name | type |

id | int |
email | varchar |

is the primary key column for this table.
row of this table contains an email. the emails will not contain uppercase letters.
an sql query to report all the duplicate emails. note that it's guaranteed that the email field is not null.
the result table in any order.
query result format is in the following example.
a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. if no such two words exist, return 0.
are given an integer array nums, and you can perform the following operation any number of times on nums:
the positions of two elements nums[i] and nums[j] if gcd(nums[i], nums[j]) > 1 where gcd(nums[i], nums[j]) is the greatest common divisor of nums[i] and nums[j].
true if it is possible to sort nums in non-decreasing order using the above swap method, or false otherwise.
are given two strings a and b of the same length. choose an index and split both strings at the same index, splitting a into two strings: aprefix and asuffix where a = aprefix + asuffix, and splitting b into two strings: bprefix and bsuffix where b = bprefix + bsuffix. check if aprefix + bsuffix or bprefix + asuffix forms a palindrome.
you split a string s into sprefix and ssuffix, either ssuffix or sprefix is allowed to be empty. for example, if s = "abc", then "" + "abc", "a" + "bc", "ab" + "c" , and "abc" + "" are valid splits.
true if it is possible to form a palindrome string, otherwise return false.
that x + y denotes the concatenation of strings x and y.
is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.
are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. you are also given a 2d integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.
two distinct edges of the tree to form three connected components. for a pair of removed edges, the following steps are defined:
the xor of all the values of the nodes for each of the three components respectively.
difference between the largest xor value and the smallest xor value is the score of the pair.
example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. the three xor values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. the largest xor value is 8 and the smallest xor value is 3. the score is then 8 - 3 = 5.
the minimum score of any possible pair of edge removals on the given tree.
and bob continue their games with stones. there is a row of n stones, and each stone has an associated value. you are given an integer array stones, where stones[i] is the value of the ith stone.
and bob take turns, with alice starting first. on each turn, the player may remove any stone from stones. the player who removes a stone loses if the sum of the values of all removed stones is divisible by 3. bob will win automatically if there are no remaining stones (even if it is alice's turn).
both players play optimally, return true if alice wins and false if bob wins.
have n tiles, where each tile has one letter tiles[i] printed on it.
the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.
are given two strings s and t.
are allowed to remove any number of characters from the string t.
score of the string is 0 if no characters are removed from the string t, otherwise:
left be the minimum index among all removed characters.
right be the maximum index among all removed characters.
the score of the string is right - left + 1.
the minimum possible score to make t a subsequence of s.
subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).
have a cubic storeroom where the width, length, and height of the room are all equal to n units. you are asked to place n boxes in this room where each box is a cube of unit side length. there are however some rules to placing the boxes:
can place the boxes anywhere on the floor.
box x is placed on top of the box y, then each side of the four vertical sides of the box y must either be adjacent to another box or to a wall.
an integer n, return the minimum possible number of boxes touching the floor.
are n cars going to the same destination along a one-lane road. the destination is target miles away.
are given two integer array position and speed, both of length n, where position[i] is the position of the ith car and speed[i] is the speed of the ith car (in miles per hour).
car can never pass another car ahead of it, but it can catch up to it and drive bumper to bumper at the same speed. the faster car will slow down to match the slower car's speed. the distance between these two cars is ignored (i.e., they are assumed to have the same position).
car fleet is some non-empty set of cars driving at the same position and same speed. note that a single car is also a car fleet.
a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.
the number of car fleets that will arrive at the destination.
are given a list nums of integers representing a list compressed with run-length encoding.
each adjacent pair of elements [freq, val] = [nums[2*i], nums[2*i+1]] (with i >= 0). for each such pair, there are freq elements with value val concatenated in a sublist. concatenate all the sublists from left to right to generate the decompressed list.
the decompressed list.
distinct string is a string that is present only once in an array.
an array of strings arr, and an integer k, return the kth distinct string present in arr. if there are fewer than k distinct strings, return an empty string "".
that the strings are considered in the order in which they appear in the array.
are given two strings of the same length s1 and s2 and a string basestr.
say s1[i] and s2[i] are equivalent characters.
example, if s1 = "abc" and s2 = "cde", then we have 'a' == 'c', 'b' == 'd', and 'c' == 'e'.
characters follow the usual rules of any equivalence relation:
'a' == 'a'.
'a' == 'b' implies 'b' == 'a'.
'a' == 'b' and 'b' == 'c' implies 'a' == 'c'.
example, given the equivalency information from s1 = "abc" and s2 = "cde", "acd" and "aab" are equivalent strings of basestr = "eed", and "aab" is the lexicographically smallest equivalent string of basestr.
the lexicographically smallest equivalent string of basestr by using the equivalency information from s1 and s2.
are given two integer arrays nums1 and nums2 of equal length n and an integer k. you can perform the following operation on nums1:
two indexes i and j and increment nums1[i] by k and decrement nums1[j] by k. in other words, nums1[i] = nums1[i] + k and nums1[j] = nums1[j] - k.
is said to be equal to nums2 if for all indices i such that 0 <= i < n, nums1[i] == nums2[i].
the minimum number of operations required to make nums1 equal to nums2. if it is impossible to make them equal, return -1.
two strings s1 and s2, return the lowest ascii sum of deleted characters to make two strings equal.
a sorted array of distinct integers and a target value, return the index if the target is found. if not, return the index where it would be if it were inserted in order.
must write an algorithm with o(log n) runtime complexity.
are given a 0-indexed binary string s which represents a sequence of train cars. s[i] = '0' denotes that the ith car does not contain illegal goods and s[i] = '1' denotes that the ith car does contain illegal goods.
the train conductor, you would like to get rid of all the cars containing illegal goods. you can do any of the following three operations any number of times:
a train car from the left end (i.e., remove s[0]) which takes 1 unit of time.
a train car from the right end (i.e., remove s[s.length - 1]) which takes 1 unit of time.
a train car from anywhere in the sequence which takes 2 units of time.
the minimum time to remove all the cars containing illegal goods.
that an empty sequence of cars is considered to have no cars containing illegal goods.
strings word1 and word2 are considered almost equivalent if the differences between the frequencies of each letter from 'a' to 'z' between word1 and word2 is at most 3.
two strings word1 and word2, each of length n, return true if word1 and word2 are almost equivalent, or false otherwise.
frequency of a letter x is the number of times it occurs in the string.
are given a positive integer n.
even denote the number of even indices in the binary representation of n (0-indexed) with value 1.
odd denote the number of odd indices in the binary representation of n (0-indexed) with value 1.
an integer array answer where answer = [even, odd].
an array of characters chars, compress it using the following algorithm:
with an empty string s. for each group of consecutive repeating characters in chars:
the group's length is 1, append the character to s.
append the character followed by the group's length.
compressed string s should not be returned separately, but instead, be stored in the input character array chars. note that group lengths that are 10 or longer will be split into multiple characters in chars.
you are done modifying the input array, return the new length of the array.
must write an algorithm that uses only constant extra space.
an array of strings words and an integer k, return the k most frequent strings.
the answer sorted by the frequency from highest to lowest. sort the words with the same frequency by their lexicographical order.
schema
sales

column name | type |

sale_id | int |
product_id | int |
year | int |
quantity | int |
price | int |

year) is the primary key of this table.
is a foreign key to product table.
row of this table shows a sale on the product product_id in a certain year.
that the price is per unit.
product

column name | type |

product_id | int |
product_name | varchar |

is the primary key of this table.
row of this table indicates the product name of each product.
an sql query that selects the product id, year, quantity, and price for the first year of every product sold.
the resulting table in any order.
query result format is in the following example.
an integer array arr and a target value target, return the integer value such that when we change all the integers larger than value in the given array to be equal to value, the sum of the array gets as close as possible (in absolute difference) to target.
case of a tie, return the minimum such integer.
that the answer is not neccesarilly a number from arr.
are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the ith job.
are k workers that you can assign jobs to. each job should be assigned to exactly one worker. the working time of a worker is the sum of the time it takes to complete all jobs assigned to them. your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.
the minimum possible maximum working time of any assignment.
are given four integers, m, n, introvertscount, and extrovertscount. you have an m x n grid, and there are two types of people: introverts and extroverts. there are introvertscount introverts and extrovertscount extroverts.
should decide how many people you want to live in the grid and assign each of them one grid cell. note that you do not have to have all the people living in the grid.
happiness of each person is calculated as follows:
start with 120 happiness and lose 30 happiness for each neighbor (introvert or extrovert).
start with 40 happiness and gain 20 happiness for each neighbor (introvert or extrovert).
live in the directly adjacent cells north, east, south, and west of a person's cell.
grid happiness is the sum of each person's happiness. return the maximum possible grid happiness.
are given a string s, a string chars of distinct characters and an integer array vals of the same length as chars.
cost of the substring is the sum of the values of each character in the substring. the cost of an empty string is considered 0.
value of the character is defined in the following way:
the character is not in the string chars, then its value is its corresponding position (1-indexed) in the alphabet.
example, the value of 'a' is 1, the value of 'b' is 2, and so on. the value of 'z' is 26.
assuming i is the index where the character occurs in the string chars, then its value is vals[i].
the maximum cost among all substrings of the string s.
an array of positive integers nums, return the maximum possible sum of an ascending subarray in nums.
subarray is defined as a contiguous sequence of numbers in an array.
subarray [numsl, numsl+1, ..., numsr-1, numsr] is ascending if for all i where l <= i < r, numsi < numsi+1. note that a subarray of size 1 is ascending.
are given a string s and two integers x and y. you can perform two types of operations any number of times.
substring "ab" and gain x points.
example, when removing "ab" from "cabxbae" it becomes "cxbae".
substring "ba" and gain y points.
example, when removing "ba" from "cabxbae" it becomes "cabxe".
the maximum points you can gain after applying the above operations on s.
are given the root of a binary tree that consists of exactly 3 nodes: the root, its left child, and its right child.
true if the value of the root is equal to the sum of the values of its two children, or false otherwise.
have the four functions:
that prints the word "fizz" to the console,
that prints the word "buzz" to the console,
that prints the word "fizzbuzz" to the console, and
that prints a given integer to the console.
are given an instance of the class fizzbuzz that has four functions: fizz, buzz, fizzbuzz and number. the same instance of fizzbuzz will be passed to four different threads:
a: calls fizz() that should output the word "fizz".
b: calls buzz() that should output the word "buzz".
c: calls fizzbuzz() that should output the word "fizzbuzz".
d: calls number() that should only output the integers.
the given class to output the series [1, 2, "fizz", 4, "buzz", ...] where the ith token (1-indexed) of the series is:
if i is divisible by 3 and 5,
if i is divisible by 3 and not 5,
if i is divisible by 5 and not 3, or
if i is not divisible by 3 or 5.
the fizzbuzz class:
n) initializes the object with the number n that represents the length of the sequence that should be printed.
fizz(printfizz) calls printfizz to output "fizz".
buzz(printbuzz) calls printbuzz to output "buzz".
fizzbuzz(printfizzbuzz) calls printfizzbuzz to output "fizzbuzz".
number(printnumber) calls printnumber to output the numbers.
a 0-indexed integer array nums, determine whether there exist two subarrays of length 2 with equal sum. note that the two subarrays must begin at different indices.
true if these subarrays exist, and false otherwise.
subarray is a contiguous non-empty sequence of elements within an array.
are given an m x n integer matrix mat and an integer target.
one integer from each row in the matrix such that the absolute difference between target and the sum of the chosen elements is minimized.
the minimum absolute difference.
absolute difference between two numbers a and b is the absolute value of a - b.
width of a sequence is the difference between the maximum and minimum elements in the sequence.
an array of integers nums, return the sum of the widths of all the non-empty subsequences of nums. since the answer may be very large, return it modulo 109 + 7.
subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. for example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].
are given a string s of even length. split this string into two halves of equal lengths, and let a be the first half and b be the second half.
strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u'). notice that s contains uppercase and lowercase letters.
true if a and b are alike. otherwise, return false.
are given an array of strings tokens that represents an arithmetic expression in a reverse polish notation.
the expression. return an integer that represents the value of the expression.
that:
valid operators are '+', '-', '*', and '/'.
operand may be an integer or another expression.
division between two integers always truncates toward zero.
will not be any division by zero.
input represents a valid arithmetic expression in a reverse polish notation.
answer and all the intermediate calculations can be represented in a 32-bit integer.
an m x n grid. each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. the sign of grid[i][j] can be:
which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1])
which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1])
which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j])
which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j])
that there could be some signs on the cells of the grid that point outside the grid.
will initially start at the upper left cell (0, 0). a valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. the valid path does not have to be the shortest.
can modify the sign on a cell with cost = 1. you can modify the sign on a cell one time only.
the minimum cost to make the grid have at least one valid path.
a rectangular pizza represented as a rows x cols matrix containing the following characters: 'a' (an apple) and '.' (empty cell) and given the integer k. you have to cut the pizza into k pieces using k-1 cuts.
each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. if you cut the pizza vertically, give the left part of the pizza to a person. if you cut the pizza horizontally, give the upper part of the pizza to a person. give the last piece of pizza to the last person.
the number of ways of cutting the pizza such that each piece contains at least one apple. since the answer can be a huge number, return this modulo 10^9 + 7.
a string s and an array of strings words, determine whether s is a prefix string of words.
string s is a prefix string of words if s can be made by concatenating the first k strings in words for some positive k no larger than words.length.
true if s is a prefix string of words, or false otherwise.
a non-negative integer num, return true if num can be expressed as the sum of any non-negative integer and its reverse, or false otherwise.
are given an integer array nums and an array queries where queries[i] = [vali, indexi].
each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums.
an integer array answer where answer[i] is the answer to the ith query.
are n piles of coins on a table. each pile consists of a positive number of coins of assorted denominations.
one move, you can choose any coin on top of any pile, remove it, and add it to your wallet.
a list piles, where piles[i] is a list of integers denoting the composition of the ith pile from top to bottom, and a positive integer k, return the maximum total value of coins you can have in your wallet if you choose exactly k coins optimally.
are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of ith node. the root of the tree is node 0. find the kth ancestor of a given node.
kth ancestor of a tree node is the kth node in the path from that node to the root node.
the treeancestor class:
n, int[] parent) initializes the object with the number of nodes in the tree and the parent array.
getkthancestor(int node, int k) return the kth ancestor of the given node node. if there is no such ancestor, return -1.
an array arr of positive integers, consider all binary trees such that:
node has either 0 or 2 children;
values of arr correspond to the values of each leaf in an in-order traversal of the tree.
value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively.
all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node. it is guaranteed this sum fits into a 32-bit integer.
node is a leaf if and only if it has zero children.
are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. your goal is to visit all the rooms. however, you cannot enter a locked room without having its key.
you visit a room, you may find a set of distinct keys in it. each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.
an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.
schema
employees

column name | type |

emp_id | int |
event_day | date |
in_time | int |
out_time | int |

event_day, in_time) is the primary key of this table.
table shows the employees' entries and exits in an office.
is the day at which this event happened, in_time is the minute at which the employee entered the office, and out_time is the minute at which they left the office.
and out_time are between 1 and 1440.
is guaranteed that no two events on the same day intersect in time, and in_time < out_time.
an sql query to calculate the total time in minutes spent by each employee on each day at the office. note that within one day, an employee can enter and leave more than once. the time spent in the office for a single entry is out_time - in_time.
the result table in any order.
query result format is in the following example.
a binary tree t, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.
binary tree x is flip equivalent to a binary tree y if and only if we can make x equal to y after some number of flip operations.
the roots of two binary trees root1 and root2, return true if the two trees are flip equivalent or false otherwise.
are given a 0-indexed integer array arr, and an m x n integer matrix mat. arr and mat both contain all the integers in the range [1, m * n].
through each index i in arr starting from index 0 and paint the cell in mat containing the integer arr[i].
the smallest index i at which either a row or a column will be completely painted in mat.
and bob have an undirected graph of n nodes and three types of edges:
1: can be traversed by alice only.
2: can be traversed by bob only.
3: can be traversed by both alice and bob.
an array edges where edges[i] = [typei, ui, vi] represents a bidirectional edge of type typei between nodes ui and vi, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both alice and bob. the graph is fully traversed by alice and bob if starting from any node, they can reach all other nodes.
the maximum number of edges you can remove, or return -1 if alice and bob cannot fully traverse the graph.
are given an array time where time[i] denotes the time taken by the ith bus to complete one trip.
bus can make multiple trips successively; that is, the next trip can start immediately after completing the current trip. also, each bus operates independently; that is, the trips of one bus do not influence the trips of any other bus.
are also given an integer totaltrips, which denotes the number of trips all buses should make in total. return the minimum time required for all buses to complete at least totaltrips trips.
are given a 0-indexed 2d integer array grid of size m x n which represents a field. each cell has one of three values:
represents grass,
represents fire,
represents a wall that you and fire cannot pass through.
are situated in the top-left cell, (0, 0), and you want to travel to the safehouse at the bottom-right cell, (m - 1, n - 1). every minute, you may move to an adjacent grass cell. after your move, every fire cell will spread to all adjacent cells that are not walls.
the maximum number of minutes that you can stay in your initial position before moving while still safely reaching the safehouse. if this is impossible, return -1. if you can always reach the safehouse regardless of the minutes stayed, return 109.
that even if the fire spreads to the safehouse immediately after you have reached it, it will be counted as safely reaching the safehouse.
cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).
a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.
are given two positive integers startpos and endpos. initially, you are standing at position startpos on an infinite number line. with one step, you can move either one position to the left, or one position to the right.
a positive integer k, return the number of different ways to reach the position endpos starting from startpos, such that you perform exactly k steps. since the answer may be very large, return it modulo 109 + 7.
ways are considered different if the order of the steps made is not exactly the same.
that the number line includes negative integers.
a string s consisting of lowercase english letters, return the first letter to appear twice.

letter a appears twice before another letter b if the second occurrence of a is before the second occurrence of b.
will contain at least one letter that appears twice.
the following details of a matrix with n columns and 2 rows :
matrix is a binary matrix, which means each element in the matrix can be 0 or 1.
sum of elements of the 0-th(upper) row is given as upper.
sum of elements of the 1-st(lower) row is given as lower.
sum of elements in the i-th column(0-indexed) is colsum[i], where colsum is given as an integer array with length n.
task is to reconstruct the matrix with upper, lower and colsum.
it as a 2-d integer array.
there are more than one valid solution, any of them will be accepted.
no valid solution exists, return an empty 2-d array.
have been tasked with writing a program for a popular bank that will automate all its incoming transactions (transfer, deposit, and withdraw). the bank has n accounts numbered from 1 to n. the initial balance of each account is stored in a 0-indexed integer array balance, with the (i + 1)th account having an initial balance of balance[i].
all the valid transactions. a transaction is valid if:
given account number(s) are between 1 and n, and
amount of money withdrawn or transferred from is less than or equal to the balance of the account.
the bank class:
balance) initializes the object with the 0-indexed integer array balance.
transfer(int account1, int account2, long money) transfers money dollars from the account numbered account1 to the account numbered account2. return true if the transaction was successful, false otherwise.
deposit(int account, long money) deposit money dollars into the account numbered account. return true if the transaction was successful, false otherwise.
withdraw(int account, long money) withdraw money dollars from the account numbered account. return true if the transaction was successful, false otherwise.
are given a 0-indexed array of n integers arr.
interval between two elements in arr is defined as the absolute difference between their indices. more formally, the interval between arr[i] and arr[j] is |i - j|.
an array intervals of length n where intervals[i] is the sum of intervals between arr[i] and each element in arr with the same value as arr[i].
|x| is the absolute value of x.
are given a 0-indexed integer array nums.
concatenation of two numbers is the number formed by concatenating their numerals.
example, the concatenation of 15, 49 is 1549.
concatenation value of nums is initially equal to 0. perform this operation until nums becomes empty:
there exists more than one number in nums, pick the first element and last element in nums respectively and add the value of their concatenation to the concatenation value of nums, then delete the first and last element from nums.
one element exists, add its value to the concatenation value of nums, then delete it.
the concatenation value of the nums.
are given a 2d integer array intervals where intervals[i] = [lefti, righti] represents the inclusive interval [lefti, righti].
have to divide the intervals into one or more groups such that each interval is in exactly one group, and no two intervals that are in the same group intersect each other.
the minimum number of groups you need to make.
intervals intersect if there is at least one common number between them. for example, the intervals [1, 5] and [5, 8] intersect.
a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.
are case sensitive, for example, "aa" is not considered a palindrome here.
are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. the digits are ordered from most significant to least significant in left-to-right order. the large integer does not contain any leading 0's.
the large integer by one and return the resulting array of digits.
and bob take turns playing a game, with alice starting first.
are n stones arranged in a row. on each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. the winner is the one with the higher score when there are no stones left to remove.
found that he will always lose this game (poor bob, he always loses), so he decided to minimize the score's difference. alice's goal is to maximize the difference in the score.
an array of integers stones where stones[i] represents the value of the ith stone from the left, return the difference in alice and bob's score if they both play optimally.
are given a 0-indexed integer array stations of length n, where stations[i] represents the number of power stations in the ith city.
power station can provide power to every city in a fixed range. in other words, if the range is denoted by r, then a power station at city i can provide power to all cities j such that |i - j| <= r and 0 <= i, j <= n - 1.
that |x| denotes absolute value. for example, |7 - 5| = 2 and |3 - 10| = 7.
power of a city is the total number of power stations it is being provided power from.
government has sanctioned building k more power stations, each of which can be built in any city, and have the same range as the pre-existing ones.
the two integers r and k, return the maximum possible minimum power of a city, if the additional power stations are built optimally.
that you can build the k power stations in multiple cities.
you have a long running task, and you may wish to cancel it before it completes. to help with this goal, write a function cancellable that accepts a generator object and returns an array of two values: a cancel function and a promise.
may assume the generator function will only yield promises. it is your function's responsibility to pass the values resolved by the promise back to the generator. if the promise rejects, your function should throw that error back to the generator.
the cancel callback is called before the generator is done, your function should throw an error back to the generator. that error should be the string "cancelled" (not an error object). if the error was caught, the returned promise should resolve with the next value that was yielded or returned. otherwise, the promise should reject with the thrown error. no more code should be executed.
the generator is done, the promise your function returned should resolve the value the generator returned. if, however, the generator throws an error, the returned promise should reject with the error.
example of how your code would be used:
tasks() {
val = yield new promise(resolve => resolve(2 + 2));
new promise(resolve => settimeout(resolve, 100));
val + 1; // calculation shouldn't be done.

[cancel, promise] = cancellable(tasks());
50);
// logs "cancelled" at t=50ms
instead cancel() was not called or was called after t=100ms, the promise would have resolved 5.
have planned some train traveling one year in advance. the days of the year in which you will travel are given as an integer array days. each day is an integer from 1 to 365.
tickets are sold in three different ways:
1-day pass is sold for costs[0] dollars,
7-day pass is sold for costs[1] dollars, and
30-day pass is sold for costs[2] dollars.
passes allow that many days of consecutive travel.
example, if we get a 7-day pass on day 2, then we can travel for 7 days: 2, 3, 4, 5, 6, 7, and 8.
the minimum number of dollars you need to travel every day in the given list of days.
are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti.
pair p2 = [c, d] follows a pair p1 = [a, b] if b < c. a chain of pairs can be formed in this fashion.
the length longest chain which can be formed.
do not need to use up all the given intervals. you can select pairs in any order.
a string array words, return an array of all characters that show up in all strings within the words (including duplicates). you may return the answer in any order.
are given an array of strings words (0-indexed).
one operation, pick two distinct indices i and j, where words[i] is a non-empty string, and move any character from words[i] to any position in words[j].
true if you can make every string in words equal using any number of operations, and false otherwise.
are the operator of a centennial wheel that has four gondolas, and each gondola has room for up to four people. you have the ability to rotate the gondolas counterclockwise, which costs you runningcost dollars.
are given an array customers of length n where customers[i] is the number of new customers arriving just before the ith rotation (0-indexed). this means you must rotate the wheel i times before the customers[i] customers arrive. you cannot make customers wait if there is room in the gondola. each customer pays boardingcost dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.
can stop the wheel at any time, including before serving all customers. if you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.
the minimum number of rotations you need to perform to maximize your profit. if there is no scenario where the profit is positive, return -1.
are assigned to put some amount of boxes onto one truck. you are given a 2d array boxtypes, where boxtypes[i] = [numberofboxesi, numberofunitsperboxi]:
is the number of boxes of type i.
is the number of units in each box of the type i.
are also given an integer trucksize, which is the maximum number of boxes that can be put on the truck. you can choose any boxes to put on the truck as long as the number of boxes does not exceed trucksize.
the maximum total number of units that can be put on the truck.
an integer array nums, partition it into two (contiguous) subarrays left and right so that:
element in left is less than or equal to every element in right.
and right are non-empty.
has the smallest possible size.
the length of left after such a partitioning.
cases are generated such that partitioning exists.
are given a 0-indexed 2d integer array questions where questions[i] = [pointsi, brainpoweri].
array describes the questions of an exam, where you have to process the questions in order (i.e., starting from question 0) and make a decision whether to solve or skip each question. solving question i will earn you pointsi points but you will be unable to solve each of the next brainpoweri questions. if you skip question i, you get to make the decision on the next question.
example, given questions = [[3, 2], [4, 3], [4, 4], [2, 5]]:
question 0 is solved, you will earn 3 points but you will be unable to solve questions 1 and 2.
instead, question 0 is skipped and question 1 is solved, you will earn 4 points but you will be unable to solve questions 2 and 3.
the maximum points you can earn for the exam.
are given a 0-indexed integer array nums. there exists an array arr of length nums.length, where arr[i] is the sum of |i - j| over all j such that nums[j] == nums[i] and j != i. if there is no such j, set arr[i] to be 0.
the array arr.
an n-ary tree, return the level order traversal of its nodes' values.
input serialization is represented in their level order traversal, each group of children is separated by the null value (see examples).
an integer n, find a sequence that satisfies all of the following:
integer 1 occurs once in the sequence.
integer between 2 and n occurs twice in the sequence.
every integer i between 2 and n, the distance between the two occurrences of i is exactly i.
distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|.
the lexicographically largest sequence. it is guaranteed that under the given constraints, there is always a solution.
sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. for example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.
a function that accepts two deeply nested objects or arrays obj1 and obj2 and returns a new object representing their differences.
function should compare the properties of the two objects and identify any changes. the returned object should only contains keys where the value is different from obj1 to obj2. for each changed key, the value should be represented as an array [obj1 value, obj2 value]. keys that exist in one object but not in the other should not be included in the returned object. when comparing two arrays, the indices of the arrays are considered to be their keys. the end result should be a deeply nested object where each leaf value is a difference array.
may assume that both objects are the output of json.parse.
are given two m x n binary matrices grid1 and grid2 containing only 0's (representing water) and 1's (representing land). an island is a group of 1's connected 4-directionally (horizontal or vertical). any cells outside of the grid are considered water cells.
island in grid2 is considered a sub-island if there is an island in grid1 that contains all the cells that make up this island in grid2.
the number of islands in grid2 that are considered sub-islands.
is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n. a frog starts at point 0 in the second lane and wants to jump to point n. however, there could be obstacles along the way.
are given an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 to 3) describes an obstacle on the lane obstacles[i] at point i. if obstacles[i] == 0, there are no obstacles at point i. there will be at most one obstacle in the 3 lanes at each point.
example, if obstacles[2] == 1, then there is an obstacle on lane 1 at point 2.
frog can only travel from point i to point i + 1 on the same lane if there is not an obstacle on the lane at point i + 1. to avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.
example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.
the minimum number of side jumps the frog needs to reach any lane at point n starting from lane 2 at point 0.
there will be no obstacles on points 0 and n.
an integer n and an integer array rounds. we have a circular track which consists of n sectors labeled from 1 to n. a marathon will be held on this track, the marathon consists of m rounds. the ith round starts at sector rounds[i - 1] and ends at sector rounds[i]. for example, round 1 starts at sector rounds[0] and ends at sector rounds[1]
an array of the most visited sectors sorted in ascending order.
that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (see the first example).
are given an integer array cost where cost[i] is the cost of ith step on a staircase. once you pay the cost, you can either climb one or two steps.
can either start from the step with index 0, or the step with index 1.
the minimum cost to reach the top of the floor.
are given an array nums that consists of positive integers.
gcd of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.
example, the gcd of the sequence [4,6,16] is 2.
subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.
example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].
the number of different gcds among all non-empty subsequences of nums.
a text file file.txt, transpose its content.
may assume that each row has the same number of columns, and each field is separated by the ' ' character.

file.txt has the following content:
age
21
30
the following:
alice ryan
21 30
are given an array of strings arr. a string s is formed by the concatenation of a subsequence of arr that has unique characters.
the maximum possible length of s.
subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.
the root of a complete binary tree, return the number of the nodes in the tree.
to wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. it can have between 1 and 2h nodes inclusive at the last level h.
an algorithm that runs in less than o(n) time complexity.
are given an integer array banned and two integers n and maxsum. you are choosing some number of integers following the below rules:
chosen integers have to be in the range [1, n].
integer can be chosen at most once.
chosen integers should not be in the array banned.
sum of the chosen integers should not exceed maxsum.
the maximum number of integers you can choose following the mentioned rules.
are an ant tasked with adding n new rooms numbered 0 to n-1 to your colony. you are given the expansion plan as a 0-indexed integer array of length n, prevroom, where prevroom[i] indicates that you must build room prevroom[i] before building room i, and these two rooms must be connected directly. room 0 is already built, so prevroom[0] = -1. the expansion plan is given such that once all the rooms are built, every room will be reachable from room 0.
can only build one room at a time, and you can travel freely between rooms you have already built only if they are connected. you can choose to build any room as long as its previous room is already built.
the number of different orders you can build all the rooms in. since the answer may be large, return it modulo 109 + 7.
binary tree is named even-odd if it meets the following conditions:
root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc.
every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).
every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).
the root of a binary tree, return true if the binary tree is even-odd, otherwise return false.
are given an integer n, the number of nodes in a directed graph where the nodes are labeled from 0 to n - 1. each edge is red or blue in this graph, and there could be self-edges and parallel edges.
are given two arrays rededges and blueedges where:
= [ai, bi] indicates that there is a directed red edge from node ai to node bi in the graph, and
= [uj, vj] indicates that there is a directed blue edge from node uj to node vj in the graph.
an array answer of length n, where each answer[x] is the length of the shortest path from node 0 to node x such that the edge colors alternate along the path, or -1 if such a path does not exist.
are given a string s consisting of lowercase letters and an integer k. we call a string t ideal if the following conditions are satisfied:
is a subsequence of the string s.
absolute difference in the alphabet order of every two adjacent letters in t is less than or equal to k.
the length of the longest ideal string.
subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
that the alphabet order is not cyclic. for example, the absolute difference in the alphabet order of 'a' and 'z' is 25, not 1.
a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.
are given a 0-indexed array nums consisting of positive integers. you can choose two indices i and j, such that i != j, and the sum of digits of the number nums[i] is equal to that of nums[j].
the maximum value of nums[i] + nums[j] that you can obtain over all possible indices i and j that satisfy the conditions.
are given the root of a binary tree and an integer distance. a pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to distance.
the number of good leaf node pairs in the tree.
is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. you are given a 2d array graph, where graph[u] is an array of nodes that node u is adjacent to. more formally, for each v in graph[u], there is an undirected edge between node u and node v. the graph has the following properties:
are no self-edges (graph[u] does not contain u).
are no parallel edges (graph[u] does not contain duplicate values).
v is in graph[u], then u is in graph[v] (the graph is undirected).
graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.
graph is bipartite if the nodes can be partitioned into two independent sets a and b such that every edge in the graph connects a node in set a and a node in set b.
true if and only if it is bipartite.
the string s, return the size of the longest substring containing each vowel an even number of times. that is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.
an integer num, return a string representing its hexadecimal representation. for negative integers, twoâs complement method is used.
the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.
you are not allowed to use any built-in library method to directly solve this problem.
are given an integer n. there is a complete binary tree with 2n - 1 nodes. the root of that tree is the node with the value 1, and every node with a value val in the range [1, 2n - 1 - 1] has two children where:
left node has the value 2 * val, and
right node has the value 2 * val + 1.
are also given a 2d integer array queries of length m, where queries[i] = [ai, bi]. for each query, solve the following problem:
an edge between the nodes with values ai and bi.
the length of the cycle in the graph.
the added edge between nodes with values ai and bi.
that:
cycle is a path that starts and ends at the same node, and each edge in the path is visited only once.
length of a cycle is the number of edges visited in the cycle.
could be multiple edges between two nodes in the tree after adding the edge of the query.
an array answer of length m where answer[i] is the answer to the ith query.
an array of string words, return all strings in words that is a substring of another word. you can return the answer in any order.
substring is a contiguous sequence of characters within a string
are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. you want to use all the matchsticks to make one square. you should not break any stick, but you can link them up, and each matchstick must be used exactly one time.
true if you can make this square and false otherwise.
an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.
a rectangle of size n x m, return the minimum number of integer-sided squares that tile the rectangle.
a parentheses string s containing only the characters '(' and ')'. a parentheses string is balanced if:
left parenthesis '(' must have a corresponding two consecutive right parenthesis '))'.
parenthesis '(' must go before the corresponding two consecutive right parenthesis '))'.
other words, we treat '(' as an opening parenthesis and '))' as a closing parenthesis.
example, "())", "())(())))" and "(())())))" are balanced, ")()", "()))" and "(()))" are not balanced.
can insert the characters '(' and ')' at any position of the string to balance it if needed.
the minimum number of insertions needed to make s balanced.
are given a 0-indexed integer array nums. you are also given an integer key, which is present in nums.
every unique integer target in nums, count the number of times target immediately follows an occurrence of key in nums. in other words, count the number of indices i such that:
<= i <= nums.length - 2,
== key and,
+ 1] == target.
the target with the maximum count. the test cases will be generated such that the target with maximum count is unique.
an integer array nums where the elements are sorted in ascending order, convert it to a

search tree.
have a recentcounter class which counts the number of recent requests within a certain time frame.
the recentcounter class:
initializes the counter with zero recent requests.
ping(int t) adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].
is guaranteed that every call to ping uses a strictly larger value of t than the previous call.
a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the hamming weight).

that in some languages, such as java, there is no unsigned integer type. in this case, the input will be given as a signed integer type. it should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
java, the compiler represents the signed integers using 2's complement notation. therefore, in example 3, the input represents the signed integer. -3.
an array of non-negative integers arr, you are initially positioned at start index of the array. when you are at index i, you can jump to i + arr[i] or i - arr[i], check if you can reach to any index with value 0.
that you can not jump outside of the array at any time.
a binary tree root, a node x in the tree is named good if in the path from root to x there are no nodes with a value greater than x.
the number of good nodes in the binary tree.
are given a 0-indexed integer array nums and an integer k. you have a starting score of 0.
one operation:
an index i such that 0 <= i < nums.length,
your score by nums[i], and
nums[i] with ceil(nums[i] / 3).
the maximum possible score you can attain after applying exactly k operations.
ceiling function ceil(val) is the least integer greater than or equal to val.
is a school that has classes of students and each class will be having a final exam. you are given a 2d integer array classes, where classes[i] = [passi, totali]. you know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam.
are also given an integer extrastudents. there are another extrastudents brilliant students that are guaranteed to pass the exam of any class they are assigned to. you want to assign each of the extrastudents students to a class in a way that maximizes the average pass ratio across all the classes.
pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. the average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.
the maximum possible average pass ratio after assigning the extrastudents students. answers within 10-5 of the actual answer will be accepted.
the bstiterator class that represents an iterator over the in-order traversal of a binary search tree (bst):
root) initializes an object of the bstiterator class. the root of the bst is given as part of the constructor. the pointer should be initialized to a non-existent number smaller than any element in the bst.
hasnext() returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.
next() moves the pointer to the right, then returns the number at the pointer.
that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the bst.
may assume that next() calls will always be valid. that is, there will be at least a next number in the in-order traversal when next() is called.
are given an undirected weighted connected graph containing n nodes labeled from 0 to n - 1, and an integer array edges where edges[i] = [ai, bi, wi] indicates that there is an edge between nodes ai and bi with weight wi.
edges have a weight of -1 (wi = -1), while others have a positive weight (wi > 0).
task is to modify all edges with a weight of -1 by assigning them positive integer values in the range [1, 2 * 109] so that the shortest distance between the nodes source and destination becomes equal to an integer target. if there are multiple modifications that make the shortest distance between source and destination equal to target, any of them will be considered correct.
an array containing all edges (even unmodified ones) in any order if it is possible to make the shortest distance from source to destination equal to target, or an empty array if it's impossible.
you are not allowed to modify the weights of edges with initial positive weights.
are given a positive integer p. consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2p - 1] in their binary representations. you are allowed to do the following operation any number of times:
two elements x and y from nums.
a bit in x and swap it with its corresponding bit in y. corresponding bit refers to the bit that is in the same position in the other integer.
example, if x = 1101 and y = 0011, after swapping the 2nd bit from the right, we have x = 1111 and y = 0001.
the minimum non-zero product of nums after performing the above operation any number of times. return this product modulo 109 + 7.
the answer should be the minimum product before the modulo operation is done.
are given an integer n representing the number of nodes in a perfect binary tree consisting of nodes numbered from 1 to n. the root of the tree is node 1 and each node i in the tree has two children where the left child is the node 2 * i and the right child is 2 * i + 1.
node in the tree also has a cost represented by a given 0-indexed integer array cost of size n where cost[i] is the cost of node i + 1. you are allowed to increment the cost of any node by 1 any number of times.
the minimum number of increments you need to make the cost of paths from the root to each leaf node equal.

perfect binary tree is a tree where each node, except the leaf nodes, has exactly 2 children.
cost of a path is the sum of costs of nodes in the path.
an eventemitter class. this interface is similar (but with some differences) to the one found in node.js or the event target interface of the dom. the eventemitter should allow for subscribing to events and emitting them.
eventemitter class should have the following two methods:
- this method takes in two arguments: the name of an event as a string and a callback function. this callback function will later be called when the event is emitted.
event should be able to have multiple listeners for the same event. when emitting an event with multiple callbacks, each should be called in the order in which they were subscribed. an array of results should be returned. you can assume no callbacks passed to subscribe are referentially identical.
subscribe method should also return an object with an unsubscribe method that enables the user to unsubscribe. when it is called, the callback should be removed from the list of subscriptions and undefined should be returned.
- this method takes in two arguments: the name of an event as a string and an optional array of arguments that will be passed to the callback(s). if there are no callbacks subscribed to the given event, return an empty array. otherwise, return an array of the results of all callback calls in the order they were subscribed.
are given two 0-indexed integer arrays nums1 and nums2, of equal length n.
one operation, you can swap the values of any two indices of nums1. the cost of this operation is the sum of the indices.
the minimum total cost of performing the given operation any number of times such that nums1[i] != nums2[i] for all 0 <= i <= n - 1 after performing all the operations.
the minimum total cost such that nums1 and nums2 satisfy the above condition. in case it is not possible, return -1.
a stack that supports increment operations on its elements.
the customstack class:
maxsize) initializes the object with maxsize which is the maximum number of elements in the stack.
push(int x) adds x to the top of the stack if the stack has not reached the maxsize.
pop() pops and returns the top of the stack or -1 if the stack is empty.
inc(int k, int val) increments the bottom k elements of the stack by val. if there are less than k elements in the stack, increment all the elements in the stack.
are given a 0-indexed string s consisting of only lowercase english letters, where each letter in s appears exactly twice. you are also given a 0-indexed integer array distance of length 26.
letter in the alphabet is numbered from 0 to 25 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, ... , 'z' -> 25).
a well-spaced string, the number of letters between the two occurrences of the ith letter is distance[i]. if the ith letter does not appear in s, then distance[i] can be ignored.
true if s is a well-spaced string, otherwise return false.
are given a 0-indexed m x n binary matrix grid.
0-indexed m x n difference matrix diff is created with the following procedure:
the number of ones in the ith row be onesrowi.
the number of ones in the jth column be onescolj.
the number of zeros in the ith row be zerosrowi.
the number of zeros in the jth column be zeroscolj.
= onesrowi + onescolj - zerosrowi - zeroscolj
the difference matrix diff.
a string queryip, return "ipv4" if ip is a valid ipv4 address, "ipv6" if ip is a valid ipv6 address or "neither" if ip is not a correct ip of any type.
valid ipv4 address is an ip in the form "x1.x2.x3.x4" where 0 <= xi <= 255 and xi cannot contain leading zeros. for example, "192.168.1.1" and "192.168.1.0" are valid ipv4 addresses while "192.168.01.1", "192.168.1.00", and "192.168@1.1" are invalid ipv4 addresses.
valid ipv6 address is an ip in the form "x1:x2:x3:x4:x5:x6:x7:x8" where:
<= xi.length <= 4
is a hexadecimal string which may contain digits, lowercase english letter ('a' to 'f') and upper-case english letters ('a' to 'f').
zeros are allowed in xi.
example, "2001:0db8:85a3:0000:0000:8a2e:0370:7334" and "2001:db8:85a3:0:0:8a2e:0370:7334" are valid ipv6 addresses, while "2001:0db8:85a3::8a2e:037j:7334" and "02001:0db8:85a3:0000:0000:8a2e:0370:7334" are invalid ipv6 addresses.
a string s, return the length of the longest substring between two equal characters, excluding the two characters. if there is no such substring return -1.
substring is a contiguous sequence of characters within a string.
is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.
are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. all the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time).
an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x.
the root of a binary tree, return the sum of all left leaves.
leaf is a node with no children. a left leaf is a leaf that is the left child of another node.
the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.
subtree of a node node is node plus every node that is a descendant of node.
are given four integers row, cols, rcenter, and ccenter. there is a rows x cols matrix and you are on the cell with the coordinates (rcenter, ccenter).
the coordinates of all cells in the matrix, sorted by their distance from (rcenter, ccenter) from the smallest distance to the largest distance. you may return the answer in any order that satisfies this condition.
distance between two cells (r1, c1) and (r2, c2) is |r1 - r2| + |c1 - c2|.
an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. since the answer may be large, return the answer modulo 109 + 7.
two binary strings a and b, return their sum as a binary string.
chef has collected data on the satisfaction level of his n dishes. chef can cook any dish in 1 unit of time.
coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. time[i] * satisfaction[i].
the maximum sum of like-time coefficient that the chef can obtain after dishes preparation.
can be prepared in any order and the chef can discard some dishes to get this maximum value.
are given a sorted unique integer array nums.
range [a,b] is the set of all integers from a to b (inclusive).
the smallest sorted list of ranges that cover all the numbers in the array exactly. that is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.
range [a,b] in the list should be output as:
if a != b
if a == b
are given a 0-indexed 2d integer array nums. initially, your score is 0. perform the following operations until the matrix becomes empty:
each row in the matrix, select the largest number and remove it. in the case of a tie, it does not matter which number is chosen.
the highest number amongst all those removed in step 1. add that number to your score.
the final score.
an integer k, return the minimum number of fibonacci numbers whose sum is equal to k. the same fibonacci number can be used multiple times.
fibonacci numbers are defined as:
= 1
= 1
= fn-1 + fn-2 for n > 2.
is guaranteed that for the given constraints we can always find such fibonacci numbers that sum up to k.
ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.
an integer n, return true if n is an ugly number.
the array of integers nums, you will choose two different indices i and j of that array. return the maximum value of (nums[i]-1)*(nums[j]-1).
is an m x n rectangular island that borders both the pacific ocean and atlantic ocean. the pacific ocean touches the island's left and top edges, and the atlantic ocean touches the island's right and bottom edges.
island is partitioned into a grid of square cells. you are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).
island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. water can flow from any cell adjacent to an ocean into the ocean.
a 2d list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the pacific and atlantic oceans.
are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. you are also given an interval newinterval = [start, end] that represents the start and end of another interval.
newinterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).
intervals after the insertion.
a positive integer num, split it into two non-negative integers num1 and num2 such that:
concatenation of num1 and num2 is a permutation of num.
other words, the sum of the number of occurrences of each digit in num1 and num2 is equal to the number of occurrences of that digit in num.
and num2 can contain leading zeros.
the minimum possible sum of num1 and num2.

is guaranteed that num does not contain any leading zeros.
order of occurrence of the digits in num1 and num2 may differ from the order of occurrence of num.
are given two integers memory1 and memory2 representing the available memory in bits on two memory sticks. there is currently a faulty program running that consumes an increasing amount of memory every second.
the ith second (starting from 1), i bits of memory are allocated to the stick with more available memory (or from the first memory stick if both have the same available memory). if neither stick has at least i bits of available memory, the program crashes.
an array containing [crashtime, memory1crash, memory2crash], where crashtime is the time (in seconds) when the program crashed and memory1crash and memory2crash are the available bits of memory in the first and second sticks respectively.
an integer array of size n, find all elements that appear more than â n/3 â times.
sentence is a string of single-space separated words where each word can contain digits, lowercase letters, and the dollar sign '$'. a word represents a price if it is a sequence of digits preceded by a dollar sign.
example, "$100", "$23", and "$6" represent prices while "100", "$", and "$1e5" do not.
are given a string sentence representing a sentence and an integer discount. for each word representing a price, apply a discount of discount% on the price and update the word in the sentence. all updated prices should be represented with exactly two decimal places.
a string representing the modified sentence.
that all prices will contain at most 10 digits.
transaction is possibly invalid if:
amount exceeds $1000, or;
it occurs within (and including) 60 minutes of another transaction with the same name in a different city.
are given an array of strings transaction where transactions[i] consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.
a list of transactions that are possibly invalid. you may return the answer in any order.
a function fn, return a new function that is identical to the original function except that it ensures fn is called at most once.
first time the returned function is called, it should return the same result as fn.
subsequent time it is called, it should return undefined.
is a long and thin painting that can be represented by a number line. the painting was painted with multiple overlapping segments where each segment was painted with a unique color. you are given a 2d integer array segments, where segments[i] = [starti, endi, colori] represents the half-closed segment [starti, endi) with colori as the color.
colors in the overlapping segments of the painting were mixed when it was painted. when two or more colors mix, they form a new color that can be represented as a set of mixed colors.
example, if colors 2, 4, and 6 are mixed, then the resulting mixed color is {2,4,6}.
the sake of simplicity, you should only output the sum of the elements in the set rather than the full set.
want to describe the painting with the minimum number of non-overlapping half-closed segments of these mixed colors. these segments can be represented by the 2d array painting where painting[j] = [leftj, rightj, mixj] describes a half-closed segment [leftj, rightj) with the mixed color sum of mixj.
example, the painting created with segments = [[1,4,5],[1,7,7]] can be described by painting = [[1,4,12],[4,7,7]] because:
is colored {5,7} (with a sum of 12) from both the first and second segments.
is colored {7} from only the second segment.
the 2d array painting describing the finished painting (excluding any parts that are not painted). you may return the segments in any order.
half-closed segment [a, b) is the section of the number line between points a and b including point a and not including point b.
are two mice and n different types of cheese, each type of cheese should be eaten by exactly one mouse.
point of the cheese with index i (0-indexed) is:
if the first mouse eats it.
if the second mouse eats it.
are given a positive integer array reward1, a positive integer array reward2, and a non-negative integer k.
the maximum points the mice can achieve if the first mouse eats exactly k types of cheese.
bit flip of a number x is choosing a bit in the binary representation of x and flipping it from either 0 to 1 or 1 to 0.
example, for x = 7, the binary representation is 111 and we may choose any bit (including any leading zeros not shown) and flip it. we can flip the first bit from the right to get 110, flip the second bit from the right to get 101, flip the fifth bit from the right (a leading zero) to get 10111, etc.
two integers start and goal, return the minimum number of bit flips to convert start to goal.
a m x n binary matrix mat. in one step, you can choose one cell and flip it and all the four neighbors of it if they exist (flip is changing 1 to 0 and 0 to 1). a pair of cells are called neighbors if they share one edge.
the minimum number of steps required to convert mat to a zero matrix or -1 if you cannot.
binary matrix is a matrix with all cells equal to 0 or 1 only.
zero matrix is a matrix with all cells equal to 0.
a multi-dimensional array arr and a depth n, return a flattened version of that array.
multi-dimensional array is a recursive data structure that contains integers or other multi-dimensional arrays.
flattened array is a version of that array with some or all of the sub-arrays removed and replaced with the actual elements in that sub-array. this flattening operation should only be done if the current depth of nesting is less than n. the depth of the elements in the first array are considered to be 0.
solve it without the built-in array.flat method.
two non-negative integers low and high. return the count of odd numbers between low and high (inclusive).
an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.
are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of the ith node. the root of the tree is node 0, so parent[0] = -1 since it has no parent. you want to design a data structure that allows users to lock, unlock, and upgrade nodes in the tree.
data structure should support the following functions:
locks the given node for the given user and prevents other users from locking the same node. you may only lock a node using this function if the node is unlocked.
unlocks the given node for the given user. you may only unlock a node using this function if it is currently locked by the same user.
locks the given node for the given user and unlocks all of its descendants regardless of who locked it. you may only upgrade a node if all 3 conditions are true:
node is unlocked,
has at least one locked descendant (by any user), and
does not have any locked ancestors.
the lockingtree class:
parent) initializes the data structure with the parent array.
num, int user) returns true if it is possible for the user with id user to lock the node num, or false otherwise. if it is possible, the node num will become locked by the user with id user.
num, int user) returns true if it is possible for the user with id user to unlock the node num, or false otherwise. if it is possible, the node num will become unlocked.
num, int user) returns true if it is possible for the user with id user to upgrade the node num, or false otherwise. if it is possible, the node num will be upgraded.
an integer array nums, return the number of reverse pairs in the array.
reverse pair is a pair (i, j) where:
<= i < j < nums.length and
> 2 * nums[j].
are the manager of a basketball team. for the upcoming tournament, you want to choose the team with the highest overall score. the score of the team is the sum of scores of all the players in the team.
the basketball team is not allowed to have conflicts. a conflict exists if a younger player has a strictly higher score than an older player. a conflict does not occur between players of the same age.
two lists, scores and ages, where each scores[i] and ages[i] represents the score and age of the ith player, respectively, return the highest overall score of all possible basketball teams.
an integer n, return the number of structurally unique bst's (binary search trees) which has exactly n nodes of unique values from 1 to n.
a positive integer n, find the pivot integer x such that:
sum of all elements between 1 and x inclusively equals the sum of all elements between x and n inclusively.
the pivot integer x. if no such integer exists, return -1. it is guaranteed that there will be at most one pivot index for the given input.
are given a 0-indexed string s and are tasked with finding two non-intersecting palindromic substrings of odd length such that the product of their lengths is maximized.
formally, you want to choose four integers i, j, k, l such that 0 <= i <= j < k <= l < s.length and both the substrings s[i...j] and s[k...l] are palindromes and have odd lengths. s[i...j] denotes a substring from index i to index j inclusive.
the maximum possible product of the lengths of the two non-intersecting palindromic substrings.
palindrome is a string that is the same forward and backward. a substring is a contiguous sequence of characters in a string.
is a special kind of apple tree that grows apples every day for n days. on the ith day, the tree grows apples[i] apples that will rot after days[i] days, that is on day i + days[i] the apples will be rotten and cannot be eaten. on some days, the apple tree does not grow any apples, which are denoted by apples[i] == 0 and days[i] == 0.
decided to eat at most one apple a day (to keep the doctors away). note that you can keep eating after the first n days.
two integer arrays days and apples of length n, return the maximum number of apples you can eat.
this problem, a tree is an undirected graph that is connected and has no cycles.
are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. the added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. the graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.
an edge that can be removed so that the resulting graph is a tree of n nodes. if there are multiple answers, return the answer that occurs last in the input.
an integer array queries and a positive integer intlength, return an array answer where answer[i] is either the queries[i]th smallest positive palindrome of length intlength or -1 if no such palindrome exists.
palindrome is a number that reads the same backwards and forwards. palindromes cannot have leading zeros.
a binary array nums, return the maximum number of consecutive 1's in the array.
have a water dispenser that can dispense cold, warm, and hot water. every second, you can either fill up 2 cups with different types of water, or 1 cup of any type of water.
are given a 0-indexed integer array amount of length 3 where amount[0], amount[1], and amount[2] denote the number of cold, warm, and hot water cups you need to fill respectively. return the minimum number of seconds needed to fill up all the cups.
are given a 0-indexed array of unique strings words.
palindrome pair is a pair of integers (i, j) such that:
<= i, j < words.length,
!= j, and
+ words[j] (the concatenation of the two strings) is a


an array of all the palindrome pairs of words.
have n jobs, where every job is scheduled to be done from starttime[i] to endtime[i], obtaining a profit of profit[i].
given the starttime, endtime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.
you choose a job that ends at time x you will be able to start another job that starts at time x.
are given a string of digits num, such as "123456579". we can split it into a fibonacci-like sequence [123, 456, 579].
a fibonacci-like sequence is a list f of non-negative integers such that:
<= f[i] < 231, (that is, each integer fits in a 32-bit signed integer type),
>= 3, and
+ f[i + 1] == f[i + 2] for all 0 <= i < f.length - 2.
that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.
any fibonacci-like sequence split from num, or return [] if it cannot be done.
are given a string s, where every two consecutive vertical bars '|' are grouped into a pair. in other words, the 1st and 2nd '|' make a pair, the 3rd and 4th '|' make a pair, and so forth.
the number of '*' in s, excluding the '*' between each pair of '|'.
that each '|' will belong to exactly one pair.
swap is defined as taking two distinct positions in an array and swapping the values in them.
circular array is defined as an array where we consider the first element and the last element to be adjacent.
a binary circular array nums, return the minimum number of swaps required to group all 1's present in the array together at any location.
an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements.
a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows
b are from arr
< b
- a equals to the minimum absolute difference of any two elements in arr
an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
array-form of an integer num is an array representing its digits in left to right order.
example, for num = 1321, the array form is [1,3,2,1].
num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.
a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) where 0 <= i < j < n, such that nums[i] == nums[j] and (i * j) is divisible by k.
a 0-indexed n x n integer matrix grid, return the number of pairs (ri, cj) such that row ri and column cj are equal.
row and column pair is considered equal if they contain the same elements in the same order (i.e., an equal array).
are given an m x n grid grid where:
is an empty cell.
is a wall.
is the starting point.
letters represent keys.
letters represent locks.
start at the starting point and one move consists of walking one space in one of the four cardinal directions. you cannot walk outside the grid, or walk into a wall.
you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.
some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the english alphabet in the grid. this means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the english alphabet.
the lowest number of moves to acquire all keys. if it is impossible, return -1.
are given a 0-indexed array of string words and two integers left and right.
string is called a vowel string if it starts with a vowel character and ends with a vowel character where vowel characters are 'a', 'e', 'i', 'o', and 'u'.
the number of vowel strings words[i] where i belongs to the inclusive range [left, right].
dna sequence is composed of a series of nucleotides abbreviated as 'a', 'c', 'g', and 't'.
example, "acgaattccg" is a dna sequence.
studying dna, it is useful to identify repeated sequences within the dna.
a string s that represents a dna sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a dna molecule. you may return the answer in any order.
exists an infinitely large grid. you are currently at point (1, 1), and you need to reach the point (targetx, targety) using a finite number of steps.
one step, you can move from point (x, y) to any one of the following points:
y - x)
- y, y)
* x, y)
2 * y)
two integers targetx and targety representing the x-coordinate and y-coordinate of your final position, return true if you can reach the point from (1, 1) using some number of steps, and false otherwise.
schema
employees

column name | type |

employee_id | int |
name | varchar |
reports_to | int |
age | int |

is the primary key for this table.
table contains information about the employees and the id of the manager they report to. some employees do not report to anyone (reports_to is null).
this problem, we will consider a manager an employee who has at least 1 other employee reporting to them.
an sql query to report the ids and the names of all managers, the number of employees who report directly to them, and the average age of the reports rounded to the nearest integer.
the result table ordered by employee_id.
query result format is in the following example.
the class subrectanglequeries which receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods:
updatesubrectangle(int row1, int col1, int row2, int col2, int newvalue)
all values with newvalue in the subrectangle whose upper left coordinate is (row1,col1) and bottom right coordinate is (row2,col2).
getvalue(int row, int col)
the current value of the coordinate (row,col) from the rectangle.
are given a string s. we want to partition the string into as many parts as possible so that each letter appears in at most one part.
that the partition is done so that after concatenating all the parts in order, the resultant string should be s.
a list of integers representing the size of these parts.
a string s, return the number of different non-empty palindromic subsequences in s. since the answer may be very large, return it modulo 109 + 7.
subsequence of a string is obtained by deleting zero or more characters from the string.
sequence is palindromic if it is equal to the sequence reversed.
sequences a1, a2, ... and b1, b2, ... are different if there is some i for which ai != bi.
are given a binary string s. in one second, all occurrences of "01" are simultaneously replaced with "10". this process repeats until no occurrences of "01" exist.
the number of seconds needed to complete this process.
are n people, each person has a unique id between 0 and n-1. given the arrays watchedvideos and friends, where watchedvideos[i] and friends[i] contain the list of watched videos and the list of friends respectively for the person with id = i.
1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on. in general, the level k of videos are all watched videos by people with the shortest path exactly equal to k with you. given your id and the level of videos, return the list of videos ordered by their frequencies (increasing). for videos with the same frequency order them alphabetically from least to greatest.
a string s of lower and upper case english letters.
good string is a string which doesn't have two adjacent characters s[i] and s[i + 1] where:
<= i <= s.length - 2
is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa.
make the string good, you can choose two adjacent characters that make the string bad and remove them. you can keep doing this until the string becomes good.
the string after making it good. the answer is guaranteed to be unique under the given constraints.
that an empty string is also good.
a function that converts an array of objects arr into a matrix m.
is an array of objects or arrays. each item in the array can be deeply nested with child arrays and child objects. it can also contain numbers, strings, booleans, and null values.
first row m should be the column names. if there is no nesting, the column names are the unique keys within the objects. if there is nesting, the column names are the respective paths in the object separated by ".".
of the remaining rows corresponds to an object in arr. each value in the matrix corresponds to a value in an object. if a given object doesn't contain a value for a given column, the cell should contain an empty string "".
colums in the matrix should be in lexographically ascending order.
the myatoi(string s) function, which converts a string to a 32-bit signed integer (similar to c/c++'s atoi function).
algorithm for myatoi(string s) is as follows:
in and ignore any leading whitespace.
if the next character (if not already at the end of the string) is '-' or '+'. read this character in if it is either. this determines if the final result is negative or positive respectively. assume the result is positive if neither is present.
in next the characters until the next non-digit character or the end of the input is reached. the rest of the string is ignored.
these digits into an integer (i.e. "123" -> 123, "0032" -> 32). if no digits were read, then the integer is 0. change the sign as necessary (from step 2).
the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
the integer as the final result.

the space character ' ' is considered a whitespace character.
not ignore any characters other than the leading whitespace or the rest of the string after the digits.
are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between some intersections. the inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.
are given an integer n and a 2d integer array roads where roads[i] = [ui, vi, timei] means that there is a road between intersections ui and vi that takes timei minutes to travel. you want to know in how many ways you can travel from intersection 0 to intersection n - 1 in the shortest amount of time.
the number of ways you can arrive at your destination in the shortest amount of time. since the answer may be large, return it modulo 109 + 7.
schema
users

column name | type |

user_id | int |
join_date | date |
favorite_brand | varchar |

is the primary key of this table.
table has the info of the users of an online shopping website where users can sell and buy items.
orders

column name | type |

order_id | int |
order_date | date |
item_id | int |
buyer_id | int |
seller_id | int |

is the primary key of this table.
is a foreign key to the items table.
and seller_id are foreign keys to the users table.
items

column name | type |

item_id | int |
item_brand | varchar |

is the primary key of this table.
an sql query to find for each user, the join date and the number of orders they made as a buyer in 2019.
the result table in any order.
query result format is in the following example.
are given a string s consisting of lowercase english letters, and you are allowed to perform operations on it. in one operation, you can replace a character in s with another lowercase english letter.
task is to make s a palindrome with the minimum number of operations possible. if there are multiple palindromes that can be made using the minimum number of operations, make the lexicographically smallest one.
string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.
the resulting palindrome string.
are given an integer array nums and an integer k. you may partition nums into one or more subsequences such that each element in nums appears in exactly one of the subsequences.
the minimum number of subsequences needed such that the difference between the maximum and minimum values in each subsequence is at most k.
subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.
are given two integers m and n, which represent the dimensions of a matrix.
are also given the head of a linked list of integers.
an m x n matrix that contains the integers in the linked list presented in spiral order (clockwise), starting from the top-left of the matrix. if there are remaining empty spaces, fill them with -1.
the generated matrix.
are given a 0-indexed integer array arr and an integer k. the array arr is circular. in other words, the first element of the array is the next element of the last element, and the last element of the array is the previous element of the first element.
can do the following operation any number of times:
any element from arr and increase or decrease it by 1.
the minimum number of operations such that the sum of each subarray of length k is equal.
subarray is a contiguous part of the array.
a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.
final result should be an irreducible fraction. if your final result is an integer, change it to the format of a fraction that has a denominator 1. so in this case, 2 should be converted to 2/1.
hamming distance between two integers is the number of positions at which the corresponding bits are different.
an integer array nums, return the sum of hamming distances between all the pairs of the integers in nums.
are given the root of a binary tree. we install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.
the minimum number of cameras needed to monitor all nodes of the tree.
are given an integer array nums. the absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).
the maximum absolute sum of any (possibly empty) subarray of nums.
that abs(x) is defined as follows:
x is a negative integer, then abs(x) = -x.
x is a non-negative integer, then abs(x) = x.
game is played by a cat and a mouse named cat and mouse.
environment is represented by a grid of size rows x cols, where each element is a wall, floor, player (cat, mouse), or food.
are represented by the characters 'c'(cat),'m'(mouse).
are represented by the character '.' and can be walked on.
are represented by the character '#' and cannot be walked on.
is represented by the character 'f' and can be walked on.
is only one of each character 'c', 'm', and 'f' in grid.
and cat play according to the following rules:
moves first, then they take turns to move.
each turn, cat and mouse can jump in one of the four directions (left, right, up, down). they cannot jump over the wall nor outside of the grid.
mousejump are the maximum lengths cat and mouse can jump at a time, respectively. cat and mouse can jump less than the maximum length.
in the same position is allowed.
can jump over cat.
game can end in 4 ways:
cat occupies the same position as mouse, cat wins.
cat reaches the food first, cat wins.
mouse reaches the food first, mouse wins.
mouse cannot get to the food within 1000 turns, cat wins.
a rows x cols matrix grid and two integers catjump and mousejump, return true if mouse can win the game if both cat and mouse play optimally, otherwise return false.
array is squareful if the sum of every pair of adjacent elements is a perfect square.
an integer array nums, return the number of permutations of nums that are squareful.
permutations perm1 and perm2 are different if there is some index i such that perm1[i] != perm2[i].
are given a 0-indexed array nums of n integers, and an integer k.
k-radius average for a subarray of nums centered at some index i with the radius k is the average of all elements in nums between the indices i - k and i + k (inclusive). if there are less than k elements before or after the index i, then the k-radius average is -1.
and return an array avgs of length n where avgs[i] is the k-radius average for the subarray centered at index i.
average of x elements is the sum of the x elements divided by x, using integer division. the integer division truncates toward zero, which means losing its fractional part.
example, the average of four elements 2, 3, 1, and 5 is (2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75, which truncates to 2.
are given an integer array nums with no duplicates. a maximum binary tree can be built recursively from nums using the following algorithm:
a root node whose value is the maximum value in nums.
build the left subtree on the subarray prefix to the left of the maximum value.
build the right subtree on the subarray suffix to the right of the maximum value.
the maximum binary tree built from nums.
the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.
all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.
have n jobs and m workers. you are given three arrays: difficulty, profit, and worker where:
and profit[i] are the difficulty and the profit of the ith job, and
is the ability of jth worker (i.e., the jth worker can only complete a job with difficulty at most worker[j]).
worker can be assigned at most one job, but one job can be completed multiple times.
example, if three workers attempt the same job that pays $1, then the total profit will be $3. if a worker cannot complete any job, their profit is $0.
the maximum profit we can achieve after assigning the workers to the jobs.
are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. reconstruct the itinerary in order and return it.
of the tickets belong to a man who departs from "jfk", thus, the itinerary must begin with "jfk". if there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.
example, the itinerary ["jfk", "lga"] has a smaller lexical order than ["jfk", "lgb"].
may assume all tickets form at least one valid itinerary. you must use all the tickets once and only once.
delete the middle node of a linked list
minimum difference between largest and smallest value in three moves
minimum number of frogs croaking
replace words
remove all adjacent duplicates in string ii
longest path with different adjacent characters
roman to integer
smallest value of the rearranged number
contains duplicate
minimum swaps to make strings equal
longest common subsequence
strange printer ii
maximum ice cream bars
linked list in binary tree
find the student that will replace the chalk
median of two sorted arrays
decode ways
rotate image
find and replace pattern
time needed to buy tickets
pairs of songs with total durations divisible by 60
longest repeating character replacement
check if an original string exists given two encoded strings
add two numbers ii
construct quad tree
minimum window substring
maximum height by stacking cuboids
palindrome partitioning
sum of digits of string after convert
cells with odd values in a matrix
minimum genetic mutation
closest room
combine two tables
largest number at least twice of others
kth smallest product of two sorted arrays
vertical order traversal of a binary tree
last day where you can still cross
classes more than 5 students
coloring a border
count number of homogenous substrings
first bad version
valid perfect square
special positions in a binary matrix
k items with the maximum sum
make two arrays equal by reversing subarrays
minimum cost of buying candies with discount
construct the rectangle
number of sets of k non-overlapping line segments
circular array loop
minimum recolors to get k consecutive black blocks
best time to buy and sell stock
greatest sum divisible by three
remove digit from number to maximize result
check if number is a sum of powers of three
uncrossed lines
path sum ii
search a 2d matrix
prime in diagonal
second minimum node in a binary tree
non-overlapping intervals
freedom trail
super palindromes
course schedule iii
teemo attacking
determine if two events have conflict
calculate digit sum of a string
consecutive numbers sum
reorder data in log files
investments in 2016
display table of food orders in a restaurant
burst balloons
design underground system
smallest good base
count number of teams
employee importance
calculate amount paid in taxes
airplane seat assignment probability
closest nodes queries in a binary search tree
distribute money to maximum children
insertion sort list
number of longest increasing subsequence
query kth smallest trimmed number
plates between candles
find a peak element ii
number of ways to reorder array to get same bst
split linked list in parts
permutations
intersection of multiple arrays
minimum possible integer after at most k adjacent swaps on digits
lowest common ancestor of a binary search tree
count the number of beautiful subarrays
array of doubled pairs
encrypt and decrypt strings
time to cross a bridge
reach a number
the latest time to catch a bus
maximum sum with exactly k elements
sort integers by the power value
maximum tastiness of candy basket
rectangle overlap
self crossing
allocate mailboxes
stone game viii
employees earning more than their managers
maximize the confusion of an exam
percentage of letter in string
open the lock
remove stones to minimize the total
maximum frequency stack
finding 3-digit even numbers
get maximum in generated array
partition list
array partition
triangle
get equal substrings within budget
same tree
minimized maximum of products distributed to any store
all divisions with the highest score of a binary array
number of distinct roll sequences
find all good indices
stock price fluctuation
sliding subarray beauty
check if a string can break another string
average time of process per machine
integer to english words
count the number of good subarrays
find all lonely numbers in the array
spiral matrix iii
jump game vi
minimum adjacent swaps for k consecutive ones
rank transform of a matrix
patients with a condition
special binary string
minimum time visiting all points
managers with at least 5 direct reports
minimum average difference
set mismatch
swapping nodes in a linked list
design graph with shortest path calculator
decode the message
shortest cycle in a graph
binary tree coloring game
distribute candies to people
scramble string
sort the jumbled numbers
find minimum in rotated sorted array ii
split a string in balanced strings
range sum query - mutable
recyclable and low fat products
running sum of 1d array
customers who never order
patching array
find n unique integers sum up to zero
implement rand10() using rand7()
design a text editor
minimum number of vertices to reach all nodes
guess number higher or lower ii
min stack
number of different integers in a string
maximum xor for each query
distinct subsequences ii
divide a string into groups of size k
sort the matrix diagonally
check if there is a valid partition for the array
build an array with stack operations
find players with zero or one losses
design parking system
stone game
valid parentheses
flipping an image
minimum operations to reduce x to zero
adding two negabinary numbers
sentence similarity iii
separate the digits in an array
triples with bitwise and equal to zero
longest arithmetic subsequence of given difference
print in order
largest local values in a matrix
minimum moves to move a box to their target location
longest subsequence repeated k times
path with minimum effort
all ancestors of a node in a directed acyclic graph
magic squares in grid
maximum total importance of roads
check if numbers are ascending in a sentence
car pooling
can place flowers
count fertile pyramids in a land
day of the week
word ladder ii
dota2 senate
parallel courses ii
largest positive integer that exists with its negative
find substring with given hash value
maximal rectangle
evaluate boolean binary tree
binary tree level order traversal ii
verify preorder serialization of a binary tree
generate random point in a circle
minimum cost to make array equal
wiggle subsequence
number of wonderful substrings
edit distance
monotone increasing digits
count days spent together
di string match
numbers with repeated digits
number of unequal triplets in array
minimum swaps to make sequences increasing
minimum number of operations to reinitialize a permutation
intersection of two arrays ii
find the difference of two arrays
subarray product less than k
flower planting with no adjacent
maximum gap
maximum number of ways to partition an array
maximum score of a good subarray
factorial trailing zeroes
increasing triplet subsequence
counting words with a given prefix
check if all a's appears before all b's
subarrays with k different integers
tweet counts per frequency
lucky numbers in a matrix
water bottles
stream of characters
repeated string match
best time to buy and sell stock iv
reverse linked list
ugly number iii
find elements in a contaminated binary tree
capital gain/loss
cinema seat allocation
sliding puzzle
longest word in dictionary through deleting
snail traversal
univalued binary tree
create components with same value
largest perimeter triangle
concatenated words
shopping offers
maximum number of achievable transfer requests
self dividing numbers
check array formation through concatenation
slowest key
number of students doing homework at a given time
count vowel substrings of a string
convert bst to greater tree
escape the ghosts
maximum length of repeated subarray
letter combinations of a phone number
top k frequent elements
shifting letters
finding mk average
diagonal traverse ii
remove duplicates from sorted list
longest consecutive sequence
find the width of columns of a grid
data stream as disjoint intervals
the time when the network becomes idle
linked list components
find array given subset sums
container with most water
contain virus
reverse integer
vowels of all substrings
find the divisibility array of a string
binary tree preorder traversal
similar string groups
number of orders in the backlog
game play analysis i
sequential digits
knight probability in chessboard
check if a string contains all binary codes of size k
minimum number of operations to sort a binary tree by level
minimum number of operations to make string sorted
tree node
k inverse pairs array
find duplicate file in system
the score of students solving math expression
most stones removed with same row or column
integer to roman
customer who visited but did not make any transactions
robot bounded in circle
find the distance value between two arrays
maximum width of binary tree
design twitter
convert 1d array into 2d array
utf-8 validation
number of flowers in full bloom
count ways to make array with product
backspace string compare
check if string is transformable with substring sort operations
count all possible routes
last stone weight ii
divide nodes into the maximum number of groups
ugly number ii
detect pattern of length m repeated k or more times
binary trees with factors
minimum time to finish the race
second largest digit in a string
most common word
complex number multiplication
fair distribution of cookies
stamping the sequence
minimum add to make parentheses valid
remove invalid parentheses
not boring movies
binary tree tilt
count artifacts that can be extracted
number of pairs of interchangeable rectangles
number of students unable to eat lunch
maximum width ramp
find the kth smallest sum of a matrix with sorted rows
maximum number of removable characters
valid mountain array
find the town judge
minimum number of days to eat n oranges
path with maximum gold
count substrings that differ by one character
odd even jump
random pick with blacklist
make sum divisible by p
last person to fit in the bus
iterator for combination
merge strings alternately
longest binary subsequence less than or equal to k
minimum number of operations to make arrays similar
critical connections in a network
goat latin
number of pairs satisfying inequality
number of ways where square of number is equal to product of two numbers
smallest range i
wiggle sort ii
jump game vii
student attendance record ii
find the index of the first occurrence in a string
count primes
contains duplicate iii
reorder routes to make all paths lead to the city zero
smallest subtree with all the deepest nodes
minimum cost to reach destination in time
replace non-coprime numbers in array
palindrome partitioning iv
longest harmonious subsequence
avoid flood in the city
minimum penalty for a shop
redundant connection ii
watering plants
super ugly number
short encoding of words
minimum number of arrows to burst balloons
first missing positive
find longest awesome substring
number of ways to rearrange sticks with k sticks visible
reachable nodes in subdivided graph
recover binary search tree
print words vertically
number of ways to split a string
n-queens ii
largest 1-bordered square
design hashset
most frequent subtree sum
apply bitwise operations to make strings equal
triangle judgement
number of good pairs
check if a parentheses string can be valid
sort list
count good meals
maximum compatibility score sum
increment submatrices by one
cat and mouse
create sorted array through instructions
frog jump ii
increasing decreasing string
convert binary number in a linked list to integer
find the kth largest integer in the array
reverse odd levels of binary tree
minimum moves to equal array elements ii
range module
number of laser beams in a bank
substring xor queries
squares of a sorted array
find all people with secret
where will the ball fall
customers who bought all products
max difference you can get from changing an integer
minimum number of increments on subarrays to form a target array
combination sum iii
closest divisors
arranging coins
design linked list
minimum distance to type a word using two fingers
number of ways to form a target string given a dictionary
additive number
maximum candies allocated to k children
number of segments in a string
number of days between two dates
maximum rows covered by columns
restore ip addresses
word search ii
binary tree postorder traversal
count good numbers
longest arithmetic subsequence
card flipping game
height of binary tree after subtree removal queries
cells in a range on an excel sheet
largest number after mutating substring
count number of pairs with absolute difference k
smallest rotation with highest score
check if array is sorted and rotated
break a palindrome
count number of rectangles containing each point
stone game iv
prime number of set bits in binary representation
unique morse code words
reverse nodes in even length groups
sleep
maximum sum of two non-overlapping subarrays
odd string difference
minimum number of flips to make the binary string alternating
excel sheet column number
rearrange spaces between words
largest combination with bitwise and greater than zero
number of visible people in a queue
minimum cost to merge stones
maximum genetic difference query
rearrange words in a sentence
closest prime numbers in range
strange printer
count the number of complete components
minimum score triangulation of polygon
equal rational numbers
largest time for given digits
split the array to make coprime products
sliding window median
climbing stairs
minimum total distance traveled
find missing observations
count the digits that divide a number
collect coins in a tree
concatenation of array
check if all characters have equal number of occurrences
encode and decode tinyurl
binary prefix divisible by 5
minimum one bit operations to make integers zero
partition to k equal sum subsets
snakes and ladders
equal sum arrays with minimum number of operations
walking robot simulation
find the middle index in array
optimal partition of string
least operators to express number
merge sorted array
largest multiple of three
sell diminishing-valued colored balls
put marbles in bags
boats to save people
divide players into teams of equal skill
sorting the sentence
move pieces to obtain a string
string without aaa or bbb
split array with same average
soup servings
stamping the grid
maximum non negative product in a matrix
single-threaded cpu
candy
successful pairs of spells and potions
sum multiples
minimum rounds to complete all tasks
smallest missing non-negative integer after operations
champagne tower
rearrange array to maximize prefix score
solve the equation
word pattern
my calendar ii
sum of k-mirror numbers
split a string into the max number of unique substrings
trim a binary search tree
minimum time to type word using special typewriter
minimum number of removals to make mountain array
substring with largest variance
keep multiplying found values by two
check if the sentence is pangram
fizz buzz
unique binary search trees ii
number of substrings with only 1s
smallest index with equal value
bitwise and of numbers range
categorize box according to criteria
invert binary tree
longest univalue path
array nesting
maximum value after insertion
largest odd number in string
combination sum iv
make number of distinct characters equal
minimum absolute sum difference
sequentially ordinal rank tracker
count integers with even digit sum
gas station
bricks falling when hit
validate stack sequences
lowest common ancestor of deepest leaves
find the difference
asteroid collision
minimum operations to reduce an integer to 0
permutation sequence
binary subarrays with sum
largest sum of averages
search in a binary search tree
russian doll envelopes
number of distinct averages
maximum number of words found in sentences
groups of special-equivalent strings
word ladder
fair candy swap
user activity for the past 30 days i
3sum with multiplicity
find if path exists in graph
minimum number of food buckets to feed the hamsters
make the xor of all segments equal to zero
nth magical number
sum of square numbers
4sum
nearest exit from entrance in maze
distinct echo substrings
distance between bus stops
promise pool
remove boxes
find kth largest xor coordinate value
students and examinations
construct target array with multiple sums
pascal's triangle ii
design a food rating system
number complement
palindrome linked list
smallest missing genetic value in each subtree
design memory allocator
capitalize the title
valid permutations for di sequence
the kth factor of n
booking concert tickets in groups
people whose list of favorite companies is not a subset of another list
maximum white tiles covered by a carpet
different ways to add parentheses
super washing machines
count ways to build good strings
masking personal information
strong password checker
two best non-overlapping events
combination sum
minimum money required before transactions
minimum difference between highest and lowest of k scores
consecutive numbers
count triplets that can form two arrays of equal xor
remove duplicates from sorted list ii
poor pigs
surface area of 3d shapes
find right interval
sum of prefix scores of strings
number of ways to wear different hats to each other
cheapest flights within k stops
search in rotated sorted array ii
find good days to rob the bank
divide array into equal pairs
longest nice subarray
surrounded regions
count array pairs divisible by k
maximum trailing zeros in a cornered path
bulb switcher ii
design front middle back queue
three consecutive odds
the number of beautiful subsets
count binary substrings
minimum additions to make valid string
determine color of a chessboard square
remove k digits
painting a grid with three different colors
non-negative integers without consecutive ones
design circular queue
sort characters by frequency
valid palindrome
gray code
minimum operations to make the array increasing
find closest number to zero
check if a word occurs as a prefix of any word in a sentence
rotting oranges
number of boomerangs
find numbers with even number of digits
partition equal subset sum
minimum area rectangle ii
power of three
find xor sum of all pairs bitwise and
mini parser
kth smallest element in a sorted matrix
minimum deletions to make array beautiful
range sum of sorted subarray sums
finding the users active minutes
delete leaves with a given value
apply discount every n orders
valid square
remove nth node from end of list
reduce array size to the half
arithmetic subarrays
paths in matrix whose sum is divisible by k
palindrome partitioning ii
lfu cache
reverse substrings between each pair of parentheses
count the number of square-free subsets
valid boomerang
sort array by parity
longest happy prefix
shortest distance to target string in a circular array
pass the pillow
number of subarrays with gcd equal to k
maximum students taking exam
find the longest valid obstacle course at each position
merge triplets to form target triplet
koko eating bananas
maximum number of non-overlapping subarrays with sum equals target
frequency of the most frequent element
build array from permutation
remove comments
remove letter to equalize frequency
rle iterator
maximum number of coins you can get
count nodes equal to average of subtree
detonate the maximum bombs
shortest completing word
isomorphic strings
cousins in binary tree
parallel courses iii
minimum speed to arrive on time
partition array into two arrays to minimize sum difference
diameter of binary tree
number of paths with max score
jump game ii
maximum score after splitting a string
count the number of fair pairs
increasing order search tree
n-repeated element in size 2n array
biggest single number
subtree of another tree
greatest english letter in upper and lower case
merge bsts to create single bst
maximum depth of n-ary tree
excel sheet column title
minimum elements to add to form a given sum
product of array except self
unique email addresses
smallest integer divisible by k
maximum star sum of a graph
frog jump
majority element
truncate sentence
remove duplicates from sorted array ii
two furthest houses with different colors
filter elements from array
exclusive time of functions
count unguarded cells in the grid
html entity parser
maximum level sum of a binary tree
count words obtained after adding a letter
maximum of absolute value expression
handling sum queries after update
find a corresponding node of a binary tree in a clone of that tree
count pairs with xor in a range
maximum fruits harvested after at most k steps
delete columns to make sorted ii
calculate special bonus
find k closest elements
evaluate the bracket pairs of a string
corporate flight bookings
tree of coprimes
verbal arithmetic puzzle
single number ii
detect cycles in 2d grid
find in mountain array
largest 3-same-digit number in string
product price at a given date
fix names in a table
populating next right pointers in each node ii
maximum distance between a pair of values
degree of an array
count of smaller numbers after self
maximum 69 number
maximum number of tasks you can assign
count all valid pickup and delivery options
longest substring with at least k repeating characters
minimum operations to make the array alternating
neighboring bitwise xor
buddy strings
lexicographical numbers
maximum sum obtained of any permutation
recover a tree from preorder traversal
search in rotated sorted array
add edges to make degrees of all nodes even
partition string into substrings with values at most k
range sum query 2d - immutable
maximum number of consecutive values you can make
find the highest altitude
tenth line
minimum xor sum of two arrays
count the hidden sequences
minimum number of refueling stops
count integers in intervals
swap salary
maximum equal frequency
symmetric tree
smallest range covering elements from k lists
basic calculator iv
elimination game
minimum absolute difference in bst
sales person
ways to make a fair array
first day where you have been in all the rooms
kth largest sum in a binary tree
flip string to monotone increasing
remove all adjacent duplicates in string
get biggest three rhombus sums in a grid
number of senior citizens
goal parser interpretation
single element in a sorted array
primary department for each employee
next permutation
house robber iv
make array empty
possible bipartition
find lucky integer in an array
flood fill
reverse subarray to maximize array value
find greatest common divisor of array
find original array from doubled array
alert using same key-card three or more times in a one hour period
sum of total strength of wizards
minimize the total price of the trips
camelcase matching
vowel spellchecker
count number of bad pairs
copy list with random pointer
lemonade change
the skyline problem
contains duplicate ii
minimum obstacle removal to reach corner
the employee that worked on the longest task
n-queens
watering plants ii
erect the fence
groups of strings
minimum number of operations to convert time
spiral matrix
number of ways to select buildings
minimum cost to connect two groups of points
maximum matching of players with trainers
reverse nodes in k-group
minimum impossible or
execution of all suffix instructions staying in a grid
the earliest and latest rounds where players compete
convert sorted list to binary search tree
promise time limit
number of lines to write string
maximize greatness of an array
graph connectivity with threshold
path sum iii
reduction operations to make the array elements equal
find smallest letter greater than target
length of longest fibonacci subsequence
process tasks using servers
longest palindromic substring
daily leads and partners
search suggestions system
random pick with weight
snapshot array
number of steps to reduce a number to zero
minimum height trees
check if n and its double exist
unique paths ii
nth highest salary
number of rectangles that can form the largest square
valid palindrome ii
find the duplicate number
number of pairs of strings with concatenation equal to target
brace expansion ii
number of submatrices that sum to target
brick wall
random flip matrix
power of two
maximum bags with full capacity of rocks
implement stack using queues
create binary tree from descriptions
minimum path cost in a grid
basic calculator
minimum depth of binary tree
transform to chessboard
json deep equal
check if word is valid after substitutions
maximal square
longest cycle in a graph
baseball game
queue reconstruction by height
maximum product of splitted binary tree
maximum matrix sum
matrix block sum
minimum deletions to make array divisible
time based key-value store
find the k-sum of an array
kth largest element in an array
pascal's triangle
binary string with substrings representing 1 to n
throne inheritance
online election
memoize
hamming distance
subarray sums divisible by k
kth missing positive number
stone game iii
find resultant array after removing anagrams
count number of special subsequences
destroy sequential targets
numbers with same consecutive differences
accounts merge
rank teams by votes
maximum good people based on statements
check if word can be placed in crossword
minimum weighted subgraph with the required paths
minimum swaps to arrange a binary grid
cache with time limit
count subarrays with median k
minesweeper
maximum sum of distinct subarrays with length k
merge nodes in between zeros
smallest string with a given numeric value
number of ways to split array
subsets ii
bitwise ors of subarrays
race car
number of valid words in a sentence
delete and earn
chunk array
shuffle an array
longest subsequence with limited sum
check if there is a valid parentheses string path
path sum
earliest possible day of full bloom
reverse only letters
count anagrams
check if two string arrays are equivalent
subarray with elements greater than varying threshold
design authentication manager
number of closed islands
nim game
minimum subsequence in non-increasing order
assign cookies
finding pairs with a certain sum
fibonacci number
split array largest sum
print binary tree
integer break
sum of beauty in the array
find followers count
number of people aware of a secret
kids with the greatest number of candies
complete binary tree inserter
occurrences after bigram
serialize and deserialize bst
valid number
trapping rain water ii
jump game iv
number of ways to earn points
flatten binary tree to linked list
actors and directors who cooperated at least three times
maximize number of nice divisors
minimum cost to set cooking time
online stock span
minimum cost to hire k workers
minimum number of steps to make two strings anagram
count submatrices with all ones
maximum product after k increments
relative ranks
maximize number of subsequences in a string
three divisors
find the smallest divisor given a threshold
number of digit one
flip columns for maximum number of equal rows
sales analysis iii
smallest string starting from leaf
my calendar i
append k integers with minimal sum
can i win
construct binary search tree from preorder traversal
find the distinct difference array
student attendance record i
available captures for rook
group the people given the group size they belong to
sign of the product of an array
design bitset
sum root to leaf numbers
trips and users
interleaving string
peeking iterator
maximize win from two segments
frog position after t seconds
minimum distance between bst nodes
distribute candies
profitable schemes
linked list random node
maximum element after decreasing and rearranging
calculate money in leetcode bank
count subarrays with score less than k
find closest node to given two nodes
longest nice substring
valid triangle number
minimum score of a path between two cities
find consecutive integers from a data stream
design hashmap
maximum erasure value
exchange seats
maximum score of spliced array
daily temperatures
check completeness of a binary tree
group sold products by the date
find the string with lcp
remove colored pieces if both neighbors are the same color
top travellers
adding spaces to a string
naming a company
bank account summary ii
maximum subarray sum with one deletion
find critical and pseudo-critical edges in minimum spanning tree
count items matching a rule
sum of two integers
sum of distances in tree
two city scheduling
average of levels in binary tree
132 pattern
shift 2d grid
path with maximum probability
maximum number of darts inside of a circular dartboard
find bottom left tree value
find and replace in string
minimum number of visited cells in a grid
longest square streak in an array
rotated digits
longest increasing subsequence ii
binary watch
longest substring without repeating characters
make array zero by subtracting equal amounts
third maximum number
sum of beauty of all substrings
generate fibonacci sequence
longest turbulent subarray
last moment before all ants fall out of a plank
find score of an array after marking all elements
find first palindromic string in the array
counter
build array where you can find the maximum exactly k comparisons
take gifts from the richest pile
rotate string
maximize sum of array after k negations
best position for a service centre
minimum initial energy to finish tasks
range sum query - immutable
find servers that handled most number of requests
find three consecutive integers that sum to a given number
regions cut by slashes
maximum points you can obtain from cards
count special integers
domino and tromino tiling
maximum split of positive even integers
swap nodes in pairs
maximum number of visible points
print foobar alternately
maximum candies you can get from boxes
convert the temperature
maximum xor after operations
minimum numbers of function calls to make target array
minimum number of taps to open to water a garden
count common words with one occurrence
count good triplets
maximum repeating substring
sum game
number of nodes in the sub-tree with the same label
minimum domino rotations for equal row
can convert string in k moves
maximum difference between node and ancestor
the k-th lexicographical string of all happy strings of length n
friends of appropriate ages
number of good paths
height checker
range sum of bst
minimum cost of a path with special roads
minimum absolute difference queries
minimum operations to make the array k-increasing
latest time by replacing hidden digits
maximum number of groups entering a competition
n-ary tree preorder traversal
sum of subarray ranges
least number of unique integers after k removals
reverse string
unique substrings in wraparound string
minimum remove to make valid parentheses
design circular deque
maximum number of balloons
count number of possible root nodes
longest continuous subarray with absolute diff less than or equal to limit
unique paths iii
minimum value to get positive step by step sum
check if binary string has at most one segment of ones
partition array for maximum sum
minimum adjacent swaps to reach the kth smallest number
maximize distance to closest person
satisfiability of equality equations
merge similar items
best poker hand
decoded string at index
cousins in binary tree ii
find the closest palindrome
keyboard row
construct smallest number from di string
binary tree right side view
largest merge of two strings
rearrange characters to make target string
largest palindromic number
maximum subsequence score
largest component size by common factor
find latest group of size m
3sum closest
minimum white tiles after covering with carpets
maximum score from removing stones
minimum number of operations to make all array elements equal to 1
rising temperature
apply transform over each element in array
long pressed name
number of atoms
build a matrix with conditions
k-diff pairs in an array
apply operations to an array
maximum difference between increasing elements
delete columns to make sorted
task scheduler ii
decrypt string from alphabet to integer mapping
longest uploaded prefix
longest common subpath
number of ways to stay in the same place after some steps
video stitching
find customer referee
minimize malware spread ii
richest customer wealth
shortest subarray to be removed to make array sorted
words within two edits of dictionary
powerful integers
unique number of occurrences
cherry pickup
as far from land as possible
minimum degree of a connected trio in a graph
course schedule ii
maximum nesting depth of two valid parentheses strings
range product queries of powers
check if object instance of class
clumsy factorial
random point in non-overlapping rectangles
x of a kind in a deck of cards
pyramid transition matrix
sort array by increasing frequency
merge two 2d arrays by summing values
beautiful arrangement ii
minimum total space wasted with k resizing operations
insert into a binary search tree
shortest unsorted continuous subarray
prison cells after n days
reordered power of 2
removing minimum number of magic beans
minimum addition to make integer beautiful
find pivot index
find the maximum number of marked indices
counter ii
first unique character in a string
longest happy string
function composition
remove one element to make the array strictly increasing
longest substring of one repeating character
immediate food delivery ii
number of zero-filled subarrays
maximum nesting depth of the parentheses
design a number container system
maximal network rank
merge in between linked lists
construct k palindrome strings
find target indices after sorting array
check if array pairs are divisible by k
maximum alternating subsequence sum
pow(x, n)
maximum difference by remapping a digit
projection area of 3d shapes
day of the year
meeting rooms iii
find largest value in each tree row
maximum number of non-overlapping substrings
maximum number of points from grid queries
friend requests ii: who has the most friends
left and right sum differences
distinct subsequences
permutations ii
cyclically rotating a grid
rearrange array elements by sign
partitioning into minimum number of deci-binary numbers
jump game
concatenation of consecutive binary numbers
find the maximum divisibility score
difference between maximum and minimum price sum
count servers that communicate
count largest group
check if all the integers in a range are covered
second minimum time to reach destination
shortest palindrome
maximum sum of 3 non-overlapping subarrays
group by
remove duplicate letters
special array with x elements greater than or equal x
bus routes
maximum subarray
sum of nodes with even-valued grandparent
three equal parts
permutation in string
maximum points in an archery competition
sum of floored pairs
remove all occurrences of a substring
find k-th smallest pair distance
01 matrix
my calendar iii
minimum reverse operations
removing minimum and maximum from array
deepest leaves sum
multiply strings
making file names unique
peak index in a mountain array
longest subarray of 1's after deleting one element
take k of each character from left and right
reverse words in a string iii
shortest subarray with sum at least k
reverse string ii
daily temperatures
check completeness of a binary tree
group sold products by the date
find the string with lcp
remove colored pieces if both neighbors are the same color
top travellers
adding spaces to a string
naming a company
bank account summary ii
maximum subarray sum with one deletion
find critical and pseudo-critical edges in minimum spanning tree
count items matching a rule
sum of two integers
sum of distances in tree
two city scheduling
average of levels in binary tree
132 pattern
shift 2d grid
path with maximum probability
maximum number of darts inside of a circular dartboard
find bottom left tree value
find and replace in string
minimum number of visited cells in a grid
longest square streak in an array
rotated digits
longest increasing subsequence ii
binary watch
longest substring without repeating characters
make array zero by subtracting equal amounts
third maximum number
sum of beauty of all substrings
generate fibonacci sequence
longest turbulent subarray
last moment before all ants fall out of a plank
find score of an array after marking all elements
find first palindromic string in the array
counter
build array where you can find the maximum exactly k comparisons
take gifts from the richest pile
rotate string
maximize sum of array after k negations
best position for a service centre
minimum initial energy to finish tasks
range sum query - immutable
find servers that handled most number of requests
find three consecutive integers that sum to a given number
regions cut by slashes
maximum points you can obtain from cards
count special integers
domino and tromino tiling
maximum split of positive even integers
swap nodes in pairs
maximum number of visible points
print foobar alternately
maximum candies you can get from boxes
convert the temperature
maximum xor after operations
minimum numbers of function calls to make target array
minimum number of taps to open to water a garden
count common words with one occurrence
count good triplets
maximum repeating substring
sum game
number of nodes in the sub-tree with the same label
minimum domino rotations for equal row
can convert string in k moves
maximum difference between node and ancestor
the k-th lexicographical string of all happy strings of length n
friends of appropriate ages
number of good paths
height checker
range sum of bst
minimum cost of a path with special roads
minimum absolute difference queries
minimum operations to make the array k-increasing
latest time by replacing hidden digits
maximum number of groups entering a competition
n-ary tree preorder traversal
sum of subarray ranges
least number of unique integers after k removals
reverse string
unique substrings in wraparound string
minimum remove to make valid parentheses
design circular deque
maximum number of balloons
count number of possible root nodes
longest continuous subarray with absolute diff less than or equal to limit
unique paths iii
minimum value to get positive step by step sum
check if binary string has at most one segment of ones
partition array for maximum sum
minimum adjacent swaps to reach the kth smallest number
maximize distance to closest person
satisfiability of equality equations
merge similar items
best poker hand
decoded string at index
cousins in binary tree ii
find the closest palindrome
keyboard row
construct smallest number from di string
binary tree right side view
largest merge of two strings
rearrange characters to make target string
largest palindromic number
maximum subsequence score
largest component size by common factor
find latest group of size m
3sum closest
minimum white tiles after covering with carpets
maximum score from removing stones
minimum number of operations to make all array elements equal to 1
rising temperature
apply transform over each element in array
long pressed name
number of atoms
build a matrix with conditions
k-diff pairs in an array
apply operations to an array
maximum difference between increasing elements
delete columns to make sorted
task scheduler ii
decrypt string from alphabet to integer mapping
longest uploaded prefix
longest common subpath
number of ways to stay in the same place after some steps
video stitching
find customer referee
minimize malware spread ii
richest customer wealth
shortest subarray to be removed to make array sorted
words within two edits of dictionary
powerful integers
unique number of occurrences
cherry pickup
as far from land as possible
minimum degree of a connected trio in a graph
course schedule ii
maximum nesting depth of two valid parentheses strings
range product queries of powers
check if object instance of class
clumsy factorial
random point in non-overlapping rectangles
x of a kind in a deck of cards
pyramid transition matrix
sort array by increasing frequency
merge two 2d arrays by summing values
beautiful arrangement ii
minimum total space wasted with k resizing operations
insert into a binary search tree
shortest unsorted continuous subarray
prison cells after n days
reordered power of 2
removing minimum number of magic beans
minimum addition to make integer beautiful
find pivot index
find the maximum number of marked indices
counter ii
first unique character in a string
longest happy string
function composition
remove one element to make the array strictly increasing
longest substring of one repeating character
immediate food delivery ii
number of zero-filled subarrays
maximum nesting depth of the parentheses
design a number container system
maximal network rank
merge in between linked lists
construct k palindrome strings
find target indices after sorting array
check if array pairs are divisible by k
maximum alternating subsequence sum
pow(x, n)
maximum difference by remapping a digit
projection area of 3d shapes
day of the year
meeting rooms iii
find largest value in each tree row
maximum number of non-overlapping substrings
maximum number of points from grid queries
friend requests ii: who has the most friends
left and right sum differences
distinct subsequences
permutations ii
cyclically rotating a grid
rearrange array elements by sign
partitioning into minimum number of deci-binary numbers
jump game
concatenation of consecutive binary numbers
find the maximum divisibility score
difference between maximum and minimum price sum
count servers that communicate
count largest group
check if all the integers in a range are covered
second minimum time to reach destination
shortest palindrome
maximum sum of 3 non-overlapping subarrays
group by
remove duplicate letters
special array with x elements greater than or equal x
bus routes
maximum subarray
sum of nodes with even-valued grandparent
three equal parts
permutation in string
maximum points in an archery competition
sum of floored pairs
remove all occurrences of a substring
find k-th smallest pair distance
01 matrix
my calendar iii
minimum reverse operations
removing minimum and maximum from array
deepest leaves sum
multiply strings
making file names unique
peak index in a mountain array
longest subarray of 1's after deleting one element
take k of each character from left and right
reverse words in a string iii
shortest subarray with sum at least k
reverse string ii
capacity to ship packages within d days
sum of numbers with units digit k
count the number of ideal arrays
binary number with alternating bits
all nodes distance k in binary tree
numbers at most n given digit set
process restricted friend requests
egg drop with 2 eggs and n floors
minimum cost to move chips to the same position
reverse linked list ii
rotate list
word search
binary search
decode ways ii
number of matching subsequences
expression add operators
count number of nice subarrays
count nice pairs in an array
word break ii
prime palindrome
second highest salary
removing stars from a string
find the punishment number of an integer
maximum total beauty of the gardens
rectangle area
employee bonus
sum of all subset xor totals
minimum length of string after deleting similar ends
compare version numbers
bulb switcher
check if word equals summation of two words
remove covered intervals
non-decreasing subsequences
largest palindrome product
next greater node in linked list
sort colors
best time to buy and sell stock with transaction fee
maximum number of fish in a grid
reformat date
count negative numbers in a sorted matrix
find all good strings
minimum string length after removing substrings
cut off trees for golf event
maximum xor with an element from array
get the maximum score
minimum distance to the target element
intersection of two linked lists
k-concatenation maximum sum
replace elements in an array
element appearing more than 25% in sorted array
predict the winner
sort integers by the number of 1 bits
count salary categories
implement queue using stacks
minimum difficulty of a job schedule
number of ways to separate numbers
two sum
minimum operations to make a subsequence
regular expression matching
binary tree level order traversal
split message based on limit
maximum number of vowels in a substring of given length
minimum number of swaps to make the binary string alternating
rotating the box
confirmation rate
array prototype last
subsets
arithmetic slices
thousand separator
reshape the matrix
count vowels permutation
maximum depth of binary tree
swap for longest repeated character substring
maximum area of a piece of cake after horizontal and vertical cuts
combination sum ii
add minimum number of rungs
simplify path
continuous subarray sum
house robber ii
number of smooth descent periods of a stock
can make arithmetic progression from sequence
minimum fuel cost to report to the capital
circular sentence
group anagrams
word subsets
delete operation for two strings
create hello world function
maximum number of events that can be attended
check if number has equal digit count and digit value
reformat phone number
word break
longest duplicate substring
ones and zeroes
score after flipping matrix
average salary excluding the minimum and maximum salary
delivering boxes from storage to ports
debounce
minimum area rectangle
count square sum triples
reaching points
employees with missing information
number of valid clock times
dice roll simulation
maximum binary tree ii
delete greatest value in each row
count vowel strings in ranges
sum of root to leaf binary numbers
minimum operations to make a uni-value grid
remove linked list elements
max dot product of two subsequences
count square submatrices with all ones
prime subtraction operation
partition array into three parts with equal sum
stone game ii
water and jug problem
xor queries of a subarray
largest magic square
advantage shuffle
maximum length of subarray with positive product
missing number
random pick index
big countries
min cost to connect all points
rotate function
find all anagrams in a string
find the losers of the circular game
xor operation in an array
prime arrangements
super egg drop
reachable nodes with restrictions
making a large island
maximum swap
4sum ii
minimum number of work sessions to finish the tasks
range addition ii
reorganize string
minimum skips to arrive at meeting on time
valid tic-tac-toe state
delete columns to make sorted iii
longest chunked palindrome decomposition
filter restaurants by vegan-friendly, price and distance
k-th symbol in grammar
split array into consecutive subsequences
binary tree inorder traversal
broken calculator
falling squares
queries quality and percentage
time needed to inform all employees
letter case permutation
k-similar strings
binary tree zigzag level order traversal
remove nodes from linked list
minimum number of days to disconnect island
number of valid move combinations on chessboard
number of times binary string is prefix-aligned
interval list intersections
global and local inversions
cracking the safe
custom sort string
find all groups of farmland
design browser history
rearranging fruits
minimum sum of four digit number after splitting digits
minimum moves to reach target score
furthest building you can reach
count ways to group overlapping ranges
all paths from source to target
shortest impossible sequence of rolls
k highest ranked items within a price range
largest divisible subset
subarray sum equals k
number of ways to buy pens and pencils
throttle
minimum deletions to make string balanced
restore the array from adjacent pairs
perfect squares
construct string with repeat limit
find the original array of prefix xor
verifying an alien dictionary
parse lisp expression
game play analysis iv
max chunks to make sorted ii
find mode in binary search tree
shortest path in binary matrix
exam room
find winner on a tic tac toe game
count unique characters of all substrings of a given string
construct binary tree from preorder and inorder traversal
complement of base 10 integer
moving stones until consecutive ii
convert to base -2
lru cache
filling bookcase shelves
department highest salary
k-th smallest in lexicographical order
queries on a permutation with key
remove zero sum consecutive nodes from linked list
palindromic substrings
monotonic array
count operations to obtain zero
maximize score after n operations
number of strings that appear as substrings in word
bitwise xor of all pairings
find k pairs with smallest sums
product sales analysis i
counting bits
department top three salaries
minimum flips to make a or b equal to c
four divisors
replace the substring for balanced string
detect capital
coordinate with maximum network quality
n-th tribonacci number
compare strings by frequency of the smallest character
convert object to json string
maximum value at a given index in a bounded array
human traffic of stadium
flatten nested list iterator
h-index
shortest bridge
lowest common ancestor of a binary tree
basic calculator ii
smallest k-length subsequence with occurrences of a letter
destination city
max value of equation
minimum time to complete all tasks
two sum ii - input array is sorted
paint house iii
maximum building height
smallest string with swaps
max increase to keep city skyline
insert delete getrandom o(1)
delete node in a bst
minimum moves to equal array elements
longest well-performing interval
longest absolute file path
find valid matrix given row and column sums
minimum moves to make array complementary
decode xored array
fancy sequence
next greater element ii
largest triangle area
flatten a multilevel doubly linked list
robot return to origin
longest palindromic subsequence
subtract the product and sum of digits of an integer
minimum moves to convert string
array reduce transformation
largest plus sign
car fleet ii
the latest login in 2020
rabbits in forest
number of excellent pairs
minimum time to repair cars
find the city with the smallest number of neighbors at a threshold distance
minimize maximum of array
match substring after replacement
determine whether matrix can be obtained by rotation
design an ordered stream
minimum interval to include each query
minimum cuts to divide a circle
minimum number of moves to seat everyone
the number of the smallest unoccupied chair
sliding window maximum
network delay time
maximum segment sum after removals
find users with valid e-mails
max number of k-sum pairs
find all k-distant indices in an array
number of burgers with no waste of ingredients
minimum time difference
all o`one data structure
maximum xor of two numbers in an array
sum of digits in base k
design skiplist
count prefixes of a given string
fruit into baskets
maximum number of robots within budget
best time to buy and sell stock with cooldown
count number of ways to place houses
minimum cost homecoming of a robot in a grid
beautiful arrangement
sort array by parity ii
merge two binary trees
final prices with a special discount in a shop
battleships in a board
uncommon words from two sentences
n-ary tree postorder traversal
sum of all odd length subarrays
grid game
add two numbers
smallest sufficient team
binary tree paths
minimize malware spread
count pairs of similar strings
min max game
difference between element sum and digit sum of an array
validate binary search tree
number of ways to divide a long corridor
minimum number of operations to make array continuous
minimum suffix flips
minimum time to collect all apples in a tree
reformat department table
happy number
maximum sum circular subarray
reward top k students
sender with largest word count
minimum sum of squared difference
super pow
decrease elements to make array zigzag
total cost to hire k workers
minimize result by adding parentheses to expression
longest continuous increasing subsequence
image smoother
max consecutive ones iii
count number of distinct integers after reverse operations
rearrange products table
make array strictly increasing
divisor game
nth digit
employees whose manager left the company
clone graph
number of beautiful partitions
minimum number of steps to make two strings anagram ii
call function with custom context
power of four
maximize the topmost element after k moves
minimum number of moves to make palindrome
probability of a two boxes having the same number of distinct balls
minimum increment to make array unique
minimum score by changing two elements
delete duplicate emails
number of subarrays with lcm equal to k
form array by concatenating subarrays of another array
constrained subsequence sum
valid phone numbers
best sightseeing pair
minimum path sum
angle between hands of a clock
minimum time to make rope colorful
maximum deletions on a string
find a value of a mysterious function closest to target
maximum count of positive integer and negative integer
maximum product subarray
change minimum characters to satisfy one of three conditions
remove palindromic subsequences
base 7
count nodes with the highest score
divide two integers
maximum twin sum of a linked list
arithmetic slices ii - subsequence
tuple with same product
shifting letters ii
number of unique good subsequences
number of sub-arrays with odd sum
widest vertical area between two points containing no points
find the score of all prefixes of an array
largest color value in a directed graph
toeplitz matrix
count the number of consistent strings
distinct prime factors of product of array
destroying asteroids
queens that can attack the king
monthly transactions i
last substring in lexicographical order
maximum number of weeks for which you can work
length of last word
maximum number of groups getting fresh donuts
map of highest peak
average waiting time
flip binary tree to match preorder traversal
maximum consecutive floors without special floors
maximum score words formed by letters
minimize xor
check if every row and column contains all numbers
longest valid parentheses
dinner plate stacks
map sum pairs
find median from data stream
node with highest edge score
stone game v
list the products ordered in a period
count special quadruplets
longest common prefix
how many numbers are smaller than the current number
lexicographically smallest string after applying operations
amount of time for binary tree to be infected
maximum number of occurrences of a substring
balance a binary search tree
minimum replacements to sort the array
closest dessert cost
word frequency
check if all 1's are at least length k places away
kth largest element in a stream
form smallest number from two digit arrays
palindrome partitioning iii
bulls and cows
find subsequence of length k with the largest sum
minimum number of swaps to make the string balanced
longest substring of all vowels in order
sqrt(x)
stone game vi
longest word in dictionary
minimum number of days to make m bouquets
dungeon game
minimum changes to make alternating binary string
minimum size subarray sum
maximum number of moves in a grid
reconstruct original digits from english
number of unique subjects taught by each teacher
minimum space wasted from packaging
rotate array
expressive words
smallest subsequence of distinct characters
queries on number of points inside a circle
minimize maximum pair sum in array
check if matrix is x-matrix
couples holding hands
maximum score of a node sequence
statistics from a large sample
number of sub-arrays of size k and average greater than or equal to threshold
final value of variable after performing operations
subdomain visit count
form largest integer with digits that add up to target
swim in rising water
number of valid words for each puzzle
find first and last position of element in sorted array
online majority element in subarray
check if it is a straight line
minimum difference in sums after removal of elements
distribute repeating integers
find words that can be formed by characters
memoize ii
text justification
number of adjacent elements with the same color
find unique binary string
the k strongest values in an array
replace all digits with characters
circle and rectangle overlapping
maximum number of words you can type
number of great partitions
chalkboard xor game
check knight tour configuration
two sum iv - input is a bst
combinations
cherry pickup ii
tallest billboard
number of subarrays with bounded maximum
count increasing quadruplets
count collisions of monkeys on a polygon
minimum index sum of two lists
find the winner of an array game
validate binary tree nodes
add digits
perfect rectangle
coin change ii
is subsequence
number of ways to paint n × 3 grid
pseudo-palindromic paths in a binary tree
minimum amount of time to collect garbage
the number of full rounds you have played
count good triplets in an array
remove element
replace employee id with the unique identifier
house robber
total appeal of a string
minimum operations to convert number
splitting a string into descending consecutive values
count the repetitions
eliminate maximum number of monsters
target sum
minimum moves to reach target with rotations
last stone weight
largest submatrix with rearrangements
longest zigzag path in a binary tree
sort the students by their kth score
mirror reflection
rank scores
score of parentheses
longest string chain
all elements in two binary search trees
find two non-overlapping sub-arrays each with target sum
k divisible elements subarrays
minimum lines to represent a line chart
evaluate division
substrings of size three with distinct characters
minimum cost to change the final value of expression
maximum number of events that can be attended ii
most popular video creator
next greater element iii
transpose matrix
selling pieces of wood
most beautiful item for each query
divide array in sets of k consecutive numbers
lexicographically smallest beautiful string
fraction to recurring decimal
minimum insertion steps to make a string palindrome
two out of three
grid illumination
maximum employees to be invited to a meeting
minimize hamming distance after swap operations
the number of good subsets
longest uncommon subsequence i
count number of maximum bitwise-or subsets
checking existence of edge length limited paths
recover the original array
find kth bit in nth binary string
maximum product difference between two pairs
spiral matrix ii
minimum common value
crawler log folder
minimum operations to make array equal
replace all ?'s to avoid consecutive repeating characters
sort the people
closest subsequence sum
minimum cost to split an array
shortest path visiting all nodes
find triangular sum of an array
merge k sorted lists
find eventual safe states
palindrome number
maximum path quality of a graph
maximum average subarray i
array with elements not equal to average of neighbors
find xor-beauty of array
2 keys keyboard
minimum operations to halve array sum
find the minimum and maximum number of nodes between critical points
push dominoes
number of substrings containing all three characters
zigzag conversion
largest values from labels
number of common factors
find the prefix common array of two arrays
maximum performance of a team
restaurant growth
serialize and deserialize binary tree
smallest subarrays with maximum bitwise or
determine the winner of a bowling game
minimum deletions to make character frequencies unique
coin change
minimum time to visit a cell in a grid
check if move is legal
swap adjacent in lr string
count of matches in tournament
determine if two strings are close
single number iii
3sum
linked list cycle ii
sort an array
minimum limit of balls in a bag
minimize the maximum difference of pairs
count unhappy friends
count hills and valleys in an array
count distinct numbers on board
count number of texts
abbreviating the product of a range
minimum incompatibility
remove outermost parentheses
zuma game
maximum side length of a square with sum less than or equal to threshold
populating next right pointers in each node
insert delete getrandom o(1) - duplicates allowed
partition array according to given pivot
maximum running time of n computers
find positive integer solution for a given equation
convert integer to the sum of two no-zero integers
max points on a line
generate parentheses
average value of even numbers that are divisible by three
sum of unique elements
distribute coins in binary tree
number of arithmetic triplets
greatest common divisor of strings
number of enclaves
string compression ii
max area of island
valid sudoku
balanced binary tree
count collisions on a road
course schedule
24 game
find the shortest superstring
add one row to tree
delete nodes and return forest
smallest even multiple
substring with concatenation of all words
design movie rental system
rank transform of an array
search a 2d matrix ii
number of increasing paths in a grid
nested array generator
percentage of users attended a contest
customer placing the largest number of orders
alternating digit sum
number of provinces
max sum of rectangle no larger than k
license key formatting
next greater numerically balanced number
implement magic dictionary
the number of weak characters in the game
product of the last k numbers
article views i
the dining philosophers
distant barcodes
length of the longest alphabetical continuous substring
find center of star graph
jump game v
guess the word
longest increasing path in a matrix
longest palindrome by concatenating two letter words
unique paths
game of life
count pairs of nodes
kth smallest number in multiplication table
heaters
minimize deviation in array
minimum number of people to teach
to lower case
maximum value of a string in an array
delete node in a linked list
all possible full binary trees
matrix diagonal sum
new 21 game
minimum cost to cut a stick
kth smallest instructions
ambiguous coordinates
calculate delayed arrival time
count palindromic subsequences
reformat the string
building h2o
smallest number in infinite set
leaf-similar trees
image overlap
average selling price
steps to make array non-decreasing
wildcard matching
longest increasing subsequence
check if one string swap can make strings equal
smallest value after replacing with sum of prime factors
unique length-3 palindromic subsequences
duplicate zeros
minimum consecutive cards to pick up
add strings
binary search tree to greater sum tree
count unreachable pairs of nodes in an undirected graph
construct binary tree from inorder and postorder traversal
orderly queue
magnetic force between two balls
design an atm machine
number of ways to reconstruct a tree
implement trie (prefix tree)
pancake sorting
reorder list
defuse the bomb
merge two sorted lists
number of subsequences that satisfy the given sum condition
k closest points to origin
decode string
best time to buy and sell stock ii
maximum and sum of array
count sorted vowel strings
task scheduler
project employees i
find the most competitive subsequence
previous permutation with one swap
longest uncommon subsequence ii
pizza with 3n slices
find nearest point that has the same x or y coordinate
print zero even odd
kth smallest element in a bst
sort even and odd indices independently
moving stones until consecutive
create maximum number
movie rating
find the longest balanced substring of a binary string
best time to buy and sell stock iii
k-th smallest prime fraction
1-bit and 2-bit characters
frequency tracker
out of boundary paths
number of islands
find peak element
invalid tweets
number of steps to reduce a number in binary representation to one
maximum number of pairs in array
minimum number of operations to move all balls to each box
convert an array into a 2d array with conditions
find the k-beauty of a number
shortest common supersequence
shortest path in a grid with obstacles elimination
move zeroes
minimize the maximum of two arrays
walking robot simulation ii
rings and rods
strong password checker ii
maximum subarray min-product
single number
row with maximum ones
mean of array after removing some elements
using a robot to print the lexicographically smallest string
valid arrangement of pairs
consecutive characters
sum of scores of built strings
sort items by groups respecting dependencies
range frequency queries
find duplicate subtrees
rectangle area ii
set intersection size at least two
disconnect path in a binary matrix by at most one flip
find all possible recipes from given supplies
h-index ii
longest mountain in array
prefix and suffix search
strictly palindromic number
linked list cycle
non-decreasing array
the k weakest rows in a matrix
ways to split array into three subarrays
path in zigzag labelled binary tree
reveal cards in increasing order
largest number
maximum or
find minimum in rotated sorted array
valid anagram
maximum enemy forts that can be captured
ipo
number of operations to make network connected
shuffle the array
count and say
escape a large maze
power of heroes
path crossing
guess number higher or lower
replace elements with greatest element on right side
shortest distance to a character
number of equivalent domino pairs
logical or of two binary grids represented as quad-trees
reverse vowels of a string
maximum binary string after change
array wrapper
knight dialer
maximum sum bst in binary tree
add two integers
remove duplicates from sorted array
integer replacement
a number after a double reversal
maximum number of points with cost
remove sub-folders from the filesystem
reverse words in a string
magical string
maximum sum of an hourglass
binary gap
diagonal traverse
minimum garden perimeter to collect enough apples
maximum product of the length of two palindromic subsequences
check if it is a good array
positions of large groups
maximum product of three numbers
ransom note
decode xored permutation
curry
delete duplicate folders in system
decode the slanted ciphertext
minimum hours of training to win a competition
create target array in the given order
jewels and stones
middle of the linked list
most frequent even element
perfect number
check if there is a valid path in a grid
course schedule iv
parsing a boolean expression
reverse prefix of word
intersection of two arrays
stickers to spell word
circular permutation in binary representation
largest number after digit swaps by parity
house robber iii
append characters to string to make subsequence
maximum number of non-overlapping palindrome substrings
insufficient nodes in root to leaf paths
bag of tokens
next greater element i
tag validator
optimal division
valid parenthesis string
shuffle string
minimum jumps to reach home
hand of straights
odd even linked list
largest rectangle in histogram
longest subarray with maximum bitwise and
count total number of colored cells
binary tree maximum path sum
sum of absolute differences in a sorted array
maximum score from performing multiplication operations
next greater element iv
construct binary tree from preorder and postorder traversal
design add and search words data structure
minimum falling path sum ii
delete characters to make fancy string
maximize palindrome length from subsequences
detect squares
smallest range ii
count elements with strictly smaller and greater elements
minimum falling path sum
simplified fractions
sudoku solver
maximum earnings from taxi
relative sort array
set matrix zeroes
island perimeter
preimage size of factorial zeroes function
most profitable path in a tree
number of good ways to split a string
max chunks to make sorted
find all duplicates in an array
longer contiguous segments of ones than zeros
restore the array
count of range sum
can you eat your favorite candy on your favorite day?
number of restricted paths from first to last node
minimum operations to make all array elements equal
alphabet board path
count lattice points inside a circle
step-by-step directions from a binary tree node to another
number of music playlists
maximum population year
count subarrays with fixed bounds
find the winner of the circular game
count subtrees with max distance between cities
beautiful array
trapping rain water
defanging an ip address
reverse bits
seat reservation manager
can make palindrome from substring
grumpy bookstore owner
generate a string with characters that have odd counts
minimum number of k consecutive bit flips
maximum number of balls in a box
duplicate emails
maximum product of word lengths
gcd sort of an array
split two strings to make palindrome
minimum score after removals on a tree
stone game ix
letter tile possibilities
subsequence with the minimum score
building boxes
car fleet
decompress run-length encoded list
kth distinct string in an array
lexicographically smallest equivalent string
minimum operations to make array equal ii
minimum ascii delete sum for two strings
search insert position
minimum time to remove all cars containing illegal goods
check whether two strings are almost equivalent
number of even and odd bits
string compression
top k frequent words
product sales analysis iii
sum of mutated array closest to target
find minimum time to finish all jobs
maximize grid happiness
find the substring with maximum cost
maximum ascending subarray sum
maximum score from removing substrings
root equals sum of children
fizz buzz multithreaded
find subarrays with equal sum
minimize the difference between target and chosen elements
sum of subsequence widths
determine if string halves are alike
evaluate reverse polish notation
minimum cost to make at least one valid path in a grid
number of ways of cutting a pizza
check if string is a prefix of array
sum of number and its reverse
sum of even numbers after queries
maximum value of k coins from piles
kth ancestor of a tree node
minimum cost tree from leaf values
keys and rooms
find total time spent by each employee
flip equivalent binary trees
first completely painted row or column
remove max number of edges to keep graph fully traversable
minimum time to complete trips
escape the spreading fire
repeated substring pattern
number of ways to reach a position after exactly k steps
first letter to appear twice
reconstruct a 2-row binary matrix
simple bank system
intervals between identical elements
find the array concatenation value
divide intervals into minimum number of groups
longest palindrome
plus one
stone game vii
maximize the minimum powered city
design cancellable function
minimum cost for tickets
maximum length of pair chain
find common characters
redistribute characters to make all strings equal
maximum profit of operating a centennial wheel
maximum units on a truck
partition array into disjoint intervals
solving questions with brainpower
sum of distances
n-ary tree level order traversal
construct the lexicographically largest valid sequence
differences between two objects
count sub islands
minimum sideway jumps
most visited sector in a circular track
min cost climbing stairs
number of different subsequences gcds
transpose file
maximum length of a concatenated string with unique characters
count complete tree nodes
maximum number of integers to choose from a range i
count ways to build rooms in an ant colony
even odd tree
shortest path with alternating colors
longest ideal subsequence
contiguous array
max sum of a pair with equal sum of digits
number of good leaf nodes pairs
is graph bipartite?
find the longest substring containing vowels in even counts
convert a number to hexadecimal
cycle length queries in a tree
string matching in an array
matchsticks to square
count numbers with unique digits
tiling a rectangle with the fewest squares
minimum insertions to balance a parentheses string
most frequent number following key in an array
convert sorted array to binary search tree
number of recent calls
number of 1 bits
jump game iii
count good nodes in binary tree
maximal score after applying k operations
maximum average pass ratio
binary search tree iterator
modify graph edge weights
minimum non-zero product of the array elements
make costs of paths equal in a binary tree
event emitter
minimum total cost to make arrays unequal
design a stack with increment operation
check distances between same letters
difference between ones and zeros in row and column
validate ip address
largest substring between two equal characters
loud and rich
sum of left leaves
binary tree pruning
matrix cells in distance order
sum of subarray minimums
add binary
reducing dishes
summary ranges
sum in a matrix
find the minimum number of fibonacci numbers whose sum is k
ugly number
maximum product of two elements in an array
pacific atlantic water flow
insert interval
split with minimum sum
incremental memory leak
majority element ii
apply discount to prices
invalid transactions
allow one function call
describe the painting
mice and cheese
minimum bit flips to convert number
minimum number of flips to convert binary matrix to zero matrix
flatten deeply nested array
count odd numbers in an interval range
find all numbers disappeared in an array
operations on tree
reverse pairs
best team with no conflicts
unique binary search trees
find the pivot integer
maximum product of the length of two palindromic substrings
maximum number of eaten apples
redundant connection
find palindrome with fixed length
max consecutive ones
minimum amount of time to fill cups
palindrome pairs
maximum profit in job scheduling
split array into fibonacci sequence
count asterisks
minimum swaps to group all 1's together ii
minimum absolute difference
merge intervals
add to array-form of integer
count equal and divisible pairs in an array
equal row and column pairs
shortest path to get all keys
count the number of vowel strings in range
repeated dna sequences
check if point is reachable
the number of employees which report to each employee
subrectangle queries
partition labels
count different palindromic subsequences
time needed to rearrange a binary string
get watched videos by your friends
make the string great
array of objects to matrix
string to integer (atoi)
number of ways to arrive at destination
market analysis i
lexicographically smallest palindrome
partition array such that maximum difference is k
spiral matrix iv
make k-subarray sums equal
fraction addition and subtraction
total hamming distance
binary tree cameras
maximum absolute sum of any subarray
cat and mouse ii
number of squareful arrays
k radius subarray averages
maximum binary tree
construct string from binary tree
most profit assigning work
reconstruct itinerary
